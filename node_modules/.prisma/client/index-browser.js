
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.21.0
 * Query Engine version: 08713a93b99d58f31485621c634b04983ae01d95
 */
Prisma.prismaVersion = {
  client: "5.21.0",
  engine: "08713a93b99d58f31485621c634b04983ae01d95"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Antecedentes_no_patologicosScalarFieldEnum = {
  PatientId: 'PatientId',
  Smoking: 'Smoking',
  SubstanceAbuse: 'SubstanceAbuse',
  Alcoholism: 'Alcoholism',
  Sedentary: 'Sedentary',
  Surgeries: 'Surgeries',
  Exercise: 'Exercise'
};

exports.Prisma.Antecedentes_patologicosScalarFieldEnum = {
  id: 'id',
  PatientId: 'PatientId',
  Disease: 'Disease',
  DiagnosisDate: 'DiagnosisDate',
  DiseaseType: 'DiseaseType',
  Chronic: 'Chronic',
  Treatment: 'Treatment',
  Observations: 'Observations'
};

exports.Prisma.BitacoraScalarFieldEnum = {
  LogId: 'LogId',
  DateTime: 'DateTime',
  User: 'User',
  Action: 'Action',
  Tabla: 'Tabla',
  RecordId: 'RecordId',
  Description: 'Description'
};

exports.Prisma.ClientesScalarFieldEnum = {
  id: 'id',
  Name: 'Name',
  LastName: 'LastName',
  SEX: 'SEX',
  Age: 'Age',
  BirthDate: 'BirthDate',
  Address: 'Address',
  Phone: 'Phone',
  CURP: 'CURP',
  Email: 'Email',
  BloodType: 'BloodType',
  Occupation: 'Occupation',
  Education: 'Education'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  Name: 'Name',
  LastName: 'LastName',
  Age: 'Age',
  BirthDate: 'BirthDate',
  Gender: 'Gender',
  Specialty: 'Specialty',
  Address: 'Address',
  Cellphone: 'Cellphone',
  CURP: 'CURP',
  LicenseNumber: 'LicenseNumber',
  Sex: 'Sex',
  MedicalLicense: 'MedicalLicense',
  Email: 'Email',
  HireDate: 'HireDate'
};

exports.Prisma.EmpleadoScalarFieldEnum = {
  id: 'id',
  Name: 'Name',
  LastName: 'LastName',
  BirthDate: 'BirthDate',
  Gender: 'Gender',
  Cellphone: 'Cellphone',
  Email: 'Email',
  Address: 'Address',
  Position: 'Position',
  CURP: 'CURP',
  RFC: 'RFC',
  Salary: 'Salary',
  HireDate: 'HireDate'
};

exports.Prisma.EnfermedadesScalarFieldEnum = {
  DiseaseId: 'DiseaseId',
  DiseaseType: 'DiseaseType',
  Other: 'Other',
  Causes: 'Causes',
  Symptoms: 'Symptoms',
  Treatment: 'Treatment'
};

exports.Prisma.Examen_clinico_intraoralScalarFieldEnum = {
  PatientId: 'PatientId',
  ExaminationDate: 'ExaminationDate',
  Gums: 'Gums',
  Tongue: 'Tongue',
  HardPalate: 'HardPalate',
  SoftPalate: 'SoftPalate',
  Pharynx: 'Pharynx',
  FloorOfMouth: 'FloorOfMouth',
  ResidualRidge: 'ResidualRidge',
  OcclusionType: 'OcclusionType',
  Observations: 'Observations'
};

exports.Prisma.Historial_clinicoScalarFieldEnum = {
  HistoryId: 'HistoryId',
  ClientId: 'ClientId',
  DentistId: 'DentistId',
  ConsultationDate: 'ConsultationDate',
  ClinicalData: 'ClinicalData'
};

exports.Prisma.PermisosScalarFieldEnum = {
  ID: 'ID',
  Permission: 'Permission',
  Description: 'Description'
};

exports.Prisma.UsuariosScalarFieldEnum = {
  Id: 'Id',
  Email: 'Email',
  Password: 'Password',
  IsAdministrator: 'IsAdministrator',
  IsDoctor: 'IsDoctor',
  IsEmployee: 'IsEmployee'
};

exports.Prisma.ServiciosScalarFieldEnum = {
  Id: 'Id',
  Service_Name: 'Service_Name',
  Price: 'Price'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.antecedentes_no_patologicos_Smoking = exports.$Enums.antecedentes_no_patologicos_Smoking = {
  Si: 'Si',
  No: 'No'
};

exports.antecedentes_no_patologicos_SubstanceAbuse = exports.$Enums.antecedentes_no_patologicos_SubstanceAbuse = {
  Si: 'Si',
  No: 'No'
};

exports.antecedentes_no_patologicos_Alcoholism = exports.$Enums.antecedentes_no_patologicos_Alcoholism = {
  Si: 'Si',
  No: 'No'
};

exports.antecedentes_no_patologicos_Sedentary = exports.$Enums.antecedentes_no_patologicos_Sedentary = {
  Si: 'Si',
  No: 'No'
};

exports.antecedentes_patologicos_DiseaseType = exports.$Enums.antecedentes_patologicos_DiseaseType = {
  Cardiovasculares: 'Cardiovasculares',
  Hematol_gicas: 'Hematol_gicas',
  Neurol_gicas: 'Neurol_gicas',
  Pulmonares: 'Pulmonares',
  Endocrinas: 'Endocrinas',
  Metab_licas: 'Metab_licas',
  Renales: 'Renales',
  Mentales: 'Mentales',
  Gastrointestinales: 'Gastrointestinales',
  Dermatol_gicas: 'Dermatol_gicas',
  C_ncer: 'C_ncer',
  Otros: 'Otros',
  ENFERMEDADES_DE_LA_INFANCIA: 'ENFERMEDADES_DE_LA_INFANCIA'
};

exports.antecedentes_patologicos_Chronic = exports.$Enums.antecedentes_patologicos_Chronic = {
  Si: 'Si',
  No: 'No'
};

exports.doctor_Gender = exports.$Enums.doctor_Gender = {
  Masculino: 'Masculino',
  Femenino: 'Femenino',
  Otro: 'Otro'
};

exports.empleado_Gender = exports.$Enums.empleado_Gender = {
  Masculino: 'Masculino',
  Femenino: 'Femenino',
  Otro: 'Otro'
};

exports.enfermedades_DiseaseType = exports.$Enums.enfermedades_DiseaseType = {
  Cardiovasculares: 'Cardiovasculares',
  Hematol_gicas: 'Hematol_gicas',
  Neurol_gicas: 'Neurol_gicas',
  Pulmonares: 'Pulmonares',
  Endocrinas: 'Endocrinas',
  Metab_licas: 'Metab_licas',
  Renales: 'Renales',
  Mentales: 'Mentales',
  Gastrointestinales: 'Gastrointestinales',
  Dermatol_gicas: 'Dermatol_gicas',
  C_ncer: 'C_ncer',
  Otros: 'Otros',
  ENFERMEDADES_DE_LA_INFANCIA: 'ENFERMEDADES_DE_LA_INFANCIA'
};

exports.Prisma.ModelName = {
  antecedentes_no_patologicos: 'antecedentes_no_patologicos',
  antecedentes_patologicos: 'antecedentes_patologicos',
  bitacora: 'bitacora',
  clientes: 'clientes',
  doctor: 'doctor',
  empleado: 'empleado',
  enfermedades: 'enfermedades',
  examen_clinico_intraoral: 'examen_clinico_intraoral',
  historial_clinico: 'historial_clinico',
  permisos: 'permisos',
  usuarios: 'usuarios',
  servicios: 'servicios'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
