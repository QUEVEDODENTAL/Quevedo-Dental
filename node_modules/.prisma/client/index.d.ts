
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model antecedentes_no_patologicos
 * 
 */
export type antecedentes_no_patologicos = $Result.DefaultSelection<Prisma.$antecedentes_no_patologicosPayload>
/**
 * Model antecedentes_patologicos
 * 
 */
export type antecedentes_patologicos = $Result.DefaultSelection<Prisma.$antecedentes_patologicosPayload>
/**
 * Model bitacora
 * 
 */
export type bitacora = $Result.DefaultSelection<Prisma.$bitacoraPayload>
/**
 * Model clientes
 * 
 */
export type clientes = $Result.DefaultSelection<Prisma.$clientesPayload>
/**
 * Model doctor
 * 
 */
export type doctor = $Result.DefaultSelection<Prisma.$doctorPayload>
/**
 * Model empleado
 * 
 */
export type empleado = $Result.DefaultSelection<Prisma.$empleadoPayload>
/**
 * Model enfermedades
 * 
 */
export type enfermedades = $Result.DefaultSelection<Prisma.$enfermedadesPayload>
/**
 * Model examen_clinico_intraoral
 * 
 */
export type examen_clinico_intraoral = $Result.DefaultSelection<Prisma.$examen_clinico_intraoralPayload>
/**
 * Model historial_clinico
 * 
 */
export type historial_clinico = $Result.DefaultSelection<Prisma.$historial_clinicoPayload>
/**
 * Model permisos
 * 
 */
export type permisos = $Result.DefaultSelection<Prisma.$permisosPayload>
/**
 * Model usuarios
 * 
 */
export type usuarios = $Result.DefaultSelection<Prisma.$usuariosPayload>
/**
 * Model servicios
 * 
 */
export type servicios = $Result.DefaultSelection<Prisma.$serviciosPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const antecedentes_no_patologicos_Smoking: {
  Si: 'Si',
  No: 'No'
};

export type antecedentes_no_patologicos_Smoking = (typeof antecedentes_no_patologicos_Smoking)[keyof typeof antecedentes_no_patologicos_Smoking]


export const antecedentes_no_patologicos_SubstanceAbuse: {
  Si: 'Si',
  No: 'No'
};

export type antecedentes_no_patologicos_SubstanceAbuse = (typeof antecedentes_no_patologicos_SubstanceAbuse)[keyof typeof antecedentes_no_patologicos_SubstanceAbuse]


export const antecedentes_no_patologicos_Alcoholism: {
  Si: 'Si',
  No: 'No'
};

export type antecedentes_no_patologicos_Alcoholism = (typeof antecedentes_no_patologicos_Alcoholism)[keyof typeof antecedentes_no_patologicos_Alcoholism]


export const antecedentes_no_patologicos_Sedentary: {
  Si: 'Si',
  No: 'No'
};

export type antecedentes_no_patologicos_Sedentary = (typeof antecedentes_no_patologicos_Sedentary)[keyof typeof antecedentes_no_patologicos_Sedentary]


export const antecedentes_patologicos_DiseaseType: {
  Cardiovasculares: 'Cardiovasculares',
  Hematol_gicas: 'Hematol_gicas',
  Neurol_gicas: 'Neurol_gicas',
  Pulmonares: 'Pulmonares',
  Endocrinas: 'Endocrinas',
  Metab_licas: 'Metab_licas',
  Renales: 'Renales',
  Mentales: 'Mentales',
  Gastrointestinales: 'Gastrointestinales',
  Dermatol_gicas: 'Dermatol_gicas',
  C_ncer: 'C_ncer',
  Otros: 'Otros',
  ENFERMEDADES_DE_LA_INFANCIA: 'ENFERMEDADES_DE_LA_INFANCIA'
};

export type antecedentes_patologicos_DiseaseType = (typeof antecedentes_patologicos_DiseaseType)[keyof typeof antecedentes_patologicos_DiseaseType]


export const antecedentes_patologicos_Chronic: {
  Si: 'Si',
  No: 'No'
};

export type antecedentes_patologicos_Chronic = (typeof antecedentes_patologicos_Chronic)[keyof typeof antecedentes_patologicos_Chronic]


export const doctor_Gender: {
  Masculino: 'Masculino',
  Femenino: 'Femenino',
  Otro: 'Otro'
};

export type doctor_Gender = (typeof doctor_Gender)[keyof typeof doctor_Gender]


export const empleado_Gender: {
  Masculino: 'Masculino',
  Femenino: 'Femenino',
  Otro: 'Otro'
};

export type empleado_Gender = (typeof empleado_Gender)[keyof typeof empleado_Gender]


export const enfermedades_DiseaseType: {
  Cardiovasculares: 'Cardiovasculares',
  Hematol_gicas: 'Hematol_gicas',
  Neurol_gicas: 'Neurol_gicas',
  Pulmonares: 'Pulmonares',
  Endocrinas: 'Endocrinas',
  Metab_licas: 'Metab_licas',
  Renales: 'Renales',
  Mentales: 'Mentales',
  Gastrointestinales: 'Gastrointestinales',
  Dermatol_gicas: 'Dermatol_gicas',
  C_ncer: 'C_ncer',
  Otros: 'Otros',
  ENFERMEDADES_DE_LA_INFANCIA: 'ENFERMEDADES_DE_LA_INFANCIA'
};

export type enfermedades_DiseaseType = (typeof enfermedades_DiseaseType)[keyof typeof enfermedades_DiseaseType]

}

export type antecedentes_no_patologicos_Smoking = $Enums.antecedentes_no_patologicos_Smoking

export const antecedentes_no_patologicos_Smoking: typeof $Enums.antecedentes_no_patologicos_Smoking

export type antecedentes_no_patologicos_SubstanceAbuse = $Enums.antecedentes_no_patologicos_SubstanceAbuse

export const antecedentes_no_patologicos_SubstanceAbuse: typeof $Enums.antecedentes_no_patologicos_SubstanceAbuse

export type antecedentes_no_patologicos_Alcoholism = $Enums.antecedentes_no_patologicos_Alcoholism

export const antecedentes_no_patologicos_Alcoholism: typeof $Enums.antecedentes_no_patologicos_Alcoholism

export type antecedentes_no_patologicos_Sedentary = $Enums.antecedentes_no_patologicos_Sedentary

export const antecedentes_no_patologicos_Sedentary: typeof $Enums.antecedentes_no_patologicos_Sedentary

export type antecedentes_patologicos_DiseaseType = $Enums.antecedentes_patologicos_DiseaseType

export const antecedentes_patologicos_DiseaseType: typeof $Enums.antecedentes_patologicos_DiseaseType

export type antecedentes_patologicos_Chronic = $Enums.antecedentes_patologicos_Chronic

export const antecedentes_patologicos_Chronic: typeof $Enums.antecedentes_patologicos_Chronic

export type doctor_Gender = $Enums.doctor_Gender

export const doctor_Gender: typeof $Enums.doctor_Gender

export type empleado_Gender = $Enums.empleado_Gender

export const empleado_Gender: typeof $Enums.empleado_Gender

export type enfermedades_DiseaseType = $Enums.enfermedades_DiseaseType

export const enfermedades_DiseaseType: typeof $Enums.enfermedades_DiseaseType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Antecedentes_no_patologicos
 * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Antecedentes_no_patologicos
   * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.antecedentes_no_patologicos`: Exposes CRUD operations for the **antecedentes_no_patologicos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Antecedentes_no_patologicos
    * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.findMany()
    * ```
    */
  get antecedentes_no_patologicos(): Prisma.antecedentes_no_patologicosDelegate<ExtArgs>;

  /**
   * `prisma.antecedentes_patologicos`: Exposes CRUD operations for the **antecedentes_patologicos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Antecedentes_patologicos
    * const antecedentes_patologicos = await prisma.antecedentes_patologicos.findMany()
    * ```
    */
  get antecedentes_patologicos(): Prisma.antecedentes_patologicosDelegate<ExtArgs>;

  /**
   * `prisma.bitacora`: Exposes CRUD operations for the **bitacora** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bitacoras
    * const bitacoras = await prisma.bitacora.findMany()
    * ```
    */
  get bitacora(): Prisma.bitacoraDelegate<ExtArgs>;

  /**
   * `prisma.clientes`: Exposes CRUD operations for the **clientes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.clientes.findMany()
    * ```
    */
  get clientes(): Prisma.clientesDelegate<ExtArgs>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.doctorDelegate<ExtArgs>;

  /**
   * `prisma.empleado`: Exposes CRUD operations for the **empleado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Empleados
    * const empleados = await prisma.empleado.findMany()
    * ```
    */
  get empleado(): Prisma.empleadoDelegate<ExtArgs>;

  /**
   * `prisma.enfermedades`: Exposes CRUD operations for the **enfermedades** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enfermedades
    * const enfermedades = await prisma.enfermedades.findMany()
    * ```
    */
  get enfermedades(): Prisma.enfermedadesDelegate<ExtArgs>;

  /**
   * `prisma.examen_clinico_intraoral`: Exposes CRUD operations for the **examen_clinico_intraoral** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Examen_clinico_intraorals
    * const examen_clinico_intraorals = await prisma.examen_clinico_intraoral.findMany()
    * ```
    */
  get examen_clinico_intraoral(): Prisma.examen_clinico_intraoralDelegate<ExtArgs>;

  /**
   * `prisma.historial_clinico`: Exposes CRUD operations for the **historial_clinico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Historial_clinicos
    * const historial_clinicos = await prisma.historial_clinico.findMany()
    * ```
    */
  get historial_clinico(): Prisma.historial_clinicoDelegate<ExtArgs>;

  /**
   * `prisma.permisos`: Exposes CRUD operations for the **permisos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permisos
    * const permisos = await prisma.permisos.findMany()
    * ```
    */
  get permisos(): Prisma.permisosDelegate<ExtArgs>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<ExtArgs>;

  /**
   * `prisma.servicios`: Exposes CRUD operations for the **servicios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servicios
    * const servicios = await prisma.servicios.findMany()
    * ```
    */
  get servicios(): Prisma.serviciosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.0
   * Query Engine version: 08713a93b99d58f31485621c634b04983ae01d95
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    antecedentes_no_patologicos: 'antecedentes_no_patologicos',
    antecedentes_patologicos: 'antecedentes_patologicos',
    bitacora: 'bitacora',
    clientes: 'clientes',
    doctor: 'doctor',
    empleado: 'empleado',
    enfermedades: 'enfermedades',
    examen_clinico_intraoral: 'examen_clinico_intraoral',
    historial_clinico: 'historial_clinico',
    permisos: 'permisos',
    usuarios: 'usuarios',
    servicios: 'servicios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "antecedentes_no_patologicos" | "antecedentes_patologicos" | "bitacora" | "clientes" | "doctor" | "empleado" | "enfermedades" | "examen_clinico_intraoral" | "historial_clinico" | "permisos" | "usuarios" | "servicios"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      antecedentes_no_patologicos: {
        payload: Prisma.$antecedentes_no_patologicosPayload<ExtArgs>
        fields: Prisma.antecedentes_no_patologicosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.antecedentes_no_patologicosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_no_patologicosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.antecedentes_no_patologicosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_no_patologicosPayload>
          }
          findFirst: {
            args: Prisma.antecedentes_no_patologicosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_no_patologicosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.antecedentes_no_patologicosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_no_patologicosPayload>
          }
          findMany: {
            args: Prisma.antecedentes_no_patologicosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_no_patologicosPayload>[]
          }
          create: {
            args: Prisma.antecedentes_no_patologicosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_no_patologicosPayload>
          }
          createMany: {
            args: Prisma.antecedentes_no_patologicosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.antecedentes_no_patologicosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_no_patologicosPayload>
          }
          update: {
            args: Prisma.antecedentes_no_patologicosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_no_patologicosPayload>
          }
          deleteMany: {
            args: Prisma.antecedentes_no_patologicosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.antecedentes_no_patologicosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.antecedentes_no_patologicosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_no_patologicosPayload>
          }
          aggregate: {
            args: Prisma.Antecedentes_no_patologicosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAntecedentes_no_patologicos>
          }
          groupBy: {
            args: Prisma.antecedentes_no_patologicosGroupByArgs<ExtArgs>
            result: $Utils.Optional<Antecedentes_no_patologicosGroupByOutputType>[]
          }
          count: {
            args: Prisma.antecedentes_no_patologicosCountArgs<ExtArgs>
            result: $Utils.Optional<Antecedentes_no_patologicosCountAggregateOutputType> | number
          }
        }
      }
      antecedentes_patologicos: {
        payload: Prisma.$antecedentes_patologicosPayload<ExtArgs>
        fields: Prisma.antecedentes_patologicosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.antecedentes_patologicosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_patologicosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.antecedentes_patologicosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_patologicosPayload>
          }
          findFirst: {
            args: Prisma.antecedentes_patologicosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_patologicosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.antecedentes_patologicosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_patologicosPayload>
          }
          findMany: {
            args: Prisma.antecedentes_patologicosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_patologicosPayload>[]
          }
          create: {
            args: Prisma.antecedentes_patologicosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_patologicosPayload>
          }
          createMany: {
            args: Prisma.antecedentes_patologicosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.antecedentes_patologicosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_patologicosPayload>
          }
          update: {
            args: Prisma.antecedentes_patologicosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_patologicosPayload>
          }
          deleteMany: {
            args: Prisma.antecedentes_patologicosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.antecedentes_patologicosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.antecedentes_patologicosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$antecedentes_patologicosPayload>
          }
          aggregate: {
            args: Prisma.Antecedentes_patologicosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAntecedentes_patologicos>
          }
          groupBy: {
            args: Prisma.antecedentes_patologicosGroupByArgs<ExtArgs>
            result: $Utils.Optional<Antecedentes_patologicosGroupByOutputType>[]
          }
          count: {
            args: Prisma.antecedentes_patologicosCountArgs<ExtArgs>
            result: $Utils.Optional<Antecedentes_patologicosCountAggregateOutputType> | number
          }
        }
      }
      bitacora: {
        payload: Prisma.$bitacoraPayload<ExtArgs>
        fields: Prisma.bitacoraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bitacoraFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bitacoraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bitacoraFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bitacoraPayload>
          }
          findFirst: {
            args: Prisma.bitacoraFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bitacoraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bitacoraFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bitacoraPayload>
          }
          findMany: {
            args: Prisma.bitacoraFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bitacoraPayload>[]
          }
          create: {
            args: Prisma.bitacoraCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bitacoraPayload>
          }
          createMany: {
            args: Prisma.bitacoraCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.bitacoraDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bitacoraPayload>
          }
          update: {
            args: Prisma.bitacoraUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bitacoraPayload>
          }
          deleteMany: {
            args: Prisma.bitacoraDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.bitacoraUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.bitacoraUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bitacoraPayload>
          }
          aggregate: {
            args: Prisma.BitacoraAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBitacora>
          }
          groupBy: {
            args: Prisma.bitacoraGroupByArgs<ExtArgs>
            result: $Utils.Optional<BitacoraGroupByOutputType>[]
          }
          count: {
            args: Prisma.bitacoraCountArgs<ExtArgs>
            result: $Utils.Optional<BitacoraCountAggregateOutputType> | number
          }
        }
      }
      clientes: {
        payload: Prisma.$clientesPayload<ExtArgs>
        fields: Prisma.clientesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clientesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          findFirst: {
            args: Prisma.clientesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          findMany: {
            args: Prisma.clientesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>[]
          }
          create: {
            args: Prisma.clientesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          createMany: {
            args: Prisma.clientesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.clientesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          update: {
            args: Prisma.clientesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          deleteMany: {
            args: Prisma.clientesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.clientesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.clientesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          aggregate: {
            args: Prisma.ClientesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClientes>
          }
          groupBy: {
            args: Prisma.clientesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientesGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientesCountArgs<ExtArgs>
            result: $Utils.Optional<ClientesCountAggregateOutputType> | number
          }
        }
      }
      doctor: {
        payload: Prisma.$doctorPayload<ExtArgs>
        fields: Prisma.doctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.doctorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.doctorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          findFirst: {
            args: Prisma.doctorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.doctorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          findMany: {
            args: Prisma.doctorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>[]
          }
          create: {
            args: Prisma.doctorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          createMany: {
            args: Prisma.doctorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.doctorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          update: {
            args: Prisma.doctorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          deleteMany: {
            args: Prisma.doctorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.doctorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.doctorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          aggregate: {
            args: Prisma.DoctorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctor>
          }
          groupBy: {
            args: Prisma.doctorGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.doctorCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorCountAggregateOutputType> | number
          }
        }
      }
      empleado: {
        payload: Prisma.$empleadoPayload<ExtArgs>
        fields: Prisma.empleadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.empleadoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$empleadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.empleadoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$empleadoPayload>
          }
          findFirst: {
            args: Prisma.empleadoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$empleadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.empleadoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$empleadoPayload>
          }
          findMany: {
            args: Prisma.empleadoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$empleadoPayload>[]
          }
          create: {
            args: Prisma.empleadoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$empleadoPayload>
          }
          createMany: {
            args: Prisma.empleadoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.empleadoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$empleadoPayload>
          }
          update: {
            args: Prisma.empleadoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$empleadoPayload>
          }
          deleteMany: {
            args: Prisma.empleadoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.empleadoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.empleadoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$empleadoPayload>
          }
          aggregate: {
            args: Prisma.EmpleadoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmpleado>
          }
          groupBy: {
            args: Prisma.empleadoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmpleadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.empleadoCountArgs<ExtArgs>
            result: $Utils.Optional<EmpleadoCountAggregateOutputType> | number
          }
        }
      }
      enfermedades: {
        payload: Prisma.$enfermedadesPayload<ExtArgs>
        fields: Prisma.enfermedadesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.enfermedadesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$enfermedadesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.enfermedadesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$enfermedadesPayload>
          }
          findFirst: {
            args: Prisma.enfermedadesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$enfermedadesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.enfermedadesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$enfermedadesPayload>
          }
          findMany: {
            args: Prisma.enfermedadesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$enfermedadesPayload>[]
          }
          create: {
            args: Prisma.enfermedadesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$enfermedadesPayload>
          }
          createMany: {
            args: Prisma.enfermedadesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.enfermedadesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$enfermedadesPayload>
          }
          update: {
            args: Prisma.enfermedadesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$enfermedadesPayload>
          }
          deleteMany: {
            args: Prisma.enfermedadesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.enfermedadesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.enfermedadesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$enfermedadesPayload>
          }
          aggregate: {
            args: Prisma.EnfermedadesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnfermedades>
          }
          groupBy: {
            args: Prisma.enfermedadesGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnfermedadesGroupByOutputType>[]
          }
          count: {
            args: Prisma.enfermedadesCountArgs<ExtArgs>
            result: $Utils.Optional<EnfermedadesCountAggregateOutputType> | number
          }
        }
      }
      examen_clinico_intraoral: {
        payload: Prisma.$examen_clinico_intraoralPayload<ExtArgs>
        fields: Prisma.examen_clinico_intraoralFieldRefs
        operations: {
          findUnique: {
            args: Prisma.examen_clinico_intraoralFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$examen_clinico_intraoralPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.examen_clinico_intraoralFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$examen_clinico_intraoralPayload>
          }
          findFirst: {
            args: Prisma.examen_clinico_intraoralFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$examen_clinico_intraoralPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.examen_clinico_intraoralFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$examen_clinico_intraoralPayload>
          }
          findMany: {
            args: Prisma.examen_clinico_intraoralFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$examen_clinico_intraoralPayload>[]
          }
          create: {
            args: Prisma.examen_clinico_intraoralCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$examen_clinico_intraoralPayload>
          }
          createMany: {
            args: Prisma.examen_clinico_intraoralCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.examen_clinico_intraoralDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$examen_clinico_intraoralPayload>
          }
          update: {
            args: Prisma.examen_clinico_intraoralUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$examen_clinico_intraoralPayload>
          }
          deleteMany: {
            args: Prisma.examen_clinico_intraoralDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.examen_clinico_intraoralUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.examen_clinico_intraoralUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$examen_clinico_intraoralPayload>
          }
          aggregate: {
            args: Prisma.Examen_clinico_intraoralAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExamen_clinico_intraoral>
          }
          groupBy: {
            args: Prisma.examen_clinico_intraoralGroupByArgs<ExtArgs>
            result: $Utils.Optional<Examen_clinico_intraoralGroupByOutputType>[]
          }
          count: {
            args: Prisma.examen_clinico_intraoralCountArgs<ExtArgs>
            result: $Utils.Optional<Examen_clinico_intraoralCountAggregateOutputType> | number
          }
        }
      }
      historial_clinico: {
        payload: Prisma.$historial_clinicoPayload<ExtArgs>
        fields: Prisma.historial_clinicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.historial_clinicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historial_clinicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.historial_clinicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historial_clinicoPayload>
          }
          findFirst: {
            args: Prisma.historial_clinicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historial_clinicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.historial_clinicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historial_clinicoPayload>
          }
          findMany: {
            args: Prisma.historial_clinicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historial_clinicoPayload>[]
          }
          create: {
            args: Prisma.historial_clinicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historial_clinicoPayload>
          }
          createMany: {
            args: Prisma.historial_clinicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.historial_clinicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historial_clinicoPayload>
          }
          update: {
            args: Prisma.historial_clinicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historial_clinicoPayload>
          }
          deleteMany: {
            args: Prisma.historial_clinicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.historial_clinicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.historial_clinicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historial_clinicoPayload>
          }
          aggregate: {
            args: Prisma.Historial_clinicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistorial_clinico>
          }
          groupBy: {
            args: Prisma.historial_clinicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<Historial_clinicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.historial_clinicoCountArgs<ExtArgs>
            result: $Utils.Optional<Historial_clinicoCountAggregateOutputType> | number
          }
        }
      }
      permisos: {
        payload: Prisma.$permisosPayload<ExtArgs>
        fields: Prisma.permisosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.permisosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permisosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.permisosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permisosPayload>
          }
          findFirst: {
            args: Prisma.permisosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permisosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.permisosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permisosPayload>
          }
          findMany: {
            args: Prisma.permisosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permisosPayload>[]
          }
          create: {
            args: Prisma.permisosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permisosPayload>
          }
          createMany: {
            args: Prisma.permisosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.permisosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permisosPayload>
          }
          update: {
            args: Prisma.permisosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permisosPayload>
          }
          deleteMany: {
            args: Prisma.permisosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.permisosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.permisosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permisosPayload>
          }
          aggregate: {
            args: Prisma.PermisosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermisos>
          }
          groupBy: {
            args: Prisma.permisosGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermisosGroupByOutputType>[]
          }
          count: {
            args: Prisma.permisosCountArgs<ExtArgs>
            result: $Utils.Optional<PermisosCountAggregateOutputType> | number
          }
        }
      }
      usuarios: {
        payload: Prisma.$usuariosPayload<ExtArgs>
        fields: Prisma.usuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findFirst: {
            args: Prisma.usuariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findMany: {
            args: Prisma.usuariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          create: {
            args: Prisma.usuariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          createMany: {
            args: Prisma.usuariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usuariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          update: {
            args: Prisma.usuariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          deleteMany: {
            args: Prisma.usuariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usuariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usuariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.usuariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuariosCountArgs<ExtArgs>
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
      servicios: {
        payload: Prisma.$serviciosPayload<ExtArgs>
        fields: Prisma.serviciosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.serviciosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviciosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.serviciosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviciosPayload>
          }
          findFirst: {
            args: Prisma.serviciosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviciosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.serviciosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviciosPayload>
          }
          findMany: {
            args: Prisma.serviciosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviciosPayload>[]
          }
          create: {
            args: Prisma.serviciosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviciosPayload>
          }
          createMany: {
            args: Prisma.serviciosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.serviciosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviciosPayload>
          }
          update: {
            args: Prisma.serviciosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviciosPayload>
          }
          deleteMany: {
            args: Prisma.serviciosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.serviciosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.serviciosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$serviciosPayload>
          }
          aggregate: {
            args: Prisma.ServiciosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServicios>
          }
          groupBy: {
            args: Prisma.serviciosGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiciosGroupByOutputType>[]
          }
          count: {
            args: Prisma.serviciosCountArgs<ExtArgs>
            result: $Utils.Optional<ServiciosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model antecedentes_no_patologicos
   */

  export type AggregateAntecedentes_no_patologicos = {
    _count: Antecedentes_no_patologicosCountAggregateOutputType | null
    _avg: Antecedentes_no_patologicosAvgAggregateOutputType | null
    _sum: Antecedentes_no_patologicosSumAggregateOutputType | null
    _min: Antecedentes_no_patologicosMinAggregateOutputType | null
    _max: Antecedentes_no_patologicosMaxAggregateOutputType | null
  }

  export type Antecedentes_no_patologicosAvgAggregateOutputType = {
    PatientId: number | null
  }

  export type Antecedentes_no_patologicosSumAggregateOutputType = {
    PatientId: number | null
  }

  export type Antecedentes_no_patologicosMinAggregateOutputType = {
    PatientId: number | null
    Smoking: $Enums.antecedentes_no_patologicos_Smoking | null
    SubstanceAbuse: $Enums.antecedentes_no_patologicos_SubstanceAbuse | null
    Alcoholism: $Enums.antecedentes_no_patologicos_Alcoholism | null
    Sedentary: $Enums.antecedentes_no_patologicos_Sedentary | null
    Surgeries: string | null
    Exercise: string | null
  }

  export type Antecedentes_no_patologicosMaxAggregateOutputType = {
    PatientId: number | null
    Smoking: $Enums.antecedentes_no_patologicos_Smoking | null
    SubstanceAbuse: $Enums.antecedentes_no_patologicos_SubstanceAbuse | null
    Alcoholism: $Enums.antecedentes_no_patologicos_Alcoholism | null
    Sedentary: $Enums.antecedentes_no_patologicos_Sedentary | null
    Surgeries: string | null
    Exercise: string | null
  }

  export type Antecedentes_no_patologicosCountAggregateOutputType = {
    PatientId: number
    Smoking: number
    SubstanceAbuse: number
    Alcoholism: number
    Sedentary: number
    Surgeries: number
    Exercise: number
    _all: number
  }


  export type Antecedentes_no_patologicosAvgAggregateInputType = {
    PatientId?: true
  }

  export type Antecedentes_no_patologicosSumAggregateInputType = {
    PatientId?: true
  }

  export type Antecedentes_no_patologicosMinAggregateInputType = {
    PatientId?: true
    Smoking?: true
    SubstanceAbuse?: true
    Alcoholism?: true
    Sedentary?: true
    Surgeries?: true
    Exercise?: true
  }

  export type Antecedentes_no_patologicosMaxAggregateInputType = {
    PatientId?: true
    Smoking?: true
    SubstanceAbuse?: true
    Alcoholism?: true
    Sedentary?: true
    Surgeries?: true
    Exercise?: true
  }

  export type Antecedentes_no_patologicosCountAggregateInputType = {
    PatientId?: true
    Smoking?: true
    SubstanceAbuse?: true
    Alcoholism?: true
    Sedentary?: true
    Surgeries?: true
    Exercise?: true
    _all?: true
  }

  export type Antecedentes_no_patologicosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which antecedentes_no_patologicos to aggregate.
     */
    where?: antecedentes_no_patologicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of antecedentes_no_patologicos to fetch.
     */
    orderBy?: antecedentes_no_patologicosOrderByWithRelationInput | antecedentes_no_patologicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: antecedentes_no_patologicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` antecedentes_no_patologicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` antecedentes_no_patologicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned antecedentes_no_patologicos
    **/
    _count?: true | Antecedentes_no_patologicosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Antecedentes_no_patologicosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Antecedentes_no_patologicosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Antecedentes_no_patologicosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Antecedentes_no_patologicosMaxAggregateInputType
  }

  export type GetAntecedentes_no_patologicosAggregateType<T extends Antecedentes_no_patologicosAggregateArgs> = {
        [P in keyof T & keyof AggregateAntecedentes_no_patologicos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAntecedentes_no_patologicos[P]>
      : GetScalarType<T[P], AggregateAntecedentes_no_patologicos[P]>
  }




  export type antecedentes_no_patologicosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: antecedentes_no_patologicosWhereInput
    orderBy?: antecedentes_no_patologicosOrderByWithAggregationInput | antecedentes_no_patologicosOrderByWithAggregationInput[]
    by: Antecedentes_no_patologicosScalarFieldEnum[] | Antecedentes_no_patologicosScalarFieldEnum
    having?: antecedentes_no_patologicosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Antecedentes_no_patologicosCountAggregateInputType | true
    _avg?: Antecedentes_no_patologicosAvgAggregateInputType
    _sum?: Antecedentes_no_patologicosSumAggregateInputType
    _min?: Antecedentes_no_patologicosMinAggregateInputType
    _max?: Antecedentes_no_patologicosMaxAggregateInputType
  }

  export type Antecedentes_no_patologicosGroupByOutputType = {
    PatientId: number
    Smoking: $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse: $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism: $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary: $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries: string | null
    Exercise: string | null
    _count: Antecedentes_no_patologicosCountAggregateOutputType | null
    _avg: Antecedentes_no_patologicosAvgAggregateOutputType | null
    _sum: Antecedentes_no_patologicosSumAggregateOutputType | null
    _min: Antecedentes_no_patologicosMinAggregateOutputType | null
    _max: Antecedentes_no_patologicosMaxAggregateOutputType | null
  }

  type GetAntecedentes_no_patologicosGroupByPayload<T extends antecedentes_no_patologicosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Antecedentes_no_patologicosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Antecedentes_no_patologicosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Antecedentes_no_patologicosGroupByOutputType[P]>
            : GetScalarType<T[P], Antecedentes_no_patologicosGroupByOutputType[P]>
        }
      >
    >


  export type antecedentes_no_patologicosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    PatientId?: boolean
    Smoking?: boolean
    SubstanceAbuse?: boolean
    Alcoholism?: boolean
    Sedentary?: boolean
    Surgeries?: boolean
    Exercise?: boolean
  }, ExtArgs["result"]["antecedentes_no_patologicos"]>


  export type antecedentes_no_patologicosSelectScalar = {
    PatientId?: boolean
    Smoking?: boolean
    SubstanceAbuse?: boolean
    Alcoholism?: boolean
    Sedentary?: boolean
    Surgeries?: boolean
    Exercise?: boolean
  }


  export type $antecedentes_no_patologicosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "antecedentes_no_patologicos"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      PatientId: number
      Smoking: $Enums.antecedentes_no_patologicos_Smoking
      SubstanceAbuse: $Enums.antecedentes_no_patologicos_SubstanceAbuse
      Alcoholism: $Enums.antecedentes_no_patologicos_Alcoholism
      Sedentary: $Enums.antecedentes_no_patologicos_Sedentary
      Surgeries: string | null
      Exercise: string | null
    }, ExtArgs["result"]["antecedentes_no_patologicos"]>
    composites: {}
  }

  type antecedentes_no_patologicosGetPayload<S extends boolean | null | undefined | antecedentes_no_patologicosDefaultArgs> = $Result.GetResult<Prisma.$antecedentes_no_patologicosPayload, S>

  type antecedentes_no_patologicosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<antecedentes_no_patologicosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Antecedentes_no_patologicosCountAggregateInputType | true
    }

  export interface antecedentes_no_patologicosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['antecedentes_no_patologicos'], meta: { name: 'antecedentes_no_patologicos' } }
    /**
     * Find zero or one Antecedentes_no_patologicos that matches the filter.
     * @param {antecedentes_no_patologicosFindUniqueArgs} args - Arguments to find a Antecedentes_no_patologicos
     * @example
     * // Get one Antecedentes_no_patologicos
     * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends antecedentes_no_patologicosFindUniqueArgs>(args: SelectSubset<T, antecedentes_no_patologicosFindUniqueArgs<ExtArgs>>): Prisma__antecedentes_no_patologicosClient<$Result.GetResult<Prisma.$antecedentes_no_patologicosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Antecedentes_no_patologicos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {antecedentes_no_patologicosFindUniqueOrThrowArgs} args - Arguments to find a Antecedentes_no_patologicos
     * @example
     * // Get one Antecedentes_no_patologicos
     * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends antecedentes_no_patologicosFindUniqueOrThrowArgs>(args: SelectSubset<T, antecedentes_no_patologicosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__antecedentes_no_patologicosClient<$Result.GetResult<Prisma.$antecedentes_no_patologicosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Antecedentes_no_patologicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_no_patologicosFindFirstArgs} args - Arguments to find a Antecedentes_no_patologicos
     * @example
     * // Get one Antecedentes_no_patologicos
     * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends antecedentes_no_patologicosFindFirstArgs>(args?: SelectSubset<T, antecedentes_no_patologicosFindFirstArgs<ExtArgs>>): Prisma__antecedentes_no_patologicosClient<$Result.GetResult<Prisma.$antecedentes_no_patologicosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Antecedentes_no_patologicos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_no_patologicosFindFirstOrThrowArgs} args - Arguments to find a Antecedentes_no_patologicos
     * @example
     * // Get one Antecedentes_no_patologicos
     * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends antecedentes_no_patologicosFindFirstOrThrowArgs>(args?: SelectSubset<T, antecedentes_no_patologicosFindFirstOrThrowArgs<ExtArgs>>): Prisma__antecedentes_no_patologicosClient<$Result.GetResult<Prisma.$antecedentes_no_patologicosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Antecedentes_no_patologicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_no_patologicosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Antecedentes_no_patologicos
     * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.findMany()
     * 
     * // Get first 10 Antecedentes_no_patologicos
     * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.findMany({ take: 10 })
     * 
     * // Only select the `PatientId`
     * const antecedentes_no_patologicosWithPatientIdOnly = await prisma.antecedentes_no_patologicos.findMany({ select: { PatientId: true } })
     * 
     */
    findMany<T extends antecedentes_no_patologicosFindManyArgs>(args?: SelectSubset<T, antecedentes_no_patologicosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$antecedentes_no_patologicosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Antecedentes_no_patologicos.
     * @param {antecedentes_no_patologicosCreateArgs} args - Arguments to create a Antecedentes_no_patologicos.
     * @example
     * // Create one Antecedentes_no_patologicos
     * const Antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.create({
     *   data: {
     *     // ... data to create a Antecedentes_no_patologicos
     *   }
     * })
     * 
     */
    create<T extends antecedentes_no_patologicosCreateArgs>(args: SelectSubset<T, antecedentes_no_patologicosCreateArgs<ExtArgs>>): Prisma__antecedentes_no_patologicosClient<$Result.GetResult<Prisma.$antecedentes_no_patologicosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Antecedentes_no_patologicos.
     * @param {antecedentes_no_patologicosCreateManyArgs} args - Arguments to create many Antecedentes_no_patologicos.
     * @example
     * // Create many Antecedentes_no_patologicos
     * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends antecedentes_no_patologicosCreateManyArgs>(args?: SelectSubset<T, antecedentes_no_patologicosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Antecedentes_no_patologicos.
     * @param {antecedentes_no_patologicosDeleteArgs} args - Arguments to delete one Antecedentes_no_patologicos.
     * @example
     * // Delete one Antecedentes_no_patologicos
     * const Antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.delete({
     *   where: {
     *     // ... filter to delete one Antecedentes_no_patologicos
     *   }
     * })
     * 
     */
    delete<T extends antecedentes_no_patologicosDeleteArgs>(args: SelectSubset<T, antecedentes_no_patologicosDeleteArgs<ExtArgs>>): Prisma__antecedentes_no_patologicosClient<$Result.GetResult<Prisma.$antecedentes_no_patologicosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Antecedentes_no_patologicos.
     * @param {antecedentes_no_patologicosUpdateArgs} args - Arguments to update one Antecedentes_no_patologicos.
     * @example
     * // Update one Antecedentes_no_patologicos
     * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends antecedentes_no_patologicosUpdateArgs>(args: SelectSubset<T, antecedentes_no_patologicosUpdateArgs<ExtArgs>>): Prisma__antecedentes_no_patologicosClient<$Result.GetResult<Prisma.$antecedentes_no_patologicosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Antecedentes_no_patologicos.
     * @param {antecedentes_no_patologicosDeleteManyArgs} args - Arguments to filter Antecedentes_no_patologicos to delete.
     * @example
     * // Delete a few Antecedentes_no_patologicos
     * const { count } = await prisma.antecedentes_no_patologicos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends antecedentes_no_patologicosDeleteManyArgs>(args?: SelectSubset<T, antecedentes_no_patologicosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Antecedentes_no_patologicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_no_patologicosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Antecedentes_no_patologicos
     * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends antecedentes_no_patologicosUpdateManyArgs>(args: SelectSubset<T, antecedentes_no_patologicosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Antecedentes_no_patologicos.
     * @param {antecedentes_no_patologicosUpsertArgs} args - Arguments to update or create a Antecedentes_no_patologicos.
     * @example
     * // Update or create a Antecedentes_no_patologicos
     * const antecedentes_no_patologicos = await prisma.antecedentes_no_patologicos.upsert({
     *   create: {
     *     // ... data to create a Antecedentes_no_patologicos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Antecedentes_no_patologicos we want to update
     *   }
     * })
     */
    upsert<T extends antecedentes_no_patologicosUpsertArgs>(args: SelectSubset<T, antecedentes_no_patologicosUpsertArgs<ExtArgs>>): Prisma__antecedentes_no_patologicosClient<$Result.GetResult<Prisma.$antecedentes_no_patologicosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Antecedentes_no_patologicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_no_patologicosCountArgs} args - Arguments to filter Antecedentes_no_patologicos to count.
     * @example
     * // Count the number of Antecedentes_no_patologicos
     * const count = await prisma.antecedentes_no_patologicos.count({
     *   where: {
     *     // ... the filter for the Antecedentes_no_patologicos we want to count
     *   }
     * })
    **/
    count<T extends antecedentes_no_patologicosCountArgs>(
      args?: Subset<T, antecedentes_no_patologicosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Antecedentes_no_patologicosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Antecedentes_no_patologicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Antecedentes_no_patologicosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Antecedentes_no_patologicosAggregateArgs>(args: Subset<T, Antecedentes_no_patologicosAggregateArgs>): Prisma.PrismaPromise<GetAntecedentes_no_patologicosAggregateType<T>>

    /**
     * Group by Antecedentes_no_patologicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_no_patologicosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends antecedentes_no_patologicosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: antecedentes_no_patologicosGroupByArgs['orderBy'] }
        : { orderBy?: antecedentes_no_patologicosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, antecedentes_no_patologicosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAntecedentes_no_patologicosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the antecedentes_no_patologicos model
   */
  readonly fields: antecedentes_no_patologicosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for antecedentes_no_patologicos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__antecedentes_no_patologicosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the antecedentes_no_patologicos model
   */ 
  interface antecedentes_no_patologicosFieldRefs {
    readonly PatientId: FieldRef<"antecedentes_no_patologicos", 'Int'>
    readonly Smoking: FieldRef<"antecedentes_no_patologicos", 'antecedentes_no_patologicos_Smoking'>
    readonly SubstanceAbuse: FieldRef<"antecedentes_no_patologicos", 'antecedentes_no_patologicos_SubstanceAbuse'>
    readonly Alcoholism: FieldRef<"antecedentes_no_patologicos", 'antecedentes_no_patologicos_Alcoholism'>
    readonly Sedentary: FieldRef<"antecedentes_no_patologicos", 'antecedentes_no_patologicos_Sedentary'>
    readonly Surgeries: FieldRef<"antecedentes_no_patologicos", 'String'>
    readonly Exercise: FieldRef<"antecedentes_no_patologicos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * antecedentes_no_patologicos findUnique
   */
  export type antecedentes_no_patologicosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_no_patologicos
     */
    select?: antecedentes_no_patologicosSelect<ExtArgs> | null
    /**
     * Filter, which antecedentes_no_patologicos to fetch.
     */
    where: antecedentes_no_patologicosWhereUniqueInput
  }

  /**
   * antecedentes_no_patologicos findUniqueOrThrow
   */
  export type antecedentes_no_patologicosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_no_patologicos
     */
    select?: antecedentes_no_patologicosSelect<ExtArgs> | null
    /**
     * Filter, which antecedentes_no_patologicos to fetch.
     */
    where: antecedentes_no_patologicosWhereUniqueInput
  }

  /**
   * antecedentes_no_patologicos findFirst
   */
  export type antecedentes_no_patologicosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_no_patologicos
     */
    select?: antecedentes_no_patologicosSelect<ExtArgs> | null
    /**
     * Filter, which antecedentes_no_patologicos to fetch.
     */
    where?: antecedentes_no_patologicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of antecedentes_no_patologicos to fetch.
     */
    orderBy?: antecedentes_no_patologicosOrderByWithRelationInput | antecedentes_no_patologicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for antecedentes_no_patologicos.
     */
    cursor?: antecedentes_no_patologicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` antecedentes_no_patologicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` antecedentes_no_patologicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of antecedentes_no_patologicos.
     */
    distinct?: Antecedentes_no_patologicosScalarFieldEnum | Antecedentes_no_patologicosScalarFieldEnum[]
  }

  /**
   * antecedentes_no_patologicos findFirstOrThrow
   */
  export type antecedentes_no_patologicosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_no_patologicos
     */
    select?: antecedentes_no_patologicosSelect<ExtArgs> | null
    /**
     * Filter, which antecedentes_no_patologicos to fetch.
     */
    where?: antecedentes_no_patologicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of antecedentes_no_patologicos to fetch.
     */
    orderBy?: antecedentes_no_patologicosOrderByWithRelationInput | antecedentes_no_patologicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for antecedentes_no_patologicos.
     */
    cursor?: antecedentes_no_patologicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` antecedentes_no_patologicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` antecedentes_no_patologicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of antecedentes_no_patologicos.
     */
    distinct?: Antecedentes_no_patologicosScalarFieldEnum | Antecedentes_no_patologicosScalarFieldEnum[]
  }

  /**
   * antecedentes_no_patologicos findMany
   */
  export type antecedentes_no_patologicosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_no_patologicos
     */
    select?: antecedentes_no_patologicosSelect<ExtArgs> | null
    /**
     * Filter, which antecedentes_no_patologicos to fetch.
     */
    where?: antecedentes_no_patologicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of antecedentes_no_patologicos to fetch.
     */
    orderBy?: antecedentes_no_patologicosOrderByWithRelationInput | antecedentes_no_patologicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing antecedentes_no_patologicos.
     */
    cursor?: antecedentes_no_patologicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` antecedentes_no_patologicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` antecedentes_no_patologicos.
     */
    skip?: number
    distinct?: Antecedentes_no_patologicosScalarFieldEnum | Antecedentes_no_patologicosScalarFieldEnum[]
  }

  /**
   * antecedentes_no_patologicos create
   */
  export type antecedentes_no_patologicosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_no_patologicos
     */
    select?: antecedentes_no_patologicosSelect<ExtArgs> | null
    /**
     * The data needed to create a antecedentes_no_patologicos.
     */
    data: XOR<antecedentes_no_patologicosCreateInput, antecedentes_no_patologicosUncheckedCreateInput>
  }

  /**
   * antecedentes_no_patologicos createMany
   */
  export type antecedentes_no_patologicosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many antecedentes_no_patologicos.
     */
    data: antecedentes_no_patologicosCreateManyInput | antecedentes_no_patologicosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * antecedentes_no_patologicos update
   */
  export type antecedentes_no_patologicosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_no_patologicos
     */
    select?: antecedentes_no_patologicosSelect<ExtArgs> | null
    /**
     * The data needed to update a antecedentes_no_patologicos.
     */
    data: XOR<antecedentes_no_patologicosUpdateInput, antecedentes_no_patologicosUncheckedUpdateInput>
    /**
     * Choose, which antecedentes_no_patologicos to update.
     */
    where: antecedentes_no_patologicosWhereUniqueInput
  }

  /**
   * antecedentes_no_patologicos updateMany
   */
  export type antecedentes_no_patologicosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update antecedentes_no_patologicos.
     */
    data: XOR<antecedentes_no_patologicosUpdateManyMutationInput, antecedentes_no_patologicosUncheckedUpdateManyInput>
    /**
     * Filter which antecedentes_no_patologicos to update
     */
    where?: antecedentes_no_patologicosWhereInput
  }

  /**
   * antecedentes_no_patologicos upsert
   */
  export type antecedentes_no_patologicosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_no_patologicos
     */
    select?: antecedentes_no_patologicosSelect<ExtArgs> | null
    /**
     * The filter to search for the antecedentes_no_patologicos to update in case it exists.
     */
    where: antecedentes_no_patologicosWhereUniqueInput
    /**
     * In case the antecedentes_no_patologicos found by the `where` argument doesn't exist, create a new antecedentes_no_patologicos with this data.
     */
    create: XOR<antecedentes_no_patologicosCreateInput, antecedentes_no_patologicosUncheckedCreateInput>
    /**
     * In case the antecedentes_no_patologicos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<antecedentes_no_patologicosUpdateInput, antecedentes_no_patologicosUncheckedUpdateInput>
  }

  /**
   * antecedentes_no_patologicos delete
   */
  export type antecedentes_no_patologicosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_no_patologicos
     */
    select?: antecedentes_no_patologicosSelect<ExtArgs> | null
    /**
     * Filter which antecedentes_no_patologicos to delete.
     */
    where: antecedentes_no_patologicosWhereUniqueInput
  }

  /**
   * antecedentes_no_patologicos deleteMany
   */
  export type antecedentes_no_patologicosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which antecedentes_no_patologicos to delete
     */
    where?: antecedentes_no_patologicosWhereInput
  }

  /**
   * antecedentes_no_patologicos without action
   */
  export type antecedentes_no_patologicosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_no_patologicos
     */
    select?: antecedentes_no_patologicosSelect<ExtArgs> | null
  }


  /**
   * Model antecedentes_patologicos
   */

  export type AggregateAntecedentes_patologicos = {
    _count: Antecedentes_patologicosCountAggregateOutputType | null
    _avg: Antecedentes_patologicosAvgAggregateOutputType | null
    _sum: Antecedentes_patologicosSumAggregateOutputType | null
    _min: Antecedentes_patologicosMinAggregateOutputType | null
    _max: Antecedentes_patologicosMaxAggregateOutputType | null
  }

  export type Antecedentes_patologicosAvgAggregateOutputType = {
    id: number | null
    PatientId: number | null
  }

  export type Antecedentes_patologicosSumAggregateOutputType = {
    id: number | null
    PatientId: number | null
  }

  export type Antecedentes_patologicosMinAggregateOutputType = {
    id: number | null
    PatientId: number | null
    Disease: string | null
    DiagnosisDate: Date | null
    DiseaseType: $Enums.antecedentes_patologicos_DiseaseType | null
    Chronic: $Enums.antecedentes_patologicos_Chronic | null
    Treatment: string | null
    Observations: string | null
  }

  export type Antecedentes_patologicosMaxAggregateOutputType = {
    id: number | null
    PatientId: number | null
    Disease: string | null
    DiagnosisDate: Date | null
    DiseaseType: $Enums.antecedentes_patologicos_DiseaseType | null
    Chronic: $Enums.antecedentes_patologicos_Chronic | null
    Treatment: string | null
    Observations: string | null
  }

  export type Antecedentes_patologicosCountAggregateOutputType = {
    id: number
    PatientId: number
    Disease: number
    DiagnosisDate: number
    DiseaseType: number
    Chronic: number
    Treatment: number
    Observations: number
    _all: number
  }


  export type Antecedentes_patologicosAvgAggregateInputType = {
    id?: true
    PatientId?: true
  }

  export type Antecedentes_patologicosSumAggregateInputType = {
    id?: true
    PatientId?: true
  }

  export type Antecedentes_patologicosMinAggregateInputType = {
    id?: true
    PatientId?: true
    Disease?: true
    DiagnosisDate?: true
    DiseaseType?: true
    Chronic?: true
    Treatment?: true
    Observations?: true
  }

  export type Antecedentes_patologicosMaxAggregateInputType = {
    id?: true
    PatientId?: true
    Disease?: true
    DiagnosisDate?: true
    DiseaseType?: true
    Chronic?: true
    Treatment?: true
    Observations?: true
  }

  export type Antecedentes_patologicosCountAggregateInputType = {
    id?: true
    PatientId?: true
    Disease?: true
    DiagnosisDate?: true
    DiseaseType?: true
    Chronic?: true
    Treatment?: true
    Observations?: true
    _all?: true
  }

  export type Antecedentes_patologicosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which antecedentes_patologicos to aggregate.
     */
    where?: antecedentes_patologicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of antecedentes_patologicos to fetch.
     */
    orderBy?: antecedentes_patologicosOrderByWithRelationInput | antecedentes_patologicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: antecedentes_patologicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` antecedentes_patologicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` antecedentes_patologicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned antecedentes_patologicos
    **/
    _count?: true | Antecedentes_patologicosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Antecedentes_patologicosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Antecedentes_patologicosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Antecedentes_patologicosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Antecedentes_patologicosMaxAggregateInputType
  }

  export type GetAntecedentes_patologicosAggregateType<T extends Antecedentes_patologicosAggregateArgs> = {
        [P in keyof T & keyof AggregateAntecedentes_patologicos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAntecedentes_patologicos[P]>
      : GetScalarType<T[P], AggregateAntecedentes_patologicos[P]>
  }




  export type antecedentes_patologicosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: antecedentes_patologicosWhereInput
    orderBy?: antecedentes_patologicosOrderByWithAggregationInput | antecedentes_patologicosOrderByWithAggregationInput[]
    by: Antecedentes_patologicosScalarFieldEnum[] | Antecedentes_patologicosScalarFieldEnum
    having?: antecedentes_patologicosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Antecedentes_patologicosCountAggregateInputType | true
    _avg?: Antecedentes_patologicosAvgAggregateInputType
    _sum?: Antecedentes_patologicosSumAggregateInputType
    _min?: Antecedentes_patologicosMinAggregateInputType
    _max?: Antecedentes_patologicosMaxAggregateInputType
  }

  export type Antecedentes_patologicosGroupByOutputType = {
    id: number
    PatientId: number | null
    Disease: string
    DiagnosisDate: Date
    DiseaseType: $Enums.antecedentes_patologicos_DiseaseType
    Chronic: $Enums.antecedentes_patologicos_Chronic
    Treatment: string | null
    Observations: string | null
    _count: Antecedentes_patologicosCountAggregateOutputType | null
    _avg: Antecedentes_patologicosAvgAggregateOutputType | null
    _sum: Antecedentes_patologicosSumAggregateOutputType | null
    _min: Antecedentes_patologicosMinAggregateOutputType | null
    _max: Antecedentes_patologicosMaxAggregateOutputType | null
  }

  type GetAntecedentes_patologicosGroupByPayload<T extends antecedentes_patologicosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Antecedentes_patologicosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Antecedentes_patologicosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Antecedentes_patologicosGroupByOutputType[P]>
            : GetScalarType<T[P], Antecedentes_patologicosGroupByOutputType[P]>
        }
      >
    >


  export type antecedentes_patologicosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    PatientId?: boolean
    Disease?: boolean
    DiagnosisDate?: boolean
    DiseaseType?: boolean
    Chronic?: boolean
    Treatment?: boolean
    Observations?: boolean
  }, ExtArgs["result"]["antecedentes_patologicos"]>


  export type antecedentes_patologicosSelectScalar = {
    id?: boolean
    PatientId?: boolean
    Disease?: boolean
    DiagnosisDate?: boolean
    DiseaseType?: boolean
    Chronic?: boolean
    Treatment?: boolean
    Observations?: boolean
  }


  export type $antecedentes_patologicosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "antecedentes_patologicos"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      PatientId: number | null
      Disease: string
      DiagnosisDate: Date
      DiseaseType: $Enums.antecedentes_patologicos_DiseaseType
      Chronic: $Enums.antecedentes_patologicos_Chronic
      Treatment: string | null
      Observations: string | null
    }, ExtArgs["result"]["antecedentes_patologicos"]>
    composites: {}
  }

  type antecedentes_patologicosGetPayload<S extends boolean | null | undefined | antecedentes_patologicosDefaultArgs> = $Result.GetResult<Prisma.$antecedentes_patologicosPayload, S>

  type antecedentes_patologicosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<antecedentes_patologicosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Antecedentes_patologicosCountAggregateInputType | true
    }

  export interface antecedentes_patologicosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['antecedentes_patologicos'], meta: { name: 'antecedentes_patologicos' } }
    /**
     * Find zero or one Antecedentes_patologicos that matches the filter.
     * @param {antecedentes_patologicosFindUniqueArgs} args - Arguments to find a Antecedentes_patologicos
     * @example
     * // Get one Antecedentes_patologicos
     * const antecedentes_patologicos = await prisma.antecedentes_patologicos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends antecedentes_patologicosFindUniqueArgs>(args: SelectSubset<T, antecedentes_patologicosFindUniqueArgs<ExtArgs>>): Prisma__antecedentes_patologicosClient<$Result.GetResult<Prisma.$antecedentes_patologicosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Antecedentes_patologicos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {antecedentes_patologicosFindUniqueOrThrowArgs} args - Arguments to find a Antecedentes_patologicos
     * @example
     * // Get one Antecedentes_patologicos
     * const antecedentes_patologicos = await prisma.antecedentes_patologicos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends antecedentes_patologicosFindUniqueOrThrowArgs>(args: SelectSubset<T, antecedentes_patologicosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__antecedentes_patologicosClient<$Result.GetResult<Prisma.$antecedentes_patologicosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Antecedentes_patologicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_patologicosFindFirstArgs} args - Arguments to find a Antecedentes_patologicos
     * @example
     * // Get one Antecedentes_patologicos
     * const antecedentes_patologicos = await prisma.antecedentes_patologicos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends antecedentes_patologicosFindFirstArgs>(args?: SelectSubset<T, antecedentes_patologicosFindFirstArgs<ExtArgs>>): Prisma__antecedentes_patologicosClient<$Result.GetResult<Prisma.$antecedentes_patologicosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Antecedentes_patologicos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_patologicosFindFirstOrThrowArgs} args - Arguments to find a Antecedentes_patologicos
     * @example
     * // Get one Antecedentes_patologicos
     * const antecedentes_patologicos = await prisma.antecedentes_patologicos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends antecedentes_patologicosFindFirstOrThrowArgs>(args?: SelectSubset<T, antecedentes_patologicosFindFirstOrThrowArgs<ExtArgs>>): Prisma__antecedentes_patologicosClient<$Result.GetResult<Prisma.$antecedentes_patologicosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Antecedentes_patologicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_patologicosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Antecedentes_patologicos
     * const antecedentes_patologicos = await prisma.antecedentes_patologicos.findMany()
     * 
     * // Get first 10 Antecedentes_patologicos
     * const antecedentes_patologicos = await prisma.antecedentes_patologicos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const antecedentes_patologicosWithIdOnly = await prisma.antecedentes_patologicos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends antecedentes_patologicosFindManyArgs>(args?: SelectSubset<T, antecedentes_patologicosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$antecedentes_patologicosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Antecedentes_patologicos.
     * @param {antecedentes_patologicosCreateArgs} args - Arguments to create a Antecedentes_patologicos.
     * @example
     * // Create one Antecedentes_patologicos
     * const Antecedentes_patologicos = await prisma.antecedentes_patologicos.create({
     *   data: {
     *     // ... data to create a Antecedentes_patologicos
     *   }
     * })
     * 
     */
    create<T extends antecedentes_patologicosCreateArgs>(args: SelectSubset<T, antecedentes_patologicosCreateArgs<ExtArgs>>): Prisma__antecedentes_patologicosClient<$Result.GetResult<Prisma.$antecedentes_patologicosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Antecedentes_patologicos.
     * @param {antecedentes_patologicosCreateManyArgs} args - Arguments to create many Antecedentes_patologicos.
     * @example
     * // Create many Antecedentes_patologicos
     * const antecedentes_patologicos = await prisma.antecedentes_patologicos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends antecedentes_patologicosCreateManyArgs>(args?: SelectSubset<T, antecedentes_patologicosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Antecedentes_patologicos.
     * @param {antecedentes_patologicosDeleteArgs} args - Arguments to delete one Antecedentes_patologicos.
     * @example
     * // Delete one Antecedentes_patologicos
     * const Antecedentes_patologicos = await prisma.antecedentes_patologicos.delete({
     *   where: {
     *     // ... filter to delete one Antecedentes_patologicos
     *   }
     * })
     * 
     */
    delete<T extends antecedentes_patologicosDeleteArgs>(args: SelectSubset<T, antecedentes_patologicosDeleteArgs<ExtArgs>>): Prisma__antecedentes_patologicosClient<$Result.GetResult<Prisma.$antecedentes_patologicosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Antecedentes_patologicos.
     * @param {antecedentes_patologicosUpdateArgs} args - Arguments to update one Antecedentes_patologicos.
     * @example
     * // Update one Antecedentes_patologicos
     * const antecedentes_patologicos = await prisma.antecedentes_patologicos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends antecedentes_patologicosUpdateArgs>(args: SelectSubset<T, antecedentes_patologicosUpdateArgs<ExtArgs>>): Prisma__antecedentes_patologicosClient<$Result.GetResult<Prisma.$antecedentes_patologicosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Antecedentes_patologicos.
     * @param {antecedentes_patologicosDeleteManyArgs} args - Arguments to filter Antecedentes_patologicos to delete.
     * @example
     * // Delete a few Antecedentes_patologicos
     * const { count } = await prisma.antecedentes_patologicos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends antecedentes_patologicosDeleteManyArgs>(args?: SelectSubset<T, antecedentes_patologicosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Antecedentes_patologicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_patologicosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Antecedentes_patologicos
     * const antecedentes_patologicos = await prisma.antecedentes_patologicos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends antecedentes_patologicosUpdateManyArgs>(args: SelectSubset<T, antecedentes_patologicosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Antecedentes_patologicos.
     * @param {antecedentes_patologicosUpsertArgs} args - Arguments to update or create a Antecedentes_patologicos.
     * @example
     * // Update or create a Antecedentes_patologicos
     * const antecedentes_patologicos = await prisma.antecedentes_patologicos.upsert({
     *   create: {
     *     // ... data to create a Antecedentes_patologicos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Antecedentes_patologicos we want to update
     *   }
     * })
     */
    upsert<T extends antecedentes_patologicosUpsertArgs>(args: SelectSubset<T, antecedentes_patologicosUpsertArgs<ExtArgs>>): Prisma__antecedentes_patologicosClient<$Result.GetResult<Prisma.$antecedentes_patologicosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Antecedentes_patologicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_patologicosCountArgs} args - Arguments to filter Antecedentes_patologicos to count.
     * @example
     * // Count the number of Antecedentes_patologicos
     * const count = await prisma.antecedentes_patologicos.count({
     *   where: {
     *     // ... the filter for the Antecedentes_patologicos we want to count
     *   }
     * })
    **/
    count<T extends antecedentes_patologicosCountArgs>(
      args?: Subset<T, antecedentes_patologicosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Antecedentes_patologicosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Antecedentes_patologicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Antecedentes_patologicosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Antecedentes_patologicosAggregateArgs>(args: Subset<T, Antecedentes_patologicosAggregateArgs>): Prisma.PrismaPromise<GetAntecedentes_patologicosAggregateType<T>>

    /**
     * Group by Antecedentes_patologicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {antecedentes_patologicosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends antecedentes_patologicosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: antecedentes_patologicosGroupByArgs['orderBy'] }
        : { orderBy?: antecedentes_patologicosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, antecedentes_patologicosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAntecedentes_patologicosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the antecedentes_patologicos model
   */
  readonly fields: antecedentes_patologicosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for antecedentes_patologicos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__antecedentes_patologicosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the antecedentes_patologicos model
   */ 
  interface antecedentes_patologicosFieldRefs {
    readonly id: FieldRef<"antecedentes_patologicos", 'Int'>
    readonly PatientId: FieldRef<"antecedentes_patologicos", 'Int'>
    readonly Disease: FieldRef<"antecedentes_patologicos", 'String'>
    readonly DiagnosisDate: FieldRef<"antecedentes_patologicos", 'DateTime'>
    readonly DiseaseType: FieldRef<"antecedentes_patologicos", 'antecedentes_patologicos_DiseaseType'>
    readonly Chronic: FieldRef<"antecedentes_patologicos", 'antecedentes_patologicos_Chronic'>
    readonly Treatment: FieldRef<"antecedentes_patologicos", 'String'>
    readonly Observations: FieldRef<"antecedentes_patologicos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * antecedentes_patologicos findUnique
   */
  export type antecedentes_patologicosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_patologicos
     */
    select?: antecedentes_patologicosSelect<ExtArgs> | null
    /**
     * Filter, which antecedentes_patologicos to fetch.
     */
    where: antecedentes_patologicosWhereUniqueInput
  }

  /**
   * antecedentes_patologicos findUniqueOrThrow
   */
  export type antecedentes_patologicosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_patologicos
     */
    select?: antecedentes_patologicosSelect<ExtArgs> | null
    /**
     * Filter, which antecedentes_patologicos to fetch.
     */
    where: antecedentes_patologicosWhereUniqueInput
  }

  /**
   * antecedentes_patologicos findFirst
   */
  export type antecedentes_patologicosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_patologicos
     */
    select?: antecedentes_patologicosSelect<ExtArgs> | null
    /**
     * Filter, which antecedentes_patologicos to fetch.
     */
    where?: antecedentes_patologicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of antecedentes_patologicos to fetch.
     */
    orderBy?: antecedentes_patologicosOrderByWithRelationInput | antecedentes_patologicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for antecedentes_patologicos.
     */
    cursor?: antecedentes_patologicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` antecedentes_patologicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` antecedentes_patologicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of antecedentes_patologicos.
     */
    distinct?: Antecedentes_patologicosScalarFieldEnum | Antecedentes_patologicosScalarFieldEnum[]
  }

  /**
   * antecedentes_patologicos findFirstOrThrow
   */
  export type antecedentes_patologicosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_patologicos
     */
    select?: antecedentes_patologicosSelect<ExtArgs> | null
    /**
     * Filter, which antecedentes_patologicos to fetch.
     */
    where?: antecedentes_patologicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of antecedentes_patologicos to fetch.
     */
    orderBy?: antecedentes_patologicosOrderByWithRelationInput | antecedentes_patologicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for antecedentes_patologicos.
     */
    cursor?: antecedentes_patologicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` antecedentes_patologicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` antecedentes_patologicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of antecedentes_patologicos.
     */
    distinct?: Antecedentes_patologicosScalarFieldEnum | Antecedentes_patologicosScalarFieldEnum[]
  }

  /**
   * antecedentes_patologicos findMany
   */
  export type antecedentes_patologicosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_patologicos
     */
    select?: antecedentes_patologicosSelect<ExtArgs> | null
    /**
     * Filter, which antecedentes_patologicos to fetch.
     */
    where?: antecedentes_patologicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of antecedentes_patologicos to fetch.
     */
    orderBy?: antecedentes_patologicosOrderByWithRelationInput | antecedentes_patologicosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing antecedentes_patologicos.
     */
    cursor?: antecedentes_patologicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` antecedentes_patologicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` antecedentes_patologicos.
     */
    skip?: number
    distinct?: Antecedentes_patologicosScalarFieldEnum | Antecedentes_patologicosScalarFieldEnum[]
  }

  /**
   * antecedentes_patologicos create
   */
  export type antecedentes_patologicosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_patologicos
     */
    select?: antecedentes_patologicosSelect<ExtArgs> | null
    /**
     * The data needed to create a antecedentes_patologicos.
     */
    data: XOR<antecedentes_patologicosCreateInput, antecedentes_patologicosUncheckedCreateInput>
  }

  /**
   * antecedentes_patologicos createMany
   */
  export type antecedentes_patologicosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many antecedentes_patologicos.
     */
    data: antecedentes_patologicosCreateManyInput | antecedentes_patologicosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * antecedentes_patologicos update
   */
  export type antecedentes_patologicosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_patologicos
     */
    select?: antecedentes_patologicosSelect<ExtArgs> | null
    /**
     * The data needed to update a antecedentes_patologicos.
     */
    data: XOR<antecedentes_patologicosUpdateInput, antecedentes_patologicosUncheckedUpdateInput>
    /**
     * Choose, which antecedentes_patologicos to update.
     */
    where: antecedentes_patologicosWhereUniqueInput
  }

  /**
   * antecedentes_patologicos updateMany
   */
  export type antecedentes_patologicosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update antecedentes_patologicos.
     */
    data: XOR<antecedentes_patologicosUpdateManyMutationInput, antecedentes_patologicosUncheckedUpdateManyInput>
    /**
     * Filter which antecedentes_patologicos to update
     */
    where?: antecedentes_patologicosWhereInput
  }

  /**
   * antecedentes_patologicos upsert
   */
  export type antecedentes_patologicosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_patologicos
     */
    select?: antecedentes_patologicosSelect<ExtArgs> | null
    /**
     * The filter to search for the antecedentes_patologicos to update in case it exists.
     */
    where: antecedentes_patologicosWhereUniqueInput
    /**
     * In case the antecedentes_patologicos found by the `where` argument doesn't exist, create a new antecedentes_patologicos with this data.
     */
    create: XOR<antecedentes_patologicosCreateInput, antecedentes_patologicosUncheckedCreateInput>
    /**
     * In case the antecedentes_patologicos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<antecedentes_patologicosUpdateInput, antecedentes_patologicosUncheckedUpdateInput>
  }

  /**
   * antecedentes_patologicos delete
   */
  export type antecedentes_patologicosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_patologicos
     */
    select?: antecedentes_patologicosSelect<ExtArgs> | null
    /**
     * Filter which antecedentes_patologicos to delete.
     */
    where: antecedentes_patologicosWhereUniqueInput
  }

  /**
   * antecedentes_patologicos deleteMany
   */
  export type antecedentes_patologicosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which antecedentes_patologicos to delete
     */
    where?: antecedentes_patologicosWhereInput
  }

  /**
   * antecedentes_patologicos without action
   */
  export type antecedentes_patologicosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the antecedentes_patologicos
     */
    select?: antecedentes_patologicosSelect<ExtArgs> | null
  }


  /**
   * Model bitacora
   */

  export type AggregateBitacora = {
    _count: BitacoraCountAggregateOutputType | null
    _avg: BitacoraAvgAggregateOutputType | null
    _sum: BitacoraSumAggregateOutputType | null
    _min: BitacoraMinAggregateOutputType | null
    _max: BitacoraMaxAggregateOutputType | null
  }

  export type BitacoraAvgAggregateOutputType = {
    LogId: number | null
    RecordId: number | null
  }

  export type BitacoraSumAggregateOutputType = {
    LogId: number | null
    RecordId: number | null
  }

  export type BitacoraMinAggregateOutputType = {
    LogId: number | null
    DateTime: Date | null
    User: string | null
    Action: string | null
    Tabla: string | null
    RecordId: number | null
    Description: string | null
  }

  export type BitacoraMaxAggregateOutputType = {
    LogId: number | null
    DateTime: Date | null
    User: string | null
    Action: string | null
    Tabla: string | null
    RecordId: number | null
    Description: string | null
  }

  export type BitacoraCountAggregateOutputType = {
    LogId: number
    DateTime: number
    User: number
    Action: number
    Tabla: number
    RecordId: number
    Description: number
    _all: number
  }


  export type BitacoraAvgAggregateInputType = {
    LogId?: true
    RecordId?: true
  }

  export type BitacoraSumAggregateInputType = {
    LogId?: true
    RecordId?: true
  }

  export type BitacoraMinAggregateInputType = {
    LogId?: true
    DateTime?: true
    User?: true
    Action?: true
    Tabla?: true
    RecordId?: true
    Description?: true
  }

  export type BitacoraMaxAggregateInputType = {
    LogId?: true
    DateTime?: true
    User?: true
    Action?: true
    Tabla?: true
    RecordId?: true
    Description?: true
  }

  export type BitacoraCountAggregateInputType = {
    LogId?: true
    DateTime?: true
    User?: true
    Action?: true
    Tabla?: true
    RecordId?: true
    Description?: true
    _all?: true
  }

  export type BitacoraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bitacora to aggregate.
     */
    where?: bitacoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bitacoras to fetch.
     */
    orderBy?: bitacoraOrderByWithRelationInput | bitacoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bitacoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bitacoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bitacoras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bitacoras
    **/
    _count?: true | BitacoraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BitacoraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BitacoraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BitacoraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BitacoraMaxAggregateInputType
  }

  export type GetBitacoraAggregateType<T extends BitacoraAggregateArgs> = {
        [P in keyof T & keyof AggregateBitacora]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBitacora[P]>
      : GetScalarType<T[P], AggregateBitacora[P]>
  }




  export type bitacoraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bitacoraWhereInput
    orderBy?: bitacoraOrderByWithAggregationInput | bitacoraOrderByWithAggregationInput[]
    by: BitacoraScalarFieldEnum[] | BitacoraScalarFieldEnum
    having?: bitacoraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BitacoraCountAggregateInputType | true
    _avg?: BitacoraAvgAggregateInputType
    _sum?: BitacoraSumAggregateInputType
    _min?: BitacoraMinAggregateInputType
    _max?: BitacoraMaxAggregateInputType
  }

  export type BitacoraGroupByOutputType = {
    LogId: number
    DateTime: Date
    User: string
    Action: string
    Tabla: string | null
    RecordId: number | null
    Description: string | null
    _count: BitacoraCountAggregateOutputType | null
    _avg: BitacoraAvgAggregateOutputType | null
    _sum: BitacoraSumAggregateOutputType | null
    _min: BitacoraMinAggregateOutputType | null
    _max: BitacoraMaxAggregateOutputType | null
  }

  type GetBitacoraGroupByPayload<T extends bitacoraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BitacoraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BitacoraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BitacoraGroupByOutputType[P]>
            : GetScalarType<T[P], BitacoraGroupByOutputType[P]>
        }
      >
    >


  export type bitacoraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    LogId?: boolean
    DateTime?: boolean
    User?: boolean
    Action?: boolean
    Tabla?: boolean
    RecordId?: boolean
    Description?: boolean
  }, ExtArgs["result"]["bitacora"]>


  export type bitacoraSelectScalar = {
    LogId?: boolean
    DateTime?: boolean
    User?: boolean
    Action?: boolean
    Tabla?: boolean
    RecordId?: boolean
    Description?: boolean
  }


  export type $bitacoraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "bitacora"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      LogId: number
      DateTime: Date
      User: string
      Action: string
      Tabla: string | null
      RecordId: number | null
      Description: string | null
    }, ExtArgs["result"]["bitacora"]>
    composites: {}
  }

  type bitacoraGetPayload<S extends boolean | null | undefined | bitacoraDefaultArgs> = $Result.GetResult<Prisma.$bitacoraPayload, S>

  type bitacoraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<bitacoraFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BitacoraCountAggregateInputType | true
    }

  export interface bitacoraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bitacora'], meta: { name: 'bitacora' } }
    /**
     * Find zero or one Bitacora that matches the filter.
     * @param {bitacoraFindUniqueArgs} args - Arguments to find a Bitacora
     * @example
     * // Get one Bitacora
     * const bitacora = await prisma.bitacora.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends bitacoraFindUniqueArgs>(args: SelectSubset<T, bitacoraFindUniqueArgs<ExtArgs>>): Prisma__bitacoraClient<$Result.GetResult<Prisma.$bitacoraPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Bitacora that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {bitacoraFindUniqueOrThrowArgs} args - Arguments to find a Bitacora
     * @example
     * // Get one Bitacora
     * const bitacora = await prisma.bitacora.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends bitacoraFindUniqueOrThrowArgs>(args: SelectSubset<T, bitacoraFindUniqueOrThrowArgs<ExtArgs>>): Prisma__bitacoraClient<$Result.GetResult<Prisma.$bitacoraPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Bitacora that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bitacoraFindFirstArgs} args - Arguments to find a Bitacora
     * @example
     * // Get one Bitacora
     * const bitacora = await prisma.bitacora.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends bitacoraFindFirstArgs>(args?: SelectSubset<T, bitacoraFindFirstArgs<ExtArgs>>): Prisma__bitacoraClient<$Result.GetResult<Prisma.$bitacoraPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Bitacora that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bitacoraFindFirstOrThrowArgs} args - Arguments to find a Bitacora
     * @example
     * // Get one Bitacora
     * const bitacora = await prisma.bitacora.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends bitacoraFindFirstOrThrowArgs>(args?: SelectSubset<T, bitacoraFindFirstOrThrowArgs<ExtArgs>>): Prisma__bitacoraClient<$Result.GetResult<Prisma.$bitacoraPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Bitacoras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bitacoraFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bitacoras
     * const bitacoras = await prisma.bitacora.findMany()
     * 
     * // Get first 10 Bitacoras
     * const bitacoras = await prisma.bitacora.findMany({ take: 10 })
     * 
     * // Only select the `LogId`
     * const bitacoraWithLogIdOnly = await prisma.bitacora.findMany({ select: { LogId: true } })
     * 
     */
    findMany<T extends bitacoraFindManyArgs>(args?: SelectSubset<T, bitacoraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bitacoraPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Bitacora.
     * @param {bitacoraCreateArgs} args - Arguments to create a Bitacora.
     * @example
     * // Create one Bitacora
     * const Bitacora = await prisma.bitacora.create({
     *   data: {
     *     // ... data to create a Bitacora
     *   }
     * })
     * 
     */
    create<T extends bitacoraCreateArgs>(args: SelectSubset<T, bitacoraCreateArgs<ExtArgs>>): Prisma__bitacoraClient<$Result.GetResult<Prisma.$bitacoraPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Bitacoras.
     * @param {bitacoraCreateManyArgs} args - Arguments to create many Bitacoras.
     * @example
     * // Create many Bitacoras
     * const bitacora = await prisma.bitacora.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends bitacoraCreateManyArgs>(args?: SelectSubset<T, bitacoraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bitacora.
     * @param {bitacoraDeleteArgs} args - Arguments to delete one Bitacora.
     * @example
     * // Delete one Bitacora
     * const Bitacora = await prisma.bitacora.delete({
     *   where: {
     *     // ... filter to delete one Bitacora
     *   }
     * })
     * 
     */
    delete<T extends bitacoraDeleteArgs>(args: SelectSubset<T, bitacoraDeleteArgs<ExtArgs>>): Prisma__bitacoraClient<$Result.GetResult<Prisma.$bitacoraPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Bitacora.
     * @param {bitacoraUpdateArgs} args - Arguments to update one Bitacora.
     * @example
     * // Update one Bitacora
     * const bitacora = await prisma.bitacora.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends bitacoraUpdateArgs>(args: SelectSubset<T, bitacoraUpdateArgs<ExtArgs>>): Prisma__bitacoraClient<$Result.GetResult<Prisma.$bitacoraPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Bitacoras.
     * @param {bitacoraDeleteManyArgs} args - Arguments to filter Bitacoras to delete.
     * @example
     * // Delete a few Bitacoras
     * const { count } = await prisma.bitacora.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends bitacoraDeleteManyArgs>(args?: SelectSubset<T, bitacoraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bitacoras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bitacoraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bitacoras
     * const bitacora = await prisma.bitacora.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends bitacoraUpdateManyArgs>(args: SelectSubset<T, bitacoraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bitacora.
     * @param {bitacoraUpsertArgs} args - Arguments to update or create a Bitacora.
     * @example
     * // Update or create a Bitacora
     * const bitacora = await prisma.bitacora.upsert({
     *   create: {
     *     // ... data to create a Bitacora
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bitacora we want to update
     *   }
     * })
     */
    upsert<T extends bitacoraUpsertArgs>(args: SelectSubset<T, bitacoraUpsertArgs<ExtArgs>>): Prisma__bitacoraClient<$Result.GetResult<Prisma.$bitacoraPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Bitacoras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bitacoraCountArgs} args - Arguments to filter Bitacoras to count.
     * @example
     * // Count the number of Bitacoras
     * const count = await prisma.bitacora.count({
     *   where: {
     *     // ... the filter for the Bitacoras we want to count
     *   }
     * })
    **/
    count<T extends bitacoraCountArgs>(
      args?: Subset<T, bitacoraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BitacoraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bitacora.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BitacoraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BitacoraAggregateArgs>(args: Subset<T, BitacoraAggregateArgs>): Prisma.PrismaPromise<GetBitacoraAggregateType<T>>

    /**
     * Group by Bitacora.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bitacoraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bitacoraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bitacoraGroupByArgs['orderBy'] }
        : { orderBy?: bitacoraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bitacoraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBitacoraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the bitacora model
   */
  readonly fields: bitacoraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for bitacora.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bitacoraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the bitacora model
   */ 
  interface bitacoraFieldRefs {
    readonly LogId: FieldRef<"bitacora", 'Int'>
    readonly DateTime: FieldRef<"bitacora", 'DateTime'>
    readonly User: FieldRef<"bitacora", 'String'>
    readonly Action: FieldRef<"bitacora", 'String'>
    readonly Tabla: FieldRef<"bitacora", 'String'>
    readonly RecordId: FieldRef<"bitacora", 'Int'>
    readonly Description: FieldRef<"bitacora", 'String'>
  }
    

  // Custom InputTypes
  /**
   * bitacora findUnique
   */
  export type bitacoraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bitacora
     */
    select?: bitacoraSelect<ExtArgs> | null
    /**
     * Filter, which bitacora to fetch.
     */
    where: bitacoraWhereUniqueInput
  }

  /**
   * bitacora findUniqueOrThrow
   */
  export type bitacoraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bitacora
     */
    select?: bitacoraSelect<ExtArgs> | null
    /**
     * Filter, which bitacora to fetch.
     */
    where: bitacoraWhereUniqueInput
  }

  /**
   * bitacora findFirst
   */
  export type bitacoraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bitacora
     */
    select?: bitacoraSelect<ExtArgs> | null
    /**
     * Filter, which bitacora to fetch.
     */
    where?: bitacoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bitacoras to fetch.
     */
    orderBy?: bitacoraOrderByWithRelationInput | bitacoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bitacoras.
     */
    cursor?: bitacoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bitacoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bitacoras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bitacoras.
     */
    distinct?: BitacoraScalarFieldEnum | BitacoraScalarFieldEnum[]
  }

  /**
   * bitacora findFirstOrThrow
   */
  export type bitacoraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bitacora
     */
    select?: bitacoraSelect<ExtArgs> | null
    /**
     * Filter, which bitacora to fetch.
     */
    where?: bitacoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bitacoras to fetch.
     */
    orderBy?: bitacoraOrderByWithRelationInput | bitacoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bitacoras.
     */
    cursor?: bitacoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bitacoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bitacoras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bitacoras.
     */
    distinct?: BitacoraScalarFieldEnum | BitacoraScalarFieldEnum[]
  }

  /**
   * bitacora findMany
   */
  export type bitacoraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bitacora
     */
    select?: bitacoraSelect<ExtArgs> | null
    /**
     * Filter, which bitacoras to fetch.
     */
    where?: bitacoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bitacoras to fetch.
     */
    orderBy?: bitacoraOrderByWithRelationInput | bitacoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bitacoras.
     */
    cursor?: bitacoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bitacoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bitacoras.
     */
    skip?: number
    distinct?: BitacoraScalarFieldEnum | BitacoraScalarFieldEnum[]
  }

  /**
   * bitacora create
   */
  export type bitacoraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bitacora
     */
    select?: bitacoraSelect<ExtArgs> | null
    /**
     * The data needed to create a bitacora.
     */
    data: XOR<bitacoraCreateInput, bitacoraUncheckedCreateInput>
  }

  /**
   * bitacora createMany
   */
  export type bitacoraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bitacoras.
     */
    data: bitacoraCreateManyInput | bitacoraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * bitacora update
   */
  export type bitacoraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bitacora
     */
    select?: bitacoraSelect<ExtArgs> | null
    /**
     * The data needed to update a bitacora.
     */
    data: XOR<bitacoraUpdateInput, bitacoraUncheckedUpdateInput>
    /**
     * Choose, which bitacora to update.
     */
    where: bitacoraWhereUniqueInput
  }

  /**
   * bitacora updateMany
   */
  export type bitacoraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bitacoras.
     */
    data: XOR<bitacoraUpdateManyMutationInput, bitacoraUncheckedUpdateManyInput>
    /**
     * Filter which bitacoras to update
     */
    where?: bitacoraWhereInput
  }

  /**
   * bitacora upsert
   */
  export type bitacoraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bitacora
     */
    select?: bitacoraSelect<ExtArgs> | null
    /**
     * The filter to search for the bitacora to update in case it exists.
     */
    where: bitacoraWhereUniqueInput
    /**
     * In case the bitacora found by the `where` argument doesn't exist, create a new bitacora with this data.
     */
    create: XOR<bitacoraCreateInput, bitacoraUncheckedCreateInput>
    /**
     * In case the bitacora was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bitacoraUpdateInput, bitacoraUncheckedUpdateInput>
  }

  /**
   * bitacora delete
   */
  export type bitacoraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bitacora
     */
    select?: bitacoraSelect<ExtArgs> | null
    /**
     * Filter which bitacora to delete.
     */
    where: bitacoraWhereUniqueInput
  }

  /**
   * bitacora deleteMany
   */
  export type bitacoraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bitacoras to delete
     */
    where?: bitacoraWhereInput
  }

  /**
   * bitacora without action
   */
  export type bitacoraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bitacora
     */
    select?: bitacoraSelect<ExtArgs> | null
  }


  /**
   * Model clientes
   */

  export type AggregateClientes = {
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  export type ClientesAvgAggregateOutputType = {
    id: number | null
    Age: number | null
  }

  export type ClientesSumAggregateOutputType = {
    id: number | null
    Age: number | null
  }

  export type ClientesMinAggregateOutputType = {
    id: number | null
    Name: string | null
    LastName: string | null
    SEX: string | null
    Age: number | null
    BirthDate: Date | null
    Address: string | null
    Phone: string | null
    CURP: string | null
    Email: string | null
    BloodType: string | null
    Occupation: string | null
    Education: string | null
  }

  export type ClientesMaxAggregateOutputType = {
    id: number | null
    Name: string | null
    LastName: string | null
    SEX: string | null
    Age: number | null
    BirthDate: Date | null
    Address: string | null
    Phone: string | null
    CURP: string | null
    Email: string | null
    BloodType: string | null
    Occupation: string | null
    Education: string | null
  }

  export type ClientesCountAggregateOutputType = {
    id: number
    Name: number
    LastName: number
    SEX: number
    Age: number
    BirthDate: number
    Address: number
    Phone: number
    CURP: number
    Email: number
    BloodType: number
    Occupation: number
    Education: number
    _all: number
  }


  export type ClientesAvgAggregateInputType = {
    id?: true
    Age?: true
  }

  export type ClientesSumAggregateInputType = {
    id?: true
    Age?: true
  }

  export type ClientesMinAggregateInputType = {
    id?: true
    Name?: true
    LastName?: true
    SEX?: true
    Age?: true
    BirthDate?: true
    Address?: true
    Phone?: true
    CURP?: true
    Email?: true
    BloodType?: true
    Occupation?: true
    Education?: true
  }

  export type ClientesMaxAggregateInputType = {
    id?: true
    Name?: true
    LastName?: true
    SEX?: true
    Age?: true
    BirthDate?: true
    Address?: true
    Phone?: true
    CURP?: true
    Email?: true
    BloodType?: true
    Occupation?: true
    Education?: true
  }

  export type ClientesCountAggregateInputType = {
    id?: true
    Name?: true
    LastName?: true
    SEX?: true
    Age?: true
    BirthDate?: true
    Address?: true
    Phone?: true
    CURP?: true
    Email?: true
    BloodType?: true
    Occupation?: true
    Education?: true
    _all?: true
  }

  export type ClientesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientes to aggregate.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes
    **/
    _count?: true | ClientesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientesMaxAggregateInputType
  }

  export type GetClientesAggregateType<T extends ClientesAggregateArgs> = {
        [P in keyof T & keyof AggregateClientes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientes[P]>
      : GetScalarType<T[P], AggregateClientes[P]>
  }




  export type clientesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clientesWhereInput
    orderBy?: clientesOrderByWithAggregationInput | clientesOrderByWithAggregationInput[]
    by: ClientesScalarFieldEnum[] | ClientesScalarFieldEnum
    having?: clientesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientesCountAggregateInputType | true
    _avg?: ClientesAvgAggregateInputType
    _sum?: ClientesSumAggregateInputType
    _min?: ClientesMinAggregateInputType
    _max?: ClientesMaxAggregateInputType
  }

  export type ClientesGroupByOutputType = {
    id: number
    Name: string
    LastName: string
    SEX: string
    Age: number
    BirthDate: Date | null
    Address: string | null
    Phone: string | null
    CURP: string
    Email: string | null
    BloodType: string
    Occupation: string
    Education: string
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  type GetClientesGroupByPayload<T extends clientesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientesGroupByOutputType[P]>
            : GetScalarType<T[P], ClientesGroupByOutputType[P]>
        }
      >
    >


  export type clientesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Name?: boolean
    LastName?: boolean
    SEX?: boolean
    Age?: boolean
    BirthDate?: boolean
    Address?: boolean
    Phone?: boolean
    CURP?: boolean
    Email?: boolean
    BloodType?: boolean
    Occupation?: boolean
    Education?: boolean
  }, ExtArgs["result"]["clientes"]>


  export type clientesSelectScalar = {
    id?: boolean
    Name?: boolean
    LastName?: boolean
    SEX?: boolean
    Age?: boolean
    BirthDate?: boolean
    Address?: boolean
    Phone?: boolean
    CURP?: boolean
    Email?: boolean
    BloodType?: boolean
    Occupation?: boolean
    Education?: boolean
  }


  export type $clientesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "clientes"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Name: string
      LastName: string
      SEX: string
      Age: number
      BirthDate: Date | null
      Address: string | null
      Phone: string | null
      CURP: string
      Email: string | null
      BloodType: string
      Occupation: string
      Education: string
    }, ExtArgs["result"]["clientes"]>
    composites: {}
  }

  type clientesGetPayload<S extends boolean | null | undefined | clientesDefaultArgs> = $Result.GetResult<Prisma.$clientesPayload, S>

  type clientesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<clientesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClientesCountAggregateInputType | true
    }

  export interface clientesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['clientes'], meta: { name: 'clientes' } }
    /**
     * Find zero or one Clientes that matches the filter.
     * @param {clientesFindUniqueArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends clientesFindUniqueArgs>(args: SelectSubset<T, clientesFindUniqueArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Clientes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {clientesFindUniqueOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends clientesFindUniqueOrThrowArgs>(args: SelectSubset<T, clientesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends clientesFindFirstArgs>(args?: SelectSubset<T, clientesFindFirstArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Clientes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends clientesFindFirstOrThrowArgs>(args?: SelectSubset<T, clientesFindFirstOrThrowArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.clientes.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.clientes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientesWithIdOnly = await prisma.clientes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends clientesFindManyArgs>(args?: SelectSubset<T, clientesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Clientes.
     * @param {clientesCreateArgs} args - Arguments to create a Clientes.
     * @example
     * // Create one Clientes
     * const Clientes = await prisma.clientes.create({
     *   data: {
     *     // ... data to create a Clientes
     *   }
     * })
     * 
     */
    create<T extends clientesCreateArgs>(args: SelectSubset<T, clientesCreateArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clientes.
     * @param {clientesCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const clientes = await prisma.clientes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends clientesCreateManyArgs>(args?: SelectSubset<T, clientesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clientes.
     * @param {clientesDeleteArgs} args - Arguments to delete one Clientes.
     * @example
     * // Delete one Clientes
     * const Clientes = await prisma.clientes.delete({
     *   where: {
     *     // ... filter to delete one Clientes
     *   }
     * })
     * 
     */
    delete<T extends clientesDeleteArgs>(args: SelectSubset<T, clientesDeleteArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Clientes.
     * @param {clientesUpdateArgs} args - Arguments to update one Clientes.
     * @example
     * // Update one Clientes
     * const clientes = await prisma.clientes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends clientesUpdateArgs>(args: SelectSubset<T, clientesUpdateArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {clientesDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.clientes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends clientesDeleteManyArgs>(args?: SelectSubset<T, clientesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const clientes = await prisma.clientes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends clientesUpdateManyArgs>(args: SelectSubset<T, clientesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clientes.
     * @param {clientesUpsertArgs} args - Arguments to update or create a Clientes.
     * @example
     * // Update or create a Clientes
     * const clientes = await prisma.clientes.upsert({
     *   create: {
     *     // ... data to create a Clientes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clientes we want to update
     *   }
     * })
     */
    upsert<T extends clientesUpsertArgs>(args: SelectSubset<T, clientesUpsertArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.clientes.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends clientesCountArgs>(
      args?: Subset<T, clientesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientesAggregateArgs>(args: Subset<T, ClientesAggregateArgs>): Prisma.PrismaPromise<GetClientesAggregateType<T>>

    /**
     * Group by Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clientesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clientesGroupByArgs['orderBy'] }
        : { orderBy?: clientesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clientesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the clientes model
   */
  readonly fields: clientesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for clientes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clientesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the clientes model
   */ 
  interface clientesFieldRefs {
    readonly id: FieldRef<"clientes", 'Int'>
    readonly Name: FieldRef<"clientes", 'String'>
    readonly LastName: FieldRef<"clientes", 'String'>
    readonly SEX: FieldRef<"clientes", 'String'>
    readonly Age: FieldRef<"clientes", 'Int'>
    readonly BirthDate: FieldRef<"clientes", 'DateTime'>
    readonly Address: FieldRef<"clientes", 'String'>
    readonly Phone: FieldRef<"clientes", 'String'>
    readonly CURP: FieldRef<"clientes", 'String'>
    readonly Email: FieldRef<"clientes", 'String'>
    readonly BloodType: FieldRef<"clientes", 'String'>
    readonly Occupation: FieldRef<"clientes", 'String'>
    readonly Education: FieldRef<"clientes", 'String'>
  }
    

  // Custom InputTypes
  /**
   * clientes findUnique
   */
  export type clientesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where: clientesWhereUniqueInput
  }

  /**
   * clientes findUniqueOrThrow
   */
  export type clientesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where: clientesWhereUniqueInput
  }

  /**
   * clientes findFirst
   */
  export type clientesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: ClientesScalarFieldEnum | ClientesScalarFieldEnum[]
  }

  /**
   * clientes findFirstOrThrow
   */
  export type clientesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: ClientesScalarFieldEnum | ClientesScalarFieldEnum[]
  }

  /**
   * clientes findMany
   */
  export type clientesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    distinct?: ClientesScalarFieldEnum | ClientesScalarFieldEnum[]
  }

  /**
   * clientes create
   */
  export type clientesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * The data needed to create a clientes.
     */
    data: XOR<clientesCreateInput, clientesUncheckedCreateInput>
  }

  /**
   * clientes createMany
   */
  export type clientesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clientes.
     */
    data: clientesCreateManyInput | clientesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * clientes update
   */
  export type clientesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * The data needed to update a clientes.
     */
    data: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
    /**
     * Choose, which clientes to update.
     */
    where: clientesWhereUniqueInput
  }

  /**
   * clientes updateMany
   */
  export type clientesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clientes.
     */
    data: XOR<clientesUpdateManyMutationInput, clientesUncheckedUpdateManyInput>
    /**
     * Filter which clientes to update
     */
    where?: clientesWhereInput
  }

  /**
   * clientes upsert
   */
  export type clientesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * The filter to search for the clientes to update in case it exists.
     */
    where: clientesWhereUniqueInput
    /**
     * In case the clientes found by the `where` argument doesn't exist, create a new clientes with this data.
     */
    create: XOR<clientesCreateInput, clientesUncheckedCreateInput>
    /**
     * In case the clientes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
  }

  /**
   * clientes delete
   */
  export type clientesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter which clientes to delete.
     */
    where: clientesWhereUniqueInput
  }

  /**
   * clientes deleteMany
   */
  export type clientesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientes to delete
     */
    where?: clientesWhereInput
  }

  /**
   * clientes without action
   */
  export type clientesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
  }


  /**
   * Model doctor
   */

  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorAvgAggregateOutputType = {
    id: number | null
    Age: number | null
  }

  export type DoctorSumAggregateOutputType = {
    id: number | null
    Age: number | null
  }

  export type DoctorMinAggregateOutputType = {
    id: number | null
    Name: string | null
    LastName: string | null
    Age: number | null
    BirthDate: Date | null
    Gender: $Enums.doctor_Gender | null
    Specialty: string | null
    Address: string | null
    Cellphone: string | null
    CURP: string | null
    LicenseNumber: string | null
    Sex: string | null
    MedicalLicense: string | null
    Email: string | null
    HireDate: Date | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: number | null
    Name: string | null
    LastName: string | null
    Age: number | null
    BirthDate: Date | null
    Gender: $Enums.doctor_Gender | null
    Specialty: string | null
    Address: string | null
    Cellphone: string | null
    CURP: string | null
    LicenseNumber: string | null
    Sex: string | null
    MedicalLicense: string | null
    Email: string | null
    HireDate: Date | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    Name: number
    LastName: number
    Age: number
    BirthDate: number
    Gender: number
    Specialty: number
    Address: number
    Cellphone: number
    CURP: number
    LicenseNumber: number
    Sex: number
    MedicalLicense: number
    Email: number
    HireDate: number
    _all: number
  }


  export type DoctorAvgAggregateInputType = {
    id?: true
    Age?: true
  }

  export type DoctorSumAggregateInputType = {
    id?: true
    Age?: true
  }

  export type DoctorMinAggregateInputType = {
    id?: true
    Name?: true
    LastName?: true
    Age?: true
    BirthDate?: true
    Gender?: true
    Specialty?: true
    Address?: true
    Cellphone?: true
    CURP?: true
    LicenseNumber?: true
    Sex?: true
    MedicalLicense?: true
    Email?: true
    HireDate?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    Name?: true
    LastName?: true
    Age?: true
    BirthDate?: true
    Gender?: true
    Specialty?: true
    Address?: true
    Cellphone?: true
    CURP?: true
    LicenseNumber?: true
    Sex?: true
    MedicalLicense?: true
    Email?: true
    HireDate?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    Name?: true
    LastName?: true
    Age?: true
    BirthDate?: true
    Gender?: true
    Specialty?: true
    Address?: true
    Cellphone?: true
    CURP?: true
    LicenseNumber?: true
    Sex?: true
    MedicalLicense?: true
    Email?: true
    HireDate?: true
    _all?: true
  }

  export type DoctorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctor to aggregate.
     */
    where?: doctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorOrderByWithRelationInput | doctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: doctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type doctorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: doctorWhereInput
    orderBy?: doctorOrderByWithAggregationInput | doctorOrderByWithAggregationInput[]
    by: DoctorScalarFieldEnum[] | DoctorScalarFieldEnum
    having?: doctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _avg?: DoctorAvgAggregateInputType
    _sum?: DoctorSumAggregateInputType
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }

  export type DoctorGroupByOutputType = {
    id: number
    Name: string
    LastName: string
    Age: number | null
    BirthDate: Date | null
    Gender: $Enums.doctor_Gender | null
    Specialty: string | null
    Address: string | null
    Cellphone: string | null
    CURP: string | null
    LicenseNumber: string | null
    Sex: string | null
    MedicalLicense: string | null
    Email: string
    HireDate: Date
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends doctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type doctorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Name?: boolean
    LastName?: boolean
    Age?: boolean
    BirthDate?: boolean
    Gender?: boolean
    Specialty?: boolean
    Address?: boolean
    Cellphone?: boolean
    CURP?: boolean
    LicenseNumber?: boolean
    Sex?: boolean
    MedicalLicense?: boolean
    Email?: boolean
    HireDate?: boolean
  }, ExtArgs["result"]["doctor"]>


  export type doctorSelectScalar = {
    id?: boolean
    Name?: boolean
    LastName?: boolean
    Age?: boolean
    BirthDate?: boolean
    Gender?: boolean
    Specialty?: boolean
    Address?: boolean
    Cellphone?: boolean
    CURP?: boolean
    LicenseNumber?: boolean
    Sex?: boolean
    MedicalLicense?: boolean
    Email?: boolean
    HireDate?: boolean
  }


  export type $doctorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "doctor"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Name: string
      LastName: string
      Age: number | null
      BirthDate: Date | null
      Gender: $Enums.doctor_Gender | null
      Specialty: string | null
      Address: string | null
      Cellphone: string | null
      CURP: string | null
      LicenseNumber: string | null
      Sex: string | null
      MedicalLicense: string | null
      Email: string
      HireDate: Date
    }, ExtArgs["result"]["doctor"]>
    composites: {}
  }

  type doctorGetPayload<S extends boolean | null | undefined | doctorDefaultArgs> = $Result.GetResult<Prisma.$doctorPayload, S>

  type doctorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<doctorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoctorCountAggregateInputType | true
    }

  export interface doctorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['doctor'], meta: { name: 'doctor' } }
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {doctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends doctorFindUniqueArgs>(args: SelectSubset<T, doctorFindUniqueArgs<ExtArgs>>): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Doctor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {doctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends doctorFindUniqueOrThrowArgs>(args: SelectSubset<T, doctorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends doctorFindFirstArgs>(args?: SelectSubset<T, doctorFindFirstArgs<ExtArgs>>): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Doctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends doctorFindFirstOrThrowArgs>(args?: SelectSubset<T, doctorFindFirstOrThrowArgs<ExtArgs>>): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends doctorFindManyArgs>(args?: SelectSubset<T, doctorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Doctor.
     * @param {doctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
     */
    create<T extends doctorCreateArgs>(args: SelectSubset<T, doctorCreateArgs<ExtArgs>>): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Doctors.
     * @param {doctorCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends doctorCreateManyArgs>(args?: SelectSubset<T, doctorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Doctor.
     * @param {doctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
     */
    delete<T extends doctorDeleteArgs>(args: SelectSubset<T, doctorDeleteArgs<ExtArgs>>): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Doctor.
     * @param {doctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends doctorUpdateArgs>(args: SelectSubset<T, doctorUpdateArgs<ExtArgs>>): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Doctors.
     * @param {doctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends doctorDeleteManyArgs>(args?: SelectSubset<T, doctorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends doctorUpdateManyArgs>(args: SelectSubset<T, doctorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor.
     * @param {doctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
     */
    upsert<T extends doctorUpsertArgs>(args: SelectSubset<T, doctorUpsertArgs<ExtArgs>>): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends doctorCountArgs>(
      args?: Subset<T, doctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends doctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: doctorGroupByArgs['orderBy'] }
        : { orderBy?: doctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, doctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the doctor model
   */
  readonly fields: doctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__doctorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the doctor model
   */ 
  interface doctorFieldRefs {
    readonly id: FieldRef<"doctor", 'Int'>
    readonly Name: FieldRef<"doctor", 'String'>
    readonly LastName: FieldRef<"doctor", 'String'>
    readonly Age: FieldRef<"doctor", 'Int'>
    readonly BirthDate: FieldRef<"doctor", 'DateTime'>
    readonly Gender: FieldRef<"doctor", 'doctor_Gender'>
    readonly Specialty: FieldRef<"doctor", 'String'>
    readonly Address: FieldRef<"doctor", 'String'>
    readonly Cellphone: FieldRef<"doctor", 'String'>
    readonly CURP: FieldRef<"doctor", 'String'>
    readonly LicenseNumber: FieldRef<"doctor", 'String'>
    readonly Sex: FieldRef<"doctor", 'String'>
    readonly MedicalLicense: FieldRef<"doctor", 'String'>
    readonly Email: FieldRef<"doctor", 'String'>
    readonly HireDate: FieldRef<"doctor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * doctor findUnique
   */
  export type doctorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Filter, which doctor to fetch.
     */
    where: doctorWhereUniqueInput
  }

  /**
   * doctor findUniqueOrThrow
   */
  export type doctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Filter, which doctor to fetch.
     */
    where: doctorWhereUniqueInput
  }

  /**
   * doctor findFirst
   */
  export type doctorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Filter, which doctor to fetch.
     */
    where?: doctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorOrderByWithRelationInput | doctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctors.
     */
    cursor?: doctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * doctor findFirstOrThrow
   */
  export type doctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Filter, which doctor to fetch.
     */
    where?: doctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorOrderByWithRelationInput | doctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctors.
     */
    cursor?: doctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * doctor findMany
   */
  export type doctorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Filter, which doctors to fetch.
     */
    where?: doctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorOrderByWithRelationInput | doctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing doctors.
     */
    cursor?: doctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * doctor create
   */
  export type doctorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * The data needed to create a doctor.
     */
    data: XOR<doctorCreateInput, doctorUncheckedCreateInput>
  }

  /**
   * doctor createMany
   */
  export type doctorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many doctors.
     */
    data: doctorCreateManyInput | doctorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * doctor update
   */
  export type doctorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * The data needed to update a doctor.
     */
    data: XOR<doctorUpdateInput, doctorUncheckedUpdateInput>
    /**
     * Choose, which doctor to update.
     */
    where: doctorWhereUniqueInput
  }

  /**
   * doctor updateMany
   */
  export type doctorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update doctors.
     */
    data: XOR<doctorUpdateManyMutationInput, doctorUncheckedUpdateManyInput>
    /**
     * Filter which doctors to update
     */
    where?: doctorWhereInput
  }

  /**
   * doctor upsert
   */
  export type doctorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * The filter to search for the doctor to update in case it exists.
     */
    where: doctorWhereUniqueInput
    /**
     * In case the doctor found by the `where` argument doesn't exist, create a new doctor with this data.
     */
    create: XOR<doctorCreateInput, doctorUncheckedCreateInput>
    /**
     * In case the doctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<doctorUpdateInput, doctorUncheckedUpdateInput>
  }

  /**
   * doctor delete
   */
  export type doctorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Filter which doctor to delete.
     */
    where: doctorWhereUniqueInput
  }

  /**
   * doctor deleteMany
   */
  export type doctorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctors to delete
     */
    where?: doctorWhereInput
  }

  /**
   * doctor without action
   */
  export type doctorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
  }


  /**
   * Model empleado
   */

  export type AggregateEmpleado = {
    _count: EmpleadoCountAggregateOutputType | null
    _avg: EmpleadoAvgAggregateOutputType | null
    _sum: EmpleadoSumAggregateOutputType | null
    _min: EmpleadoMinAggregateOutputType | null
    _max: EmpleadoMaxAggregateOutputType | null
  }

  export type EmpleadoAvgAggregateOutputType = {
    id: number | null
    Salary: Decimal | null
  }

  export type EmpleadoSumAggregateOutputType = {
    id: number | null
    Salary: Decimal | null
  }

  export type EmpleadoMinAggregateOutputType = {
    id: number | null
    Name: string | null
    LastName: string | null
    BirthDate: Date | null
    Gender: $Enums.empleado_Gender | null
    Cellphone: string | null
    Email: string | null
    Address: string | null
    Position: string | null
    CURP: string | null
    RFC: string | null
    Salary: Decimal | null
    HireDate: Date | null
  }

  export type EmpleadoMaxAggregateOutputType = {
    id: number | null
    Name: string | null
    LastName: string | null
    BirthDate: Date | null
    Gender: $Enums.empleado_Gender | null
    Cellphone: string | null
    Email: string | null
    Address: string | null
    Position: string | null
    CURP: string | null
    RFC: string | null
    Salary: Decimal | null
    HireDate: Date | null
  }

  export type EmpleadoCountAggregateOutputType = {
    id: number
    Name: number
    LastName: number
    BirthDate: number
    Gender: number
    Cellphone: number
    Email: number
    Address: number
    Position: number
    CURP: number
    RFC: number
    Salary: number
    HireDate: number
    _all: number
  }


  export type EmpleadoAvgAggregateInputType = {
    id?: true
    Salary?: true
  }

  export type EmpleadoSumAggregateInputType = {
    id?: true
    Salary?: true
  }

  export type EmpleadoMinAggregateInputType = {
    id?: true
    Name?: true
    LastName?: true
    BirthDate?: true
    Gender?: true
    Cellphone?: true
    Email?: true
    Address?: true
    Position?: true
    CURP?: true
    RFC?: true
    Salary?: true
    HireDate?: true
  }

  export type EmpleadoMaxAggregateInputType = {
    id?: true
    Name?: true
    LastName?: true
    BirthDate?: true
    Gender?: true
    Cellphone?: true
    Email?: true
    Address?: true
    Position?: true
    CURP?: true
    RFC?: true
    Salary?: true
    HireDate?: true
  }

  export type EmpleadoCountAggregateInputType = {
    id?: true
    Name?: true
    LastName?: true
    BirthDate?: true
    Gender?: true
    Cellphone?: true
    Email?: true
    Address?: true
    Position?: true
    CURP?: true
    RFC?: true
    Salary?: true
    HireDate?: true
    _all?: true
  }

  export type EmpleadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which empleado to aggregate.
     */
    where?: empleadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of empleados to fetch.
     */
    orderBy?: empleadoOrderByWithRelationInput | empleadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: empleadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` empleados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` empleados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned empleados
    **/
    _count?: true | EmpleadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmpleadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmpleadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmpleadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmpleadoMaxAggregateInputType
  }

  export type GetEmpleadoAggregateType<T extends EmpleadoAggregateArgs> = {
        [P in keyof T & keyof AggregateEmpleado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmpleado[P]>
      : GetScalarType<T[P], AggregateEmpleado[P]>
  }




  export type empleadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: empleadoWhereInput
    orderBy?: empleadoOrderByWithAggregationInput | empleadoOrderByWithAggregationInput[]
    by: EmpleadoScalarFieldEnum[] | EmpleadoScalarFieldEnum
    having?: empleadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmpleadoCountAggregateInputType | true
    _avg?: EmpleadoAvgAggregateInputType
    _sum?: EmpleadoSumAggregateInputType
    _min?: EmpleadoMinAggregateInputType
    _max?: EmpleadoMaxAggregateInputType
  }

  export type EmpleadoGroupByOutputType = {
    id: number
    Name: string
    LastName: string
    BirthDate: Date | null
    Gender: $Enums.empleado_Gender | null
    Cellphone: string | null
    Email: string
    Address: string | null
    Position: string | null
    CURP: string | null
    RFC: string | null
    Salary: Decimal | null
    HireDate: Date | null
    _count: EmpleadoCountAggregateOutputType | null
    _avg: EmpleadoAvgAggregateOutputType | null
    _sum: EmpleadoSumAggregateOutputType | null
    _min: EmpleadoMinAggregateOutputType | null
    _max: EmpleadoMaxAggregateOutputType | null
  }

  type GetEmpleadoGroupByPayload<T extends empleadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmpleadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmpleadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmpleadoGroupByOutputType[P]>
            : GetScalarType<T[P], EmpleadoGroupByOutputType[P]>
        }
      >
    >


  export type empleadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Name?: boolean
    LastName?: boolean
    BirthDate?: boolean
    Gender?: boolean
    Cellphone?: boolean
    Email?: boolean
    Address?: boolean
    Position?: boolean
    CURP?: boolean
    RFC?: boolean
    Salary?: boolean
    HireDate?: boolean
  }, ExtArgs["result"]["empleado"]>


  export type empleadoSelectScalar = {
    id?: boolean
    Name?: boolean
    LastName?: boolean
    BirthDate?: boolean
    Gender?: boolean
    Cellphone?: boolean
    Email?: boolean
    Address?: boolean
    Position?: boolean
    CURP?: boolean
    RFC?: boolean
    Salary?: boolean
    HireDate?: boolean
  }


  export type $empleadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "empleado"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Name: string
      LastName: string
      BirthDate: Date | null
      Gender: $Enums.empleado_Gender | null
      Cellphone: string | null
      Email: string
      Address: string | null
      Position: string | null
      CURP: string | null
      RFC: string | null
      Salary: Prisma.Decimal | null
      HireDate: Date | null
    }, ExtArgs["result"]["empleado"]>
    composites: {}
  }

  type empleadoGetPayload<S extends boolean | null | undefined | empleadoDefaultArgs> = $Result.GetResult<Prisma.$empleadoPayload, S>

  type empleadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<empleadoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmpleadoCountAggregateInputType | true
    }

  export interface empleadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['empleado'], meta: { name: 'empleado' } }
    /**
     * Find zero or one Empleado that matches the filter.
     * @param {empleadoFindUniqueArgs} args - Arguments to find a Empleado
     * @example
     * // Get one Empleado
     * const empleado = await prisma.empleado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends empleadoFindUniqueArgs>(args: SelectSubset<T, empleadoFindUniqueArgs<ExtArgs>>): Prisma__empleadoClient<$Result.GetResult<Prisma.$empleadoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Empleado that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {empleadoFindUniqueOrThrowArgs} args - Arguments to find a Empleado
     * @example
     * // Get one Empleado
     * const empleado = await prisma.empleado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends empleadoFindUniqueOrThrowArgs>(args: SelectSubset<T, empleadoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__empleadoClient<$Result.GetResult<Prisma.$empleadoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Empleado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empleadoFindFirstArgs} args - Arguments to find a Empleado
     * @example
     * // Get one Empleado
     * const empleado = await prisma.empleado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends empleadoFindFirstArgs>(args?: SelectSubset<T, empleadoFindFirstArgs<ExtArgs>>): Prisma__empleadoClient<$Result.GetResult<Prisma.$empleadoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Empleado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empleadoFindFirstOrThrowArgs} args - Arguments to find a Empleado
     * @example
     * // Get one Empleado
     * const empleado = await prisma.empleado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends empleadoFindFirstOrThrowArgs>(args?: SelectSubset<T, empleadoFindFirstOrThrowArgs<ExtArgs>>): Prisma__empleadoClient<$Result.GetResult<Prisma.$empleadoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Empleados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empleadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Empleados
     * const empleados = await prisma.empleado.findMany()
     * 
     * // Get first 10 Empleados
     * const empleados = await prisma.empleado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const empleadoWithIdOnly = await prisma.empleado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends empleadoFindManyArgs>(args?: SelectSubset<T, empleadoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$empleadoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Empleado.
     * @param {empleadoCreateArgs} args - Arguments to create a Empleado.
     * @example
     * // Create one Empleado
     * const Empleado = await prisma.empleado.create({
     *   data: {
     *     // ... data to create a Empleado
     *   }
     * })
     * 
     */
    create<T extends empleadoCreateArgs>(args: SelectSubset<T, empleadoCreateArgs<ExtArgs>>): Prisma__empleadoClient<$Result.GetResult<Prisma.$empleadoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Empleados.
     * @param {empleadoCreateManyArgs} args - Arguments to create many Empleados.
     * @example
     * // Create many Empleados
     * const empleado = await prisma.empleado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends empleadoCreateManyArgs>(args?: SelectSubset<T, empleadoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Empleado.
     * @param {empleadoDeleteArgs} args - Arguments to delete one Empleado.
     * @example
     * // Delete one Empleado
     * const Empleado = await prisma.empleado.delete({
     *   where: {
     *     // ... filter to delete one Empleado
     *   }
     * })
     * 
     */
    delete<T extends empleadoDeleteArgs>(args: SelectSubset<T, empleadoDeleteArgs<ExtArgs>>): Prisma__empleadoClient<$Result.GetResult<Prisma.$empleadoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Empleado.
     * @param {empleadoUpdateArgs} args - Arguments to update one Empleado.
     * @example
     * // Update one Empleado
     * const empleado = await prisma.empleado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends empleadoUpdateArgs>(args: SelectSubset<T, empleadoUpdateArgs<ExtArgs>>): Prisma__empleadoClient<$Result.GetResult<Prisma.$empleadoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Empleados.
     * @param {empleadoDeleteManyArgs} args - Arguments to filter Empleados to delete.
     * @example
     * // Delete a few Empleados
     * const { count } = await prisma.empleado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends empleadoDeleteManyArgs>(args?: SelectSubset<T, empleadoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Empleados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empleadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Empleados
     * const empleado = await prisma.empleado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends empleadoUpdateManyArgs>(args: SelectSubset<T, empleadoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Empleado.
     * @param {empleadoUpsertArgs} args - Arguments to update or create a Empleado.
     * @example
     * // Update or create a Empleado
     * const empleado = await prisma.empleado.upsert({
     *   create: {
     *     // ... data to create a Empleado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Empleado we want to update
     *   }
     * })
     */
    upsert<T extends empleadoUpsertArgs>(args: SelectSubset<T, empleadoUpsertArgs<ExtArgs>>): Prisma__empleadoClient<$Result.GetResult<Prisma.$empleadoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Empleados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empleadoCountArgs} args - Arguments to filter Empleados to count.
     * @example
     * // Count the number of Empleados
     * const count = await prisma.empleado.count({
     *   where: {
     *     // ... the filter for the Empleados we want to count
     *   }
     * })
    **/
    count<T extends empleadoCountArgs>(
      args?: Subset<T, empleadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmpleadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Empleado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpleadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmpleadoAggregateArgs>(args: Subset<T, EmpleadoAggregateArgs>): Prisma.PrismaPromise<GetEmpleadoAggregateType<T>>

    /**
     * Group by Empleado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empleadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends empleadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: empleadoGroupByArgs['orderBy'] }
        : { orderBy?: empleadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, empleadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmpleadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the empleado model
   */
  readonly fields: empleadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for empleado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__empleadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the empleado model
   */ 
  interface empleadoFieldRefs {
    readonly id: FieldRef<"empleado", 'Int'>
    readonly Name: FieldRef<"empleado", 'String'>
    readonly LastName: FieldRef<"empleado", 'String'>
    readonly BirthDate: FieldRef<"empleado", 'DateTime'>
    readonly Gender: FieldRef<"empleado", 'empleado_Gender'>
    readonly Cellphone: FieldRef<"empleado", 'String'>
    readonly Email: FieldRef<"empleado", 'String'>
    readonly Address: FieldRef<"empleado", 'String'>
    readonly Position: FieldRef<"empleado", 'String'>
    readonly CURP: FieldRef<"empleado", 'String'>
    readonly RFC: FieldRef<"empleado", 'String'>
    readonly Salary: FieldRef<"empleado", 'Decimal'>
    readonly HireDate: FieldRef<"empleado", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * empleado findUnique
   */
  export type empleadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empleado
     */
    select?: empleadoSelect<ExtArgs> | null
    /**
     * Filter, which empleado to fetch.
     */
    where: empleadoWhereUniqueInput
  }

  /**
   * empleado findUniqueOrThrow
   */
  export type empleadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empleado
     */
    select?: empleadoSelect<ExtArgs> | null
    /**
     * Filter, which empleado to fetch.
     */
    where: empleadoWhereUniqueInput
  }

  /**
   * empleado findFirst
   */
  export type empleadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empleado
     */
    select?: empleadoSelect<ExtArgs> | null
    /**
     * Filter, which empleado to fetch.
     */
    where?: empleadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of empleados to fetch.
     */
    orderBy?: empleadoOrderByWithRelationInput | empleadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for empleados.
     */
    cursor?: empleadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` empleados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` empleados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of empleados.
     */
    distinct?: EmpleadoScalarFieldEnum | EmpleadoScalarFieldEnum[]
  }

  /**
   * empleado findFirstOrThrow
   */
  export type empleadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empleado
     */
    select?: empleadoSelect<ExtArgs> | null
    /**
     * Filter, which empleado to fetch.
     */
    where?: empleadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of empleados to fetch.
     */
    orderBy?: empleadoOrderByWithRelationInput | empleadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for empleados.
     */
    cursor?: empleadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` empleados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` empleados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of empleados.
     */
    distinct?: EmpleadoScalarFieldEnum | EmpleadoScalarFieldEnum[]
  }

  /**
   * empleado findMany
   */
  export type empleadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empleado
     */
    select?: empleadoSelect<ExtArgs> | null
    /**
     * Filter, which empleados to fetch.
     */
    where?: empleadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of empleados to fetch.
     */
    orderBy?: empleadoOrderByWithRelationInput | empleadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing empleados.
     */
    cursor?: empleadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` empleados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` empleados.
     */
    skip?: number
    distinct?: EmpleadoScalarFieldEnum | EmpleadoScalarFieldEnum[]
  }

  /**
   * empleado create
   */
  export type empleadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empleado
     */
    select?: empleadoSelect<ExtArgs> | null
    /**
     * The data needed to create a empleado.
     */
    data: XOR<empleadoCreateInput, empleadoUncheckedCreateInput>
  }

  /**
   * empleado createMany
   */
  export type empleadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many empleados.
     */
    data: empleadoCreateManyInput | empleadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * empleado update
   */
  export type empleadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empleado
     */
    select?: empleadoSelect<ExtArgs> | null
    /**
     * The data needed to update a empleado.
     */
    data: XOR<empleadoUpdateInput, empleadoUncheckedUpdateInput>
    /**
     * Choose, which empleado to update.
     */
    where: empleadoWhereUniqueInput
  }

  /**
   * empleado updateMany
   */
  export type empleadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update empleados.
     */
    data: XOR<empleadoUpdateManyMutationInput, empleadoUncheckedUpdateManyInput>
    /**
     * Filter which empleados to update
     */
    where?: empleadoWhereInput
  }

  /**
   * empleado upsert
   */
  export type empleadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empleado
     */
    select?: empleadoSelect<ExtArgs> | null
    /**
     * The filter to search for the empleado to update in case it exists.
     */
    where: empleadoWhereUniqueInput
    /**
     * In case the empleado found by the `where` argument doesn't exist, create a new empleado with this data.
     */
    create: XOR<empleadoCreateInput, empleadoUncheckedCreateInput>
    /**
     * In case the empleado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<empleadoUpdateInput, empleadoUncheckedUpdateInput>
  }

  /**
   * empleado delete
   */
  export type empleadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empleado
     */
    select?: empleadoSelect<ExtArgs> | null
    /**
     * Filter which empleado to delete.
     */
    where: empleadoWhereUniqueInput
  }

  /**
   * empleado deleteMany
   */
  export type empleadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which empleados to delete
     */
    where?: empleadoWhereInput
  }

  /**
   * empleado without action
   */
  export type empleadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empleado
     */
    select?: empleadoSelect<ExtArgs> | null
  }


  /**
   * Model enfermedades
   */

  export type AggregateEnfermedades = {
    _count: EnfermedadesCountAggregateOutputType | null
    _avg: EnfermedadesAvgAggregateOutputType | null
    _sum: EnfermedadesSumAggregateOutputType | null
    _min: EnfermedadesMinAggregateOutputType | null
    _max: EnfermedadesMaxAggregateOutputType | null
  }

  export type EnfermedadesAvgAggregateOutputType = {
    DiseaseId: number | null
  }

  export type EnfermedadesSumAggregateOutputType = {
    DiseaseId: number | null
  }

  export type EnfermedadesMinAggregateOutputType = {
    DiseaseId: number | null
    DiseaseType: $Enums.enfermedades_DiseaseType | null
    Other: string | null
    Causes: string | null
    Symptoms: string | null
    Treatment: string | null
  }

  export type EnfermedadesMaxAggregateOutputType = {
    DiseaseId: number | null
    DiseaseType: $Enums.enfermedades_DiseaseType | null
    Other: string | null
    Causes: string | null
    Symptoms: string | null
    Treatment: string | null
  }

  export type EnfermedadesCountAggregateOutputType = {
    DiseaseId: number
    DiseaseType: number
    Other: number
    Causes: number
    Symptoms: number
    Treatment: number
    _all: number
  }


  export type EnfermedadesAvgAggregateInputType = {
    DiseaseId?: true
  }

  export type EnfermedadesSumAggregateInputType = {
    DiseaseId?: true
  }

  export type EnfermedadesMinAggregateInputType = {
    DiseaseId?: true
    DiseaseType?: true
    Other?: true
    Causes?: true
    Symptoms?: true
    Treatment?: true
  }

  export type EnfermedadesMaxAggregateInputType = {
    DiseaseId?: true
    DiseaseType?: true
    Other?: true
    Causes?: true
    Symptoms?: true
    Treatment?: true
  }

  export type EnfermedadesCountAggregateInputType = {
    DiseaseId?: true
    DiseaseType?: true
    Other?: true
    Causes?: true
    Symptoms?: true
    Treatment?: true
    _all?: true
  }

  export type EnfermedadesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which enfermedades to aggregate.
     */
    where?: enfermedadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of enfermedades to fetch.
     */
    orderBy?: enfermedadesOrderByWithRelationInput | enfermedadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: enfermedadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` enfermedades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` enfermedades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned enfermedades
    **/
    _count?: true | EnfermedadesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnfermedadesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnfermedadesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnfermedadesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnfermedadesMaxAggregateInputType
  }

  export type GetEnfermedadesAggregateType<T extends EnfermedadesAggregateArgs> = {
        [P in keyof T & keyof AggregateEnfermedades]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnfermedades[P]>
      : GetScalarType<T[P], AggregateEnfermedades[P]>
  }




  export type enfermedadesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: enfermedadesWhereInput
    orderBy?: enfermedadesOrderByWithAggregationInput | enfermedadesOrderByWithAggregationInput[]
    by: EnfermedadesScalarFieldEnum[] | EnfermedadesScalarFieldEnum
    having?: enfermedadesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnfermedadesCountAggregateInputType | true
    _avg?: EnfermedadesAvgAggregateInputType
    _sum?: EnfermedadesSumAggregateInputType
    _min?: EnfermedadesMinAggregateInputType
    _max?: EnfermedadesMaxAggregateInputType
  }

  export type EnfermedadesGroupByOutputType = {
    DiseaseId: number
    DiseaseType: $Enums.enfermedades_DiseaseType
    Other: string
    Causes: string
    Symptoms: string
    Treatment: string
    _count: EnfermedadesCountAggregateOutputType | null
    _avg: EnfermedadesAvgAggregateOutputType | null
    _sum: EnfermedadesSumAggregateOutputType | null
    _min: EnfermedadesMinAggregateOutputType | null
    _max: EnfermedadesMaxAggregateOutputType | null
  }

  type GetEnfermedadesGroupByPayload<T extends enfermedadesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnfermedadesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnfermedadesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnfermedadesGroupByOutputType[P]>
            : GetScalarType<T[P], EnfermedadesGroupByOutputType[P]>
        }
      >
    >


  export type enfermedadesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    DiseaseId?: boolean
    DiseaseType?: boolean
    Other?: boolean
    Causes?: boolean
    Symptoms?: boolean
    Treatment?: boolean
  }, ExtArgs["result"]["enfermedades"]>


  export type enfermedadesSelectScalar = {
    DiseaseId?: boolean
    DiseaseType?: boolean
    Other?: boolean
    Causes?: boolean
    Symptoms?: boolean
    Treatment?: boolean
  }


  export type $enfermedadesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "enfermedades"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      DiseaseId: number
      DiseaseType: $Enums.enfermedades_DiseaseType
      Other: string
      Causes: string
      Symptoms: string
      Treatment: string
    }, ExtArgs["result"]["enfermedades"]>
    composites: {}
  }

  type enfermedadesGetPayload<S extends boolean | null | undefined | enfermedadesDefaultArgs> = $Result.GetResult<Prisma.$enfermedadesPayload, S>

  type enfermedadesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<enfermedadesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EnfermedadesCountAggregateInputType | true
    }

  export interface enfermedadesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['enfermedades'], meta: { name: 'enfermedades' } }
    /**
     * Find zero or one Enfermedades that matches the filter.
     * @param {enfermedadesFindUniqueArgs} args - Arguments to find a Enfermedades
     * @example
     * // Get one Enfermedades
     * const enfermedades = await prisma.enfermedades.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends enfermedadesFindUniqueArgs>(args: SelectSubset<T, enfermedadesFindUniqueArgs<ExtArgs>>): Prisma__enfermedadesClient<$Result.GetResult<Prisma.$enfermedadesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Enfermedades that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {enfermedadesFindUniqueOrThrowArgs} args - Arguments to find a Enfermedades
     * @example
     * // Get one Enfermedades
     * const enfermedades = await prisma.enfermedades.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends enfermedadesFindUniqueOrThrowArgs>(args: SelectSubset<T, enfermedadesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__enfermedadesClient<$Result.GetResult<Prisma.$enfermedadesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Enfermedades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enfermedadesFindFirstArgs} args - Arguments to find a Enfermedades
     * @example
     * // Get one Enfermedades
     * const enfermedades = await prisma.enfermedades.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends enfermedadesFindFirstArgs>(args?: SelectSubset<T, enfermedadesFindFirstArgs<ExtArgs>>): Prisma__enfermedadesClient<$Result.GetResult<Prisma.$enfermedadesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Enfermedades that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enfermedadesFindFirstOrThrowArgs} args - Arguments to find a Enfermedades
     * @example
     * // Get one Enfermedades
     * const enfermedades = await prisma.enfermedades.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends enfermedadesFindFirstOrThrowArgs>(args?: SelectSubset<T, enfermedadesFindFirstOrThrowArgs<ExtArgs>>): Prisma__enfermedadesClient<$Result.GetResult<Prisma.$enfermedadesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Enfermedades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enfermedadesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enfermedades
     * const enfermedades = await prisma.enfermedades.findMany()
     * 
     * // Get first 10 Enfermedades
     * const enfermedades = await prisma.enfermedades.findMany({ take: 10 })
     * 
     * // Only select the `DiseaseId`
     * const enfermedadesWithDiseaseIdOnly = await prisma.enfermedades.findMany({ select: { DiseaseId: true } })
     * 
     */
    findMany<T extends enfermedadesFindManyArgs>(args?: SelectSubset<T, enfermedadesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$enfermedadesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Enfermedades.
     * @param {enfermedadesCreateArgs} args - Arguments to create a Enfermedades.
     * @example
     * // Create one Enfermedades
     * const Enfermedades = await prisma.enfermedades.create({
     *   data: {
     *     // ... data to create a Enfermedades
     *   }
     * })
     * 
     */
    create<T extends enfermedadesCreateArgs>(args: SelectSubset<T, enfermedadesCreateArgs<ExtArgs>>): Prisma__enfermedadesClient<$Result.GetResult<Prisma.$enfermedadesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Enfermedades.
     * @param {enfermedadesCreateManyArgs} args - Arguments to create many Enfermedades.
     * @example
     * // Create many Enfermedades
     * const enfermedades = await prisma.enfermedades.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends enfermedadesCreateManyArgs>(args?: SelectSubset<T, enfermedadesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Enfermedades.
     * @param {enfermedadesDeleteArgs} args - Arguments to delete one Enfermedades.
     * @example
     * // Delete one Enfermedades
     * const Enfermedades = await prisma.enfermedades.delete({
     *   where: {
     *     // ... filter to delete one Enfermedades
     *   }
     * })
     * 
     */
    delete<T extends enfermedadesDeleteArgs>(args: SelectSubset<T, enfermedadesDeleteArgs<ExtArgs>>): Prisma__enfermedadesClient<$Result.GetResult<Prisma.$enfermedadesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Enfermedades.
     * @param {enfermedadesUpdateArgs} args - Arguments to update one Enfermedades.
     * @example
     * // Update one Enfermedades
     * const enfermedades = await prisma.enfermedades.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends enfermedadesUpdateArgs>(args: SelectSubset<T, enfermedadesUpdateArgs<ExtArgs>>): Prisma__enfermedadesClient<$Result.GetResult<Prisma.$enfermedadesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Enfermedades.
     * @param {enfermedadesDeleteManyArgs} args - Arguments to filter Enfermedades to delete.
     * @example
     * // Delete a few Enfermedades
     * const { count } = await prisma.enfermedades.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends enfermedadesDeleteManyArgs>(args?: SelectSubset<T, enfermedadesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enfermedades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enfermedadesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enfermedades
     * const enfermedades = await prisma.enfermedades.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends enfermedadesUpdateManyArgs>(args: SelectSubset<T, enfermedadesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Enfermedades.
     * @param {enfermedadesUpsertArgs} args - Arguments to update or create a Enfermedades.
     * @example
     * // Update or create a Enfermedades
     * const enfermedades = await prisma.enfermedades.upsert({
     *   create: {
     *     // ... data to create a Enfermedades
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enfermedades we want to update
     *   }
     * })
     */
    upsert<T extends enfermedadesUpsertArgs>(args: SelectSubset<T, enfermedadesUpsertArgs<ExtArgs>>): Prisma__enfermedadesClient<$Result.GetResult<Prisma.$enfermedadesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Enfermedades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enfermedadesCountArgs} args - Arguments to filter Enfermedades to count.
     * @example
     * // Count the number of Enfermedades
     * const count = await prisma.enfermedades.count({
     *   where: {
     *     // ... the filter for the Enfermedades we want to count
     *   }
     * })
    **/
    count<T extends enfermedadesCountArgs>(
      args?: Subset<T, enfermedadesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnfermedadesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enfermedades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnfermedadesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnfermedadesAggregateArgs>(args: Subset<T, EnfermedadesAggregateArgs>): Prisma.PrismaPromise<GetEnfermedadesAggregateType<T>>

    /**
     * Group by Enfermedades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {enfermedadesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends enfermedadesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: enfermedadesGroupByArgs['orderBy'] }
        : { orderBy?: enfermedadesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, enfermedadesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnfermedadesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the enfermedades model
   */
  readonly fields: enfermedadesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for enfermedades.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__enfermedadesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the enfermedades model
   */ 
  interface enfermedadesFieldRefs {
    readonly DiseaseId: FieldRef<"enfermedades", 'Int'>
    readonly DiseaseType: FieldRef<"enfermedades", 'enfermedades_DiseaseType'>
    readonly Other: FieldRef<"enfermedades", 'String'>
    readonly Causes: FieldRef<"enfermedades", 'String'>
    readonly Symptoms: FieldRef<"enfermedades", 'String'>
    readonly Treatment: FieldRef<"enfermedades", 'String'>
  }
    

  // Custom InputTypes
  /**
   * enfermedades findUnique
   */
  export type enfermedadesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the enfermedades
     */
    select?: enfermedadesSelect<ExtArgs> | null
    /**
     * Filter, which enfermedades to fetch.
     */
    where: enfermedadesWhereUniqueInput
  }

  /**
   * enfermedades findUniqueOrThrow
   */
  export type enfermedadesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the enfermedades
     */
    select?: enfermedadesSelect<ExtArgs> | null
    /**
     * Filter, which enfermedades to fetch.
     */
    where: enfermedadesWhereUniqueInput
  }

  /**
   * enfermedades findFirst
   */
  export type enfermedadesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the enfermedades
     */
    select?: enfermedadesSelect<ExtArgs> | null
    /**
     * Filter, which enfermedades to fetch.
     */
    where?: enfermedadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of enfermedades to fetch.
     */
    orderBy?: enfermedadesOrderByWithRelationInput | enfermedadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for enfermedades.
     */
    cursor?: enfermedadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` enfermedades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` enfermedades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of enfermedades.
     */
    distinct?: EnfermedadesScalarFieldEnum | EnfermedadesScalarFieldEnum[]
  }

  /**
   * enfermedades findFirstOrThrow
   */
  export type enfermedadesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the enfermedades
     */
    select?: enfermedadesSelect<ExtArgs> | null
    /**
     * Filter, which enfermedades to fetch.
     */
    where?: enfermedadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of enfermedades to fetch.
     */
    orderBy?: enfermedadesOrderByWithRelationInput | enfermedadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for enfermedades.
     */
    cursor?: enfermedadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` enfermedades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` enfermedades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of enfermedades.
     */
    distinct?: EnfermedadesScalarFieldEnum | EnfermedadesScalarFieldEnum[]
  }

  /**
   * enfermedades findMany
   */
  export type enfermedadesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the enfermedades
     */
    select?: enfermedadesSelect<ExtArgs> | null
    /**
     * Filter, which enfermedades to fetch.
     */
    where?: enfermedadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of enfermedades to fetch.
     */
    orderBy?: enfermedadesOrderByWithRelationInput | enfermedadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing enfermedades.
     */
    cursor?: enfermedadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` enfermedades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` enfermedades.
     */
    skip?: number
    distinct?: EnfermedadesScalarFieldEnum | EnfermedadesScalarFieldEnum[]
  }

  /**
   * enfermedades create
   */
  export type enfermedadesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the enfermedades
     */
    select?: enfermedadesSelect<ExtArgs> | null
    /**
     * The data needed to create a enfermedades.
     */
    data: XOR<enfermedadesCreateInput, enfermedadesUncheckedCreateInput>
  }

  /**
   * enfermedades createMany
   */
  export type enfermedadesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many enfermedades.
     */
    data: enfermedadesCreateManyInput | enfermedadesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * enfermedades update
   */
  export type enfermedadesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the enfermedades
     */
    select?: enfermedadesSelect<ExtArgs> | null
    /**
     * The data needed to update a enfermedades.
     */
    data: XOR<enfermedadesUpdateInput, enfermedadesUncheckedUpdateInput>
    /**
     * Choose, which enfermedades to update.
     */
    where: enfermedadesWhereUniqueInput
  }

  /**
   * enfermedades updateMany
   */
  export type enfermedadesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update enfermedades.
     */
    data: XOR<enfermedadesUpdateManyMutationInput, enfermedadesUncheckedUpdateManyInput>
    /**
     * Filter which enfermedades to update
     */
    where?: enfermedadesWhereInput
  }

  /**
   * enfermedades upsert
   */
  export type enfermedadesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the enfermedades
     */
    select?: enfermedadesSelect<ExtArgs> | null
    /**
     * The filter to search for the enfermedades to update in case it exists.
     */
    where: enfermedadesWhereUniqueInput
    /**
     * In case the enfermedades found by the `where` argument doesn't exist, create a new enfermedades with this data.
     */
    create: XOR<enfermedadesCreateInput, enfermedadesUncheckedCreateInput>
    /**
     * In case the enfermedades was found with the provided `where` argument, update it with this data.
     */
    update: XOR<enfermedadesUpdateInput, enfermedadesUncheckedUpdateInput>
  }

  /**
   * enfermedades delete
   */
  export type enfermedadesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the enfermedades
     */
    select?: enfermedadesSelect<ExtArgs> | null
    /**
     * Filter which enfermedades to delete.
     */
    where: enfermedadesWhereUniqueInput
  }

  /**
   * enfermedades deleteMany
   */
  export type enfermedadesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which enfermedades to delete
     */
    where?: enfermedadesWhereInput
  }

  /**
   * enfermedades without action
   */
  export type enfermedadesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the enfermedades
     */
    select?: enfermedadesSelect<ExtArgs> | null
  }


  /**
   * Model examen_clinico_intraoral
   */

  export type AggregateExamen_clinico_intraoral = {
    _count: Examen_clinico_intraoralCountAggregateOutputType | null
    _avg: Examen_clinico_intraoralAvgAggregateOutputType | null
    _sum: Examen_clinico_intraoralSumAggregateOutputType | null
    _min: Examen_clinico_intraoralMinAggregateOutputType | null
    _max: Examen_clinico_intraoralMaxAggregateOutputType | null
  }

  export type Examen_clinico_intraoralAvgAggregateOutputType = {
    PatientId: number | null
  }

  export type Examen_clinico_intraoralSumAggregateOutputType = {
    PatientId: number | null
  }

  export type Examen_clinico_intraoralMinAggregateOutputType = {
    PatientId: number | null
    ExaminationDate: Date | null
    Gums: string | null
    Tongue: string | null
    HardPalate: string | null
    SoftPalate: string | null
    Pharynx: string | null
    FloorOfMouth: string | null
    ResidualRidge: string | null
    OcclusionType: string | null
    Observations: string | null
  }

  export type Examen_clinico_intraoralMaxAggregateOutputType = {
    PatientId: number | null
    ExaminationDate: Date | null
    Gums: string | null
    Tongue: string | null
    HardPalate: string | null
    SoftPalate: string | null
    Pharynx: string | null
    FloorOfMouth: string | null
    ResidualRidge: string | null
    OcclusionType: string | null
    Observations: string | null
  }

  export type Examen_clinico_intraoralCountAggregateOutputType = {
    PatientId: number
    ExaminationDate: number
    Gums: number
    Tongue: number
    HardPalate: number
    SoftPalate: number
    Pharynx: number
    FloorOfMouth: number
    ResidualRidge: number
    OcclusionType: number
    Observations: number
    _all: number
  }


  export type Examen_clinico_intraoralAvgAggregateInputType = {
    PatientId?: true
  }

  export type Examen_clinico_intraoralSumAggregateInputType = {
    PatientId?: true
  }

  export type Examen_clinico_intraoralMinAggregateInputType = {
    PatientId?: true
    ExaminationDate?: true
    Gums?: true
    Tongue?: true
    HardPalate?: true
    SoftPalate?: true
    Pharynx?: true
    FloorOfMouth?: true
    ResidualRidge?: true
    OcclusionType?: true
    Observations?: true
  }

  export type Examen_clinico_intraoralMaxAggregateInputType = {
    PatientId?: true
    ExaminationDate?: true
    Gums?: true
    Tongue?: true
    HardPalate?: true
    SoftPalate?: true
    Pharynx?: true
    FloorOfMouth?: true
    ResidualRidge?: true
    OcclusionType?: true
    Observations?: true
  }

  export type Examen_clinico_intraoralCountAggregateInputType = {
    PatientId?: true
    ExaminationDate?: true
    Gums?: true
    Tongue?: true
    HardPalate?: true
    SoftPalate?: true
    Pharynx?: true
    FloorOfMouth?: true
    ResidualRidge?: true
    OcclusionType?: true
    Observations?: true
    _all?: true
  }

  export type Examen_clinico_intraoralAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which examen_clinico_intraoral to aggregate.
     */
    where?: examen_clinico_intraoralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of examen_clinico_intraorals to fetch.
     */
    orderBy?: examen_clinico_intraoralOrderByWithRelationInput | examen_clinico_intraoralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: examen_clinico_intraoralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` examen_clinico_intraorals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` examen_clinico_intraorals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned examen_clinico_intraorals
    **/
    _count?: true | Examen_clinico_intraoralCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Examen_clinico_intraoralAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Examen_clinico_intraoralSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Examen_clinico_intraoralMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Examen_clinico_intraoralMaxAggregateInputType
  }

  export type GetExamen_clinico_intraoralAggregateType<T extends Examen_clinico_intraoralAggregateArgs> = {
        [P in keyof T & keyof AggregateExamen_clinico_intraoral]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamen_clinico_intraoral[P]>
      : GetScalarType<T[P], AggregateExamen_clinico_intraoral[P]>
  }




  export type examen_clinico_intraoralGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: examen_clinico_intraoralWhereInput
    orderBy?: examen_clinico_intraoralOrderByWithAggregationInput | examen_clinico_intraoralOrderByWithAggregationInput[]
    by: Examen_clinico_intraoralScalarFieldEnum[] | Examen_clinico_intraoralScalarFieldEnum
    having?: examen_clinico_intraoralScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Examen_clinico_intraoralCountAggregateInputType | true
    _avg?: Examen_clinico_intraoralAvgAggregateInputType
    _sum?: Examen_clinico_intraoralSumAggregateInputType
    _min?: Examen_clinico_intraoralMinAggregateInputType
    _max?: Examen_clinico_intraoralMaxAggregateInputType
  }

  export type Examen_clinico_intraoralGroupByOutputType = {
    PatientId: number
    ExaminationDate: Date
    Gums: string
    Tongue: string
    HardPalate: string
    SoftPalate: string
    Pharynx: string
    FloorOfMouth: string
    ResidualRidge: string
    OcclusionType: string
    Observations: string | null
    _count: Examen_clinico_intraoralCountAggregateOutputType | null
    _avg: Examen_clinico_intraoralAvgAggregateOutputType | null
    _sum: Examen_clinico_intraoralSumAggregateOutputType | null
    _min: Examen_clinico_intraoralMinAggregateOutputType | null
    _max: Examen_clinico_intraoralMaxAggregateOutputType | null
  }

  type GetExamen_clinico_intraoralGroupByPayload<T extends examen_clinico_intraoralGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Examen_clinico_intraoralGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Examen_clinico_intraoralGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Examen_clinico_intraoralGroupByOutputType[P]>
            : GetScalarType<T[P], Examen_clinico_intraoralGroupByOutputType[P]>
        }
      >
    >


  export type examen_clinico_intraoralSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    PatientId?: boolean
    ExaminationDate?: boolean
    Gums?: boolean
    Tongue?: boolean
    HardPalate?: boolean
    SoftPalate?: boolean
    Pharynx?: boolean
    FloorOfMouth?: boolean
    ResidualRidge?: boolean
    OcclusionType?: boolean
    Observations?: boolean
  }, ExtArgs["result"]["examen_clinico_intraoral"]>


  export type examen_clinico_intraoralSelectScalar = {
    PatientId?: boolean
    ExaminationDate?: boolean
    Gums?: boolean
    Tongue?: boolean
    HardPalate?: boolean
    SoftPalate?: boolean
    Pharynx?: boolean
    FloorOfMouth?: boolean
    ResidualRidge?: boolean
    OcclusionType?: boolean
    Observations?: boolean
  }


  export type $examen_clinico_intraoralPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "examen_clinico_intraoral"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      PatientId: number
      ExaminationDate: Date
      Gums: string
      Tongue: string
      HardPalate: string
      SoftPalate: string
      Pharynx: string
      FloorOfMouth: string
      ResidualRidge: string
      OcclusionType: string
      Observations: string | null
    }, ExtArgs["result"]["examen_clinico_intraoral"]>
    composites: {}
  }

  type examen_clinico_intraoralGetPayload<S extends boolean | null | undefined | examen_clinico_intraoralDefaultArgs> = $Result.GetResult<Prisma.$examen_clinico_intraoralPayload, S>

  type examen_clinico_intraoralCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<examen_clinico_intraoralFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Examen_clinico_intraoralCountAggregateInputType | true
    }

  export interface examen_clinico_intraoralDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['examen_clinico_intraoral'], meta: { name: 'examen_clinico_intraoral' } }
    /**
     * Find zero or one Examen_clinico_intraoral that matches the filter.
     * @param {examen_clinico_intraoralFindUniqueArgs} args - Arguments to find a Examen_clinico_intraoral
     * @example
     * // Get one Examen_clinico_intraoral
     * const examen_clinico_intraoral = await prisma.examen_clinico_intraoral.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends examen_clinico_intraoralFindUniqueArgs>(args: SelectSubset<T, examen_clinico_intraoralFindUniqueArgs<ExtArgs>>): Prisma__examen_clinico_intraoralClient<$Result.GetResult<Prisma.$examen_clinico_intraoralPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Examen_clinico_intraoral that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {examen_clinico_intraoralFindUniqueOrThrowArgs} args - Arguments to find a Examen_clinico_intraoral
     * @example
     * // Get one Examen_clinico_intraoral
     * const examen_clinico_intraoral = await prisma.examen_clinico_intraoral.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends examen_clinico_intraoralFindUniqueOrThrowArgs>(args: SelectSubset<T, examen_clinico_intraoralFindUniqueOrThrowArgs<ExtArgs>>): Prisma__examen_clinico_intraoralClient<$Result.GetResult<Prisma.$examen_clinico_intraoralPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Examen_clinico_intraoral that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examen_clinico_intraoralFindFirstArgs} args - Arguments to find a Examen_clinico_intraoral
     * @example
     * // Get one Examen_clinico_intraoral
     * const examen_clinico_intraoral = await prisma.examen_clinico_intraoral.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends examen_clinico_intraoralFindFirstArgs>(args?: SelectSubset<T, examen_clinico_intraoralFindFirstArgs<ExtArgs>>): Prisma__examen_clinico_intraoralClient<$Result.GetResult<Prisma.$examen_clinico_intraoralPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Examen_clinico_intraoral that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examen_clinico_intraoralFindFirstOrThrowArgs} args - Arguments to find a Examen_clinico_intraoral
     * @example
     * // Get one Examen_clinico_intraoral
     * const examen_clinico_intraoral = await prisma.examen_clinico_intraoral.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends examen_clinico_intraoralFindFirstOrThrowArgs>(args?: SelectSubset<T, examen_clinico_intraoralFindFirstOrThrowArgs<ExtArgs>>): Prisma__examen_clinico_intraoralClient<$Result.GetResult<Prisma.$examen_clinico_intraoralPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Examen_clinico_intraorals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examen_clinico_intraoralFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Examen_clinico_intraorals
     * const examen_clinico_intraorals = await prisma.examen_clinico_intraoral.findMany()
     * 
     * // Get first 10 Examen_clinico_intraorals
     * const examen_clinico_intraorals = await prisma.examen_clinico_intraoral.findMany({ take: 10 })
     * 
     * // Only select the `PatientId`
     * const examen_clinico_intraoralWithPatientIdOnly = await prisma.examen_clinico_intraoral.findMany({ select: { PatientId: true } })
     * 
     */
    findMany<T extends examen_clinico_intraoralFindManyArgs>(args?: SelectSubset<T, examen_clinico_intraoralFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$examen_clinico_intraoralPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Examen_clinico_intraoral.
     * @param {examen_clinico_intraoralCreateArgs} args - Arguments to create a Examen_clinico_intraoral.
     * @example
     * // Create one Examen_clinico_intraoral
     * const Examen_clinico_intraoral = await prisma.examen_clinico_intraoral.create({
     *   data: {
     *     // ... data to create a Examen_clinico_intraoral
     *   }
     * })
     * 
     */
    create<T extends examen_clinico_intraoralCreateArgs>(args: SelectSubset<T, examen_clinico_intraoralCreateArgs<ExtArgs>>): Prisma__examen_clinico_intraoralClient<$Result.GetResult<Prisma.$examen_clinico_intraoralPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Examen_clinico_intraorals.
     * @param {examen_clinico_intraoralCreateManyArgs} args - Arguments to create many Examen_clinico_intraorals.
     * @example
     * // Create many Examen_clinico_intraorals
     * const examen_clinico_intraoral = await prisma.examen_clinico_intraoral.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends examen_clinico_intraoralCreateManyArgs>(args?: SelectSubset<T, examen_clinico_intraoralCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Examen_clinico_intraoral.
     * @param {examen_clinico_intraoralDeleteArgs} args - Arguments to delete one Examen_clinico_intraoral.
     * @example
     * // Delete one Examen_clinico_intraoral
     * const Examen_clinico_intraoral = await prisma.examen_clinico_intraoral.delete({
     *   where: {
     *     // ... filter to delete one Examen_clinico_intraoral
     *   }
     * })
     * 
     */
    delete<T extends examen_clinico_intraoralDeleteArgs>(args: SelectSubset<T, examen_clinico_intraoralDeleteArgs<ExtArgs>>): Prisma__examen_clinico_intraoralClient<$Result.GetResult<Prisma.$examen_clinico_intraoralPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Examen_clinico_intraoral.
     * @param {examen_clinico_intraoralUpdateArgs} args - Arguments to update one Examen_clinico_intraoral.
     * @example
     * // Update one Examen_clinico_intraoral
     * const examen_clinico_intraoral = await prisma.examen_clinico_intraoral.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends examen_clinico_intraoralUpdateArgs>(args: SelectSubset<T, examen_clinico_intraoralUpdateArgs<ExtArgs>>): Prisma__examen_clinico_intraoralClient<$Result.GetResult<Prisma.$examen_clinico_intraoralPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Examen_clinico_intraorals.
     * @param {examen_clinico_intraoralDeleteManyArgs} args - Arguments to filter Examen_clinico_intraorals to delete.
     * @example
     * // Delete a few Examen_clinico_intraorals
     * const { count } = await prisma.examen_clinico_intraoral.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends examen_clinico_intraoralDeleteManyArgs>(args?: SelectSubset<T, examen_clinico_intraoralDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Examen_clinico_intraorals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examen_clinico_intraoralUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Examen_clinico_intraorals
     * const examen_clinico_intraoral = await prisma.examen_clinico_intraoral.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends examen_clinico_intraoralUpdateManyArgs>(args: SelectSubset<T, examen_clinico_intraoralUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Examen_clinico_intraoral.
     * @param {examen_clinico_intraoralUpsertArgs} args - Arguments to update or create a Examen_clinico_intraoral.
     * @example
     * // Update or create a Examen_clinico_intraoral
     * const examen_clinico_intraoral = await prisma.examen_clinico_intraoral.upsert({
     *   create: {
     *     // ... data to create a Examen_clinico_intraoral
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Examen_clinico_intraoral we want to update
     *   }
     * })
     */
    upsert<T extends examen_clinico_intraoralUpsertArgs>(args: SelectSubset<T, examen_clinico_intraoralUpsertArgs<ExtArgs>>): Prisma__examen_clinico_intraoralClient<$Result.GetResult<Prisma.$examen_clinico_intraoralPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Examen_clinico_intraorals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examen_clinico_intraoralCountArgs} args - Arguments to filter Examen_clinico_intraorals to count.
     * @example
     * // Count the number of Examen_clinico_intraorals
     * const count = await prisma.examen_clinico_intraoral.count({
     *   where: {
     *     // ... the filter for the Examen_clinico_intraorals we want to count
     *   }
     * })
    **/
    count<T extends examen_clinico_intraoralCountArgs>(
      args?: Subset<T, examen_clinico_intraoralCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Examen_clinico_intraoralCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Examen_clinico_intraoral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Examen_clinico_intraoralAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Examen_clinico_intraoralAggregateArgs>(args: Subset<T, Examen_clinico_intraoralAggregateArgs>): Prisma.PrismaPromise<GetExamen_clinico_intraoralAggregateType<T>>

    /**
     * Group by Examen_clinico_intraoral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examen_clinico_intraoralGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends examen_clinico_intraoralGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: examen_clinico_intraoralGroupByArgs['orderBy'] }
        : { orderBy?: examen_clinico_intraoralGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, examen_clinico_intraoralGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamen_clinico_intraoralGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the examen_clinico_intraoral model
   */
  readonly fields: examen_clinico_intraoralFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for examen_clinico_intraoral.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__examen_clinico_intraoralClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the examen_clinico_intraoral model
   */ 
  interface examen_clinico_intraoralFieldRefs {
    readonly PatientId: FieldRef<"examen_clinico_intraoral", 'Int'>
    readonly ExaminationDate: FieldRef<"examen_clinico_intraoral", 'DateTime'>
    readonly Gums: FieldRef<"examen_clinico_intraoral", 'String'>
    readonly Tongue: FieldRef<"examen_clinico_intraoral", 'String'>
    readonly HardPalate: FieldRef<"examen_clinico_intraoral", 'String'>
    readonly SoftPalate: FieldRef<"examen_clinico_intraoral", 'String'>
    readonly Pharynx: FieldRef<"examen_clinico_intraoral", 'String'>
    readonly FloorOfMouth: FieldRef<"examen_clinico_intraoral", 'String'>
    readonly ResidualRidge: FieldRef<"examen_clinico_intraoral", 'String'>
    readonly OcclusionType: FieldRef<"examen_clinico_intraoral", 'String'>
    readonly Observations: FieldRef<"examen_clinico_intraoral", 'String'>
  }
    

  // Custom InputTypes
  /**
   * examen_clinico_intraoral findUnique
   */
  export type examen_clinico_intraoralFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the examen_clinico_intraoral
     */
    select?: examen_clinico_intraoralSelect<ExtArgs> | null
    /**
     * Filter, which examen_clinico_intraoral to fetch.
     */
    where: examen_clinico_intraoralWhereUniqueInput
  }

  /**
   * examen_clinico_intraoral findUniqueOrThrow
   */
  export type examen_clinico_intraoralFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the examen_clinico_intraoral
     */
    select?: examen_clinico_intraoralSelect<ExtArgs> | null
    /**
     * Filter, which examen_clinico_intraoral to fetch.
     */
    where: examen_clinico_intraoralWhereUniqueInput
  }

  /**
   * examen_clinico_intraoral findFirst
   */
  export type examen_clinico_intraoralFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the examen_clinico_intraoral
     */
    select?: examen_clinico_intraoralSelect<ExtArgs> | null
    /**
     * Filter, which examen_clinico_intraoral to fetch.
     */
    where?: examen_clinico_intraoralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of examen_clinico_intraorals to fetch.
     */
    orderBy?: examen_clinico_intraoralOrderByWithRelationInput | examen_clinico_intraoralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for examen_clinico_intraorals.
     */
    cursor?: examen_clinico_intraoralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` examen_clinico_intraorals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` examen_clinico_intraorals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of examen_clinico_intraorals.
     */
    distinct?: Examen_clinico_intraoralScalarFieldEnum | Examen_clinico_intraoralScalarFieldEnum[]
  }

  /**
   * examen_clinico_intraoral findFirstOrThrow
   */
  export type examen_clinico_intraoralFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the examen_clinico_intraoral
     */
    select?: examen_clinico_intraoralSelect<ExtArgs> | null
    /**
     * Filter, which examen_clinico_intraoral to fetch.
     */
    where?: examen_clinico_intraoralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of examen_clinico_intraorals to fetch.
     */
    orderBy?: examen_clinico_intraoralOrderByWithRelationInput | examen_clinico_intraoralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for examen_clinico_intraorals.
     */
    cursor?: examen_clinico_intraoralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` examen_clinico_intraorals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` examen_clinico_intraorals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of examen_clinico_intraorals.
     */
    distinct?: Examen_clinico_intraoralScalarFieldEnum | Examen_clinico_intraoralScalarFieldEnum[]
  }

  /**
   * examen_clinico_intraoral findMany
   */
  export type examen_clinico_intraoralFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the examen_clinico_intraoral
     */
    select?: examen_clinico_intraoralSelect<ExtArgs> | null
    /**
     * Filter, which examen_clinico_intraorals to fetch.
     */
    where?: examen_clinico_intraoralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of examen_clinico_intraorals to fetch.
     */
    orderBy?: examen_clinico_intraoralOrderByWithRelationInput | examen_clinico_intraoralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing examen_clinico_intraorals.
     */
    cursor?: examen_clinico_intraoralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` examen_clinico_intraorals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` examen_clinico_intraorals.
     */
    skip?: number
    distinct?: Examen_clinico_intraoralScalarFieldEnum | Examen_clinico_intraoralScalarFieldEnum[]
  }

  /**
   * examen_clinico_intraoral create
   */
  export type examen_clinico_intraoralCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the examen_clinico_intraoral
     */
    select?: examen_clinico_intraoralSelect<ExtArgs> | null
    /**
     * The data needed to create a examen_clinico_intraoral.
     */
    data: XOR<examen_clinico_intraoralCreateInput, examen_clinico_intraoralUncheckedCreateInput>
  }

  /**
   * examen_clinico_intraoral createMany
   */
  export type examen_clinico_intraoralCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many examen_clinico_intraorals.
     */
    data: examen_clinico_intraoralCreateManyInput | examen_clinico_intraoralCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * examen_clinico_intraoral update
   */
  export type examen_clinico_intraoralUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the examen_clinico_intraoral
     */
    select?: examen_clinico_intraoralSelect<ExtArgs> | null
    /**
     * The data needed to update a examen_clinico_intraoral.
     */
    data: XOR<examen_clinico_intraoralUpdateInput, examen_clinico_intraoralUncheckedUpdateInput>
    /**
     * Choose, which examen_clinico_intraoral to update.
     */
    where: examen_clinico_intraoralWhereUniqueInput
  }

  /**
   * examen_clinico_intraoral updateMany
   */
  export type examen_clinico_intraoralUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update examen_clinico_intraorals.
     */
    data: XOR<examen_clinico_intraoralUpdateManyMutationInput, examen_clinico_intraoralUncheckedUpdateManyInput>
    /**
     * Filter which examen_clinico_intraorals to update
     */
    where?: examen_clinico_intraoralWhereInput
  }

  /**
   * examen_clinico_intraoral upsert
   */
  export type examen_clinico_intraoralUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the examen_clinico_intraoral
     */
    select?: examen_clinico_intraoralSelect<ExtArgs> | null
    /**
     * The filter to search for the examen_clinico_intraoral to update in case it exists.
     */
    where: examen_clinico_intraoralWhereUniqueInput
    /**
     * In case the examen_clinico_intraoral found by the `where` argument doesn't exist, create a new examen_clinico_intraoral with this data.
     */
    create: XOR<examen_clinico_intraoralCreateInput, examen_clinico_intraoralUncheckedCreateInput>
    /**
     * In case the examen_clinico_intraoral was found with the provided `where` argument, update it with this data.
     */
    update: XOR<examen_clinico_intraoralUpdateInput, examen_clinico_intraoralUncheckedUpdateInput>
  }

  /**
   * examen_clinico_intraoral delete
   */
  export type examen_clinico_intraoralDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the examen_clinico_intraoral
     */
    select?: examen_clinico_intraoralSelect<ExtArgs> | null
    /**
     * Filter which examen_clinico_intraoral to delete.
     */
    where: examen_clinico_intraoralWhereUniqueInput
  }

  /**
   * examen_clinico_intraoral deleteMany
   */
  export type examen_clinico_intraoralDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which examen_clinico_intraorals to delete
     */
    where?: examen_clinico_intraoralWhereInput
  }

  /**
   * examen_clinico_intraoral without action
   */
  export type examen_clinico_intraoralDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the examen_clinico_intraoral
     */
    select?: examen_clinico_intraoralSelect<ExtArgs> | null
  }


  /**
   * Model historial_clinico
   */

  export type AggregateHistorial_clinico = {
    _count: Historial_clinicoCountAggregateOutputType | null
    _avg: Historial_clinicoAvgAggregateOutputType | null
    _sum: Historial_clinicoSumAggregateOutputType | null
    _min: Historial_clinicoMinAggregateOutputType | null
    _max: Historial_clinicoMaxAggregateOutputType | null
  }

  export type Historial_clinicoAvgAggregateOutputType = {
    HistoryId: number | null
    ClientId: number | null
    DentistId: number | null
  }

  export type Historial_clinicoSumAggregateOutputType = {
    HistoryId: number | null
    ClientId: number | null
    DentistId: number | null
  }

  export type Historial_clinicoMinAggregateOutputType = {
    HistoryId: number | null
    ClientId: number | null
    DentistId: number | null
    ConsultationDate: Date | null
  }

  export type Historial_clinicoMaxAggregateOutputType = {
    HistoryId: number | null
    ClientId: number | null
    DentistId: number | null
    ConsultationDate: Date | null
  }

  export type Historial_clinicoCountAggregateOutputType = {
    HistoryId: number
    ClientId: number
    DentistId: number
    ConsultationDate: number
    ClinicalData: number
    _all: number
  }


  export type Historial_clinicoAvgAggregateInputType = {
    HistoryId?: true
    ClientId?: true
    DentistId?: true
  }

  export type Historial_clinicoSumAggregateInputType = {
    HistoryId?: true
    ClientId?: true
    DentistId?: true
  }

  export type Historial_clinicoMinAggregateInputType = {
    HistoryId?: true
    ClientId?: true
    DentistId?: true
    ConsultationDate?: true
  }

  export type Historial_clinicoMaxAggregateInputType = {
    HistoryId?: true
    ClientId?: true
    DentistId?: true
    ConsultationDate?: true
  }

  export type Historial_clinicoCountAggregateInputType = {
    HistoryId?: true
    ClientId?: true
    DentistId?: true
    ConsultationDate?: true
    ClinicalData?: true
    _all?: true
  }

  export type Historial_clinicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which historial_clinico to aggregate.
     */
    where?: historial_clinicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historial_clinicos to fetch.
     */
    orderBy?: historial_clinicoOrderByWithRelationInput | historial_clinicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: historial_clinicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historial_clinicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historial_clinicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned historial_clinicos
    **/
    _count?: true | Historial_clinicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Historial_clinicoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Historial_clinicoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Historial_clinicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Historial_clinicoMaxAggregateInputType
  }

  export type GetHistorial_clinicoAggregateType<T extends Historial_clinicoAggregateArgs> = {
        [P in keyof T & keyof AggregateHistorial_clinico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistorial_clinico[P]>
      : GetScalarType<T[P], AggregateHistorial_clinico[P]>
  }




  export type historial_clinicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: historial_clinicoWhereInput
    orderBy?: historial_clinicoOrderByWithAggregationInput | historial_clinicoOrderByWithAggregationInput[]
    by: Historial_clinicoScalarFieldEnum[] | Historial_clinicoScalarFieldEnum
    having?: historial_clinicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Historial_clinicoCountAggregateInputType | true
    _avg?: Historial_clinicoAvgAggregateInputType
    _sum?: Historial_clinicoSumAggregateInputType
    _min?: Historial_clinicoMinAggregateInputType
    _max?: Historial_clinicoMaxAggregateInputType
  }

  export type Historial_clinicoGroupByOutputType = {
    HistoryId: number
    ClientId: number | null
    DentistId: number | null
    ConsultationDate: Date | null
    ClinicalData: JsonValue | null
    _count: Historial_clinicoCountAggregateOutputType | null
    _avg: Historial_clinicoAvgAggregateOutputType | null
    _sum: Historial_clinicoSumAggregateOutputType | null
    _min: Historial_clinicoMinAggregateOutputType | null
    _max: Historial_clinicoMaxAggregateOutputType | null
  }

  type GetHistorial_clinicoGroupByPayload<T extends historial_clinicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Historial_clinicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Historial_clinicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Historial_clinicoGroupByOutputType[P]>
            : GetScalarType<T[P], Historial_clinicoGroupByOutputType[P]>
        }
      >
    >


  export type historial_clinicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    HistoryId?: boolean
    ClientId?: boolean
    DentistId?: boolean
    ConsultationDate?: boolean
    ClinicalData?: boolean
  }, ExtArgs["result"]["historial_clinico"]>


  export type historial_clinicoSelectScalar = {
    HistoryId?: boolean
    ClientId?: boolean
    DentistId?: boolean
    ConsultationDate?: boolean
    ClinicalData?: boolean
  }


  export type $historial_clinicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "historial_clinico"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      HistoryId: number
      ClientId: number | null
      DentistId: number | null
      ConsultationDate: Date | null
      ClinicalData: Prisma.JsonValue | null
    }, ExtArgs["result"]["historial_clinico"]>
    composites: {}
  }

  type historial_clinicoGetPayload<S extends boolean | null | undefined | historial_clinicoDefaultArgs> = $Result.GetResult<Prisma.$historial_clinicoPayload, S>

  type historial_clinicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<historial_clinicoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Historial_clinicoCountAggregateInputType | true
    }

  export interface historial_clinicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['historial_clinico'], meta: { name: 'historial_clinico' } }
    /**
     * Find zero or one Historial_clinico that matches the filter.
     * @param {historial_clinicoFindUniqueArgs} args - Arguments to find a Historial_clinico
     * @example
     * // Get one Historial_clinico
     * const historial_clinico = await prisma.historial_clinico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends historial_clinicoFindUniqueArgs>(args: SelectSubset<T, historial_clinicoFindUniqueArgs<ExtArgs>>): Prisma__historial_clinicoClient<$Result.GetResult<Prisma.$historial_clinicoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Historial_clinico that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {historial_clinicoFindUniqueOrThrowArgs} args - Arguments to find a Historial_clinico
     * @example
     * // Get one Historial_clinico
     * const historial_clinico = await prisma.historial_clinico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends historial_clinicoFindUniqueOrThrowArgs>(args: SelectSubset<T, historial_clinicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__historial_clinicoClient<$Result.GetResult<Prisma.$historial_clinicoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Historial_clinico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_clinicoFindFirstArgs} args - Arguments to find a Historial_clinico
     * @example
     * // Get one Historial_clinico
     * const historial_clinico = await prisma.historial_clinico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends historial_clinicoFindFirstArgs>(args?: SelectSubset<T, historial_clinicoFindFirstArgs<ExtArgs>>): Prisma__historial_clinicoClient<$Result.GetResult<Prisma.$historial_clinicoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Historial_clinico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_clinicoFindFirstOrThrowArgs} args - Arguments to find a Historial_clinico
     * @example
     * // Get one Historial_clinico
     * const historial_clinico = await prisma.historial_clinico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends historial_clinicoFindFirstOrThrowArgs>(args?: SelectSubset<T, historial_clinicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__historial_clinicoClient<$Result.GetResult<Prisma.$historial_clinicoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Historial_clinicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_clinicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Historial_clinicos
     * const historial_clinicos = await prisma.historial_clinico.findMany()
     * 
     * // Get first 10 Historial_clinicos
     * const historial_clinicos = await prisma.historial_clinico.findMany({ take: 10 })
     * 
     * // Only select the `HistoryId`
     * const historial_clinicoWithHistoryIdOnly = await prisma.historial_clinico.findMany({ select: { HistoryId: true } })
     * 
     */
    findMany<T extends historial_clinicoFindManyArgs>(args?: SelectSubset<T, historial_clinicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$historial_clinicoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Historial_clinico.
     * @param {historial_clinicoCreateArgs} args - Arguments to create a Historial_clinico.
     * @example
     * // Create one Historial_clinico
     * const Historial_clinico = await prisma.historial_clinico.create({
     *   data: {
     *     // ... data to create a Historial_clinico
     *   }
     * })
     * 
     */
    create<T extends historial_clinicoCreateArgs>(args: SelectSubset<T, historial_clinicoCreateArgs<ExtArgs>>): Prisma__historial_clinicoClient<$Result.GetResult<Prisma.$historial_clinicoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Historial_clinicos.
     * @param {historial_clinicoCreateManyArgs} args - Arguments to create many Historial_clinicos.
     * @example
     * // Create many Historial_clinicos
     * const historial_clinico = await prisma.historial_clinico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends historial_clinicoCreateManyArgs>(args?: SelectSubset<T, historial_clinicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Historial_clinico.
     * @param {historial_clinicoDeleteArgs} args - Arguments to delete one Historial_clinico.
     * @example
     * // Delete one Historial_clinico
     * const Historial_clinico = await prisma.historial_clinico.delete({
     *   where: {
     *     // ... filter to delete one Historial_clinico
     *   }
     * })
     * 
     */
    delete<T extends historial_clinicoDeleteArgs>(args: SelectSubset<T, historial_clinicoDeleteArgs<ExtArgs>>): Prisma__historial_clinicoClient<$Result.GetResult<Prisma.$historial_clinicoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Historial_clinico.
     * @param {historial_clinicoUpdateArgs} args - Arguments to update one Historial_clinico.
     * @example
     * // Update one Historial_clinico
     * const historial_clinico = await prisma.historial_clinico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends historial_clinicoUpdateArgs>(args: SelectSubset<T, historial_clinicoUpdateArgs<ExtArgs>>): Prisma__historial_clinicoClient<$Result.GetResult<Prisma.$historial_clinicoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Historial_clinicos.
     * @param {historial_clinicoDeleteManyArgs} args - Arguments to filter Historial_clinicos to delete.
     * @example
     * // Delete a few Historial_clinicos
     * const { count } = await prisma.historial_clinico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends historial_clinicoDeleteManyArgs>(args?: SelectSubset<T, historial_clinicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Historial_clinicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_clinicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Historial_clinicos
     * const historial_clinico = await prisma.historial_clinico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends historial_clinicoUpdateManyArgs>(args: SelectSubset<T, historial_clinicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Historial_clinico.
     * @param {historial_clinicoUpsertArgs} args - Arguments to update or create a Historial_clinico.
     * @example
     * // Update or create a Historial_clinico
     * const historial_clinico = await prisma.historial_clinico.upsert({
     *   create: {
     *     // ... data to create a Historial_clinico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Historial_clinico we want to update
     *   }
     * })
     */
    upsert<T extends historial_clinicoUpsertArgs>(args: SelectSubset<T, historial_clinicoUpsertArgs<ExtArgs>>): Prisma__historial_clinicoClient<$Result.GetResult<Prisma.$historial_clinicoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Historial_clinicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_clinicoCountArgs} args - Arguments to filter Historial_clinicos to count.
     * @example
     * // Count the number of Historial_clinicos
     * const count = await prisma.historial_clinico.count({
     *   where: {
     *     // ... the filter for the Historial_clinicos we want to count
     *   }
     * })
    **/
    count<T extends historial_clinicoCountArgs>(
      args?: Subset<T, historial_clinicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Historial_clinicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Historial_clinico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Historial_clinicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Historial_clinicoAggregateArgs>(args: Subset<T, Historial_clinicoAggregateArgs>): Prisma.PrismaPromise<GetHistorial_clinicoAggregateType<T>>

    /**
     * Group by Historial_clinico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historial_clinicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends historial_clinicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: historial_clinicoGroupByArgs['orderBy'] }
        : { orderBy?: historial_clinicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, historial_clinicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistorial_clinicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the historial_clinico model
   */
  readonly fields: historial_clinicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for historial_clinico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__historial_clinicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the historial_clinico model
   */ 
  interface historial_clinicoFieldRefs {
    readonly HistoryId: FieldRef<"historial_clinico", 'Int'>
    readonly ClientId: FieldRef<"historial_clinico", 'Int'>
    readonly DentistId: FieldRef<"historial_clinico", 'Int'>
    readonly ConsultationDate: FieldRef<"historial_clinico", 'DateTime'>
    readonly ClinicalData: FieldRef<"historial_clinico", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * historial_clinico findUnique
   */
  export type historial_clinicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_clinico
     */
    select?: historial_clinicoSelect<ExtArgs> | null
    /**
     * Filter, which historial_clinico to fetch.
     */
    where: historial_clinicoWhereUniqueInput
  }

  /**
   * historial_clinico findUniqueOrThrow
   */
  export type historial_clinicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_clinico
     */
    select?: historial_clinicoSelect<ExtArgs> | null
    /**
     * Filter, which historial_clinico to fetch.
     */
    where: historial_clinicoWhereUniqueInput
  }

  /**
   * historial_clinico findFirst
   */
  export type historial_clinicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_clinico
     */
    select?: historial_clinicoSelect<ExtArgs> | null
    /**
     * Filter, which historial_clinico to fetch.
     */
    where?: historial_clinicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historial_clinicos to fetch.
     */
    orderBy?: historial_clinicoOrderByWithRelationInput | historial_clinicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for historial_clinicos.
     */
    cursor?: historial_clinicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historial_clinicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historial_clinicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of historial_clinicos.
     */
    distinct?: Historial_clinicoScalarFieldEnum | Historial_clinicoScalarFieldEnum[]
  }

  /**
   * historial_clinico findFirstOrThrow
   */
  export type historial_clinicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_clinico
     */
    select?: historial_clinicoSelect<ExtArgs> | null
    /**
     * Filter, which historial_clinico to fetch.
     */
    where?: historial_clinicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historial_clinicos to fetch.
     */
    orderBy?: historial_clinicoOrderByWithRelationInput | historial_clinicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for historial_clinicos.
     */
    cursor?: historial_clinicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historial_clinicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historial_clinicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of historial_clinicos.
     */
    distinct?: Historial_clinicoScalarFieldEnum | Historial_clinicoScalarFieldEnum[]
  }

  /**
   * historial_clinico findMany
   */
  export type historial_clinicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_clinico
     */
    select?: historial_clinicoSelect<ExtArgs> | null
    /**
     * Filter, which historial_clinicos to fetch.
     */
    where?: historial_clinicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historial_clinicos to fetch.
     */
    orderBy?: historial_clinicoOrderByWithRelationInput | historial_clinicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing historial_clinicos.
     */
    cursor?: historial_clinicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historial_clinicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historial_clinicos.
     */
    skip?: number
    distinct?: Historial_clinicoScalarFieldEnum | Historial_clinicoScalarFieldEnum[]
  }

  /**
   * historial_clinico create
   */
  export type historial_clinicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_clinico
     */
    select?: historial_clinicoSelect<ExtArgs> | null
    /**
     * The data needed to create a historial_clinico.
     */
    data?: XOR<historial_clinicoCreateInput, historial_clinicoUncheckedCreateInput>
  }

  /**
   * historial_clinico createMany
   */
  export type historial_clinicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many historial_clinicos.
     */
    data: historial_clinicoCreateManyInput | historial_clinicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * historial_clinico update
   */
  export type historial_clinicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_clinico
     */
    select?: historial_clinicoSelect<ExtArgs> | null
    /**
     * The data needed to update a historial_clinico.
     */
    data: XOR<historial_clinicoUpdateInput, historial_clinicoUncheckedUpdateInput>
    /**
     * Choose, which historial_clinico to update.
     */
    where: historial_clinicoWhereUniqueInput
  }

  /**
   * historial_clinico updateMany
   */
  export type historial_clinicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update historial_clinicos.
     */
    data: XOR<historial_clinicoUpdateManyMutationInput, historial_clinicoUncheckedUpdateManyInput>
    /**
     * Filter which historial_clinicos to update
     */
    where?: historial_clinicoWhereInput
  }

  /**
   * historial_clinico upsert
   */
  export type historial_clinicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_clinico
     */
    select?: historial_clinicoSelect<ExtArgs> | null
    /**
     * The filter to search for the historial_clinico to update in case it exists.
     */
    where: historial_clinicoWhereUniqueInput
    /**
     * In case the historial_clinico found by the `where` argument doesn't exist, create a new historial_clinico with this data.
     */
    create: XOR<historial_clinicoCreateInput, historial_clinicoUncheckedCreateInput>
    /**
     * In case the historial_clinico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<historial_clinicoUpdateInput, historial_clinicoUncheckedUpdateInput>
  }

  /**
   * historial_clinico delete
   */
  export type historial_clinicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_clinico
     */
    select?: historial_clinicoSelect<ExtArgs> | null
    /**
     * Filter which historial_clinico to delete.
     */
    where: historial_clinicoWhereUniqueInput
  }

  /**
   * historial_clinico deleteMany
   */
  export type historial_clinicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which historial_clinicos to delete
     */
    where?: historial_clinicoWhereInput
  }

  /**
   * historial_clinico without action
   */
  export type historial_clinicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historial_clinico
     */
    select?: historial_clinicoSelect<ExtArgs> | null
  }


  /**
   * Model permisos
   */

  export type AggregatePermisos = {
    _count: PermisosCountAggregateOutputType | null
    _avg: PermisosAvgAggregateOutputType | null
    _sum: PermisosSumAggregateOutputType | null
    _min: PermisosMinAggregateOutputType | null
    _max: PermisosMaxAggregateOutputType | null
  }

  export type PermisosAvgAggregateOutputType = {
    ID: number | null
  }

  export type PermisosSumAggregateOutputType = {
    ID: number | null
  }

  export type PermisosMinAggregateOutputType = {
    ID: number | null
    Permission: string | null
    Description: string | null
  }

  export type PermisosMaxAggregateOutputType = {
    ID: number | null
    Permission: string | null
    Description: string | null
  }

  export type PermisosCountAggregateOutputType = {
    ID: number
    Permission: number
    Description: number
    _all: number
  }


  export type PermisosAvgAggregateInputType = {
    ID?: true
  }

  export type PermisosSumAggregateInputType = {
    ID?: true
  }

  export type PermisosMinAggregateInputType = {
    ID?: true
    Permission?: true
    Description?: true
  }

  export type PermisosMaxAggregateInputType = {
    ID?: true
    Permission?: true
    Description?: true
  }

  export type PermisosCountAggregateInputType = {
    ID?: true
    Permission?: true
    Description?: true
    _all?: true
  }

  export type PermisosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permisos to aggregate.
     */
    where?: permisosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permisos to fetch.
     */
    orderBy?: permisosOrderByWithRelationInput | permisosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: permisosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permisos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permisos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned permisos
    **/
    _count?: true | PermisosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermisosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermisosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermisosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermisosMaxAggregateInputType
  }

  export type GetPermisosAggregateType<T extends PermisosAggregateArgs> = {
        [P in keyof T & keyof AggregatePermisos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermisos[P]>
      : GetScalarType<T[P], AggregatePermisos[P]>
  }




  export type permisosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: permisosWhereInput
    orderBy?: permisosOrderByWithAggregationInput | permisosOrderByWithAggregationInput[]
    by: PermisosScalarFieldEnum[] | PermisosScalarFieldEnum
    having?: permisosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermisosCountAggregateInputType | true
    _avg?: PermisosAvgAggregateInputType
    _sum?: PermisosSumAggregateInputType
    _min?: PermisosMinAggregateInputType
    _max?: PermisosMaxAggregateInputType
  }

  export type PermisosGroupByOutputType = {
    ID: number
    Permission: string
    Description: string
    _count: PermisosCountAggregateOutputType | null
    _avg: PermisosAvgAggregateOutputType | null
    _sum: PermisosSumAggregateOutputType | null
    _min: PermisosMinAggregateOutputType | null
    _max: PermisosMaxAggregateOutputType | null
  }

  type GetPermisosGroupByPayload<T extends permisosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermisosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermisosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermisosGroupByOutputType[P]>
            : GetScalarType<T[P], PermisosGroupByOutputType[P]>
        }
      >
    >


  export type permisosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Permission?: boolean
    Description?: boolean
  }, ExtArgs["result"]["permisos"]>


  export type permisosSelectScalar = {
    ID?: boolean
    Permission?: boolean
    Description?: boolean
  }


  export type $permisosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "permisos"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Permission: string
      Description: string
    }, ExtArgs["result"]["permisos"]>
    composites: {}
  }

  type permisosGetPayload<S extends boolean | null | undefined | permisosDefaultArgs> = $Result.GetResult<Prisma.$permisosPayload, S>

  type permisosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<permisosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermisosCountAggregateInputType | true
    }

  export interface permisosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['permisos'], meta: { name: 'permisos' } }
    /**
     * Find zero or one Permisos that matches the filter.
     * @param {permisosFindUniqueArgs} args - Arguments to find a Permisos
     * @example
     * // Get one Permisos
     * const permisos = await prisma.permisos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends permisosFindUniqueArgs>(args: SelectSubset<T, permisosFindUniqueArgs<ExtArgs>>): Prisma__permisosClient<$Result.GetResult<Prisma.$permisosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Permisos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {permisosFindUniqueOrThrowArgs} args - Arguments to find a Permisos
     * @example
     * // Get one Permisos
     * const permisos = await prisma.permisos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends permisosFindUniqueOrThrowArgs>(args: SelectSubset<T, permisosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__permisosClient<$Result.GetResult<Prisma.$permisosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Permisos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permisosFindFirstArgs} args - Arguments to find a Permisos
     * @example
     * // Get one Permisos
     * const permisos = await prisma.permisos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends permisosFindFirstArgs>(args?: SelectSubset<T, permisosFindFirstArgs<ExtArgs>>): Prisma__permisosClient<$Result.GetResult<Prisma.$permisosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Permisos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permisosFindFirstOrThrowArgs} args - Arguments to find a Permisos
     * @example
     * // Get one Permisos
     * const permisos = await prisma.permisos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends permisosFindFirstOrThrowArgs>(args?: SelectSubset<T, permisosFindFirstOrThrowArgs<ExtArgs>>): Prisma__permisosClient<$Result.GetResult<Prisma.$permisosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Permisos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permisosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permisos
     * const permisos = await prisma.permisos.findMany()
     * 
     * // Get first 10 Permisos
     * const permisos = await prisma.permisos.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const permisosWithIDOnly = await prisma.permisos.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends permisosFindManyArgs>(args?: SelectSubset<T, permisosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permisosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Permisos.
     * @param {permisosCreateArgs} args - Arguments to create a Permisos.
     * @example
     * // Create one Permisos
     * const Permisos = await prisma.permisos.create({
     *   data: {
     *     // ... data to create a Permisos
     *   }
     * })
     * 
     */
    create<T extends permisosCreateArgs>(args: SelectSubset<T, permisosCreateArgs<ExtArgs>>): Prisma__permisosClient<$Result.GetResult<Prisma.$permisosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Permisos.
     * @param {permisosCreateManyArgs} args - Arguments to create many Permisos.
     * @example
     * // Create many Permisos
     * const permisos = await prisma.permisos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends permisosCreateManyArgs>(args?: SelectSubset<T, permisosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permisos.
     * @param {permisosDeleteArgs} args - Arguments to delete one Permisos.
     * @example
     * // Delete one Permisos
     * const Permisos = await prisma.permisos.delete({
     *   where: {
     *     // ... filter to delete one Permisos
     *   }
     * })
     * 
     */
    delete<T extends permisosDeleteArgs>(args: SelectSubset<T, permisosDeleteArgs<ExtArgs>>): Prisma__permisosClient<$Result.GetResult<Prisma.$permisosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Permisos.
     * @param {permisosUpdateArgs} args - Arguments to update one Permisos.
     * @example
     * // Update one Permisos
     * const permisos = await prisma.permisos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends permisosUpdateArgs>(args: SelectSubset<T, permisosUpdateArgs<ExtArgs>>): Prisma__permisosClient<$Result.GetResult<Prisma.$permisosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Permisos.
     * @param {permisosDeleteManyArgs} args - Arguments to filter Permisos to delete.
     * @example
     * // Delete a few Permisos
     * const { count } = await prisma.permisos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends permisosDeleteManyArgs>(args?: SelectSubset<T, permisosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permisos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permisosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permisos
     * const permisos = await prisma.permisos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends permisosUpdateManyArgs>(args: SelectSubset<T, permisosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permisos.
     * @param {permisosUpsertArgs} args - Arguments to update or create a Permisos.
     * @example
     * // Update or create a Permisos
     * const permisos = await prisma.permisos.upsert({
     *   create: {
     *     // ... data to create a Permisos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permisos we want to update
     *   }
     * })
     */
    upsert<T extends permisosUpsertArgs>(args: SelectSubset<T, permisosUpsertArgs<ExtArgs>>): Prisma__permisosClient<$Result.GetResult<Prisma.$permisosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Permisos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permisosCountArgs} args - Arguments to filter Permisos to count.
     * @example
     * // Count the number of Permisos
     * const count = await prisma.permisos.count({
     *   where: {
     *     // ... the filter for the Permisos we want to count
     *   }
     * })
    **/
    count<T extends permisosCountArgs>(
      args?: Subset<T, permisosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermisosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permisos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermisosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermisosAggregateArgs>(args: Subset<T, PermisosAggregateArgs>): Prisma.PrismaPromise<GetPermisosAggregateType<T>>

    /**
     * Group by Permisos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permisosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends permisosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: permisosGroupByArgs['orderBy'] }
        : { orderBy?: permisosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, permisosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermisosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the permisos model
   */
  readonly fields: permisosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for permisos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__permisosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the permisos model
   */ 
  interface permisosFieldRefs {
    readonly ID: FieldRef<"permisos", 'Int'>
    readonly Permission: FieldRef<"permisos", 'String'>
    readonly Description: FieldRef<"permisos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * permisos findUnique
   */
  export type permisosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permisos
     */
    select?: permisosSelect<ExtArgs> | null
    /**
     * Filter, which permisos to fetch.
     */
    where: permisosWhereUniqueInput
  }

  /**
   * permisos findUniqueOrThrow
   */
  export type permisosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permisos
     */
    select?: permisosSelect<ExtArgs> | null
    /**
     * Filter, which permisos to fetch.
     */
    where: permisosWhereUniqueInput
  }

  /**
   * permisos findFirst
   */
  export type permisosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permisos
     */
    select?: permisosSelect<ExtArgs> | null
    /**
     * Filter, which permisos to fetch.
     */
    where?: permisosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permisos to fetch.
     */
    orderBy?: permisosOrderByWithRelationInput | permisosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permisos.
     */
    cursor?: permisosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permisos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permisos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permisos.
     */
    distinct?: PermisosScalarFieldEnum | PermisosScalarFieldEnum[]
  }

  /**
   * permisos findFirstOrThrow
   */
  export type permisosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permisos
     */
    select?: permisosSelect<ExtArgs> | null
    /**
     * Filter, which permisos to fetch.
     */
    where?: permisosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permisos to fetch.
     */
    orderBy?: permisosOrderByWithRelationInput | permisosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permisos.
     */
    cursor?: permisosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permisos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permisos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permisos.
     */
    distinct?: PermisosScalarFieldEnum | PermisosScalarFieldEnum[]
  }

  /**
   * permisos findMany
   */
  export type permisosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permisos
     */
    select?: permisosSelect<ExtArgs> | null
    /**
     * Filter, which permisos to fetch.
     */
    where?: permisosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permisos to fetch.
     */
    orderBy?: permisosOrderByWithRelationInput | permisosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing permisos.
     */
    cursor?: permisosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permisos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permisos.
     */
    skip?: number
    distinct?: PermisosScalarFieldEnum | PermisosScalarFieldEnum[]
  }

  /**
   * permisos create
   */
  export type permisosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permisos
     */
    select?: permisosSelect<ExtArgs> | null
    /**
     * The data needed to create a permisos.
     */
    data: XOR<permisosCreateInput, permisosUncheckedCreateInput>
  }

  /**
   * permisos createMany
   */
  export type permisosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many permisos.
     */
    data: permisosCreateManyInput | permisosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * permisos update
   */
  export type permisosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permisos
     */
    select?: permisosSelect<ExtArgs> | null
    /**
     * The data needed to update a permisos.
     */
    data: XOR<permisosUpdateInput, permisosUncheckedUpdateInput>
    /**
     * Choose, which permisos to update.
     */
    where: permisosWhereUniqueInput
  }

  /**
   * permisos updateMany
   */
  export type permisosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update permisos.
     */
    data: XOR<permisosUpdateManyMutationInput, permisosUncheckedUpdateManyInput>
    /**
     * Filter which permisos to update
     */
    where?: permisosWhereInput
  }

  /**
   * permisos upsert
   */
  export type permisosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permisos
     */
    select?: permisosSelect<ExtArgs> | null
    /**
     * The filter to search for the permisos to update in case it exists.
     */
    where: permisosWhereUniqueInput
    /**
     * In case the permisos found by the `where` argument doesn't exist, create a new permisos with this data.
     */
    create: XOR<permisosCreateInput, permisosUncheckedCreateInput>
    /**
     * In case the permisos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<permisosUpdateInput, permisosUncheckedUpdateInput>
  }

  /**
   * permisos delete
   */
  export type permisosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permisos
     */
    select?: permisosSelect<ExtArgs> | null
    /**
     * Filter which permisos to delete.
     */
    where: permisosWhereUniqueInput
  }

  /**
   * permisos deleteMany
   */
  export type permisosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permisos to delete
     */
    where?: permisosWhereInput
  }

  /**
   * permisos without action
   */
  export type permisosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permisos
     */
    select?: permisosSelect<ExtArgs> | null
  }


  /**
   * Model usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    Id: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    Id: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    Id: number | null
    Email: string | null
    Password: string | null
    IsAdministrator: boolean | null
    IsDoctor: boolean | null
    IsEmployee: boolean | null
  }

  export type UsuariosMaxAggregateOutputType = {
    Id: number | null
    Email: string | null
    Password: string | null
    IsAdministrator: boolean | null
    IsDoctor: boolean | null
    IsEmployee: boolean | null
  }

  export type UsuariosCountAggregateOutputType = {
    Id: number
    Email: number
    Password: number
    IsAdministrator: number
    IsDoctor: number
    IsEmployee: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    Id?: true
  }

  export type UsuariosSumAggregateInputType = {
    Id?: true
  }

  export type UsuariosMinAggregateInputType = {
    Id?: true
    Email?: true
    Password?: true
    IsAdministrator?: true
    IsDoctor?: true
    IsEmployee?: true
  }

  export type UsuariosMaxAggregateInputType = {
    Id?: true
    Email?: true
    Password?: true
    IsAdministrator?: true
    IsDoctor?: true
    IsEmployee?: true
  }

  export type UsuariosCountAggregateInputType = {
    Id?: true
    Email?: true
    Password?: true
    IsAdministrator?: true
    IsDoctor?: true
    IsEmployee?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to aggregate.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type usuariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuariosWhereInput
    orderBy?: usuariosOrderByWithAggregationInput | usuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    Id: number
    Email: string
    Password: string
    IsAdministrator: boolean
    IsDoctor: boolean
    IsEmployee: boolean
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends usuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    Email?: boolean
    Password?: boolean
    IsAdministrator?: boolean
    IsDoctor?: boolean
    IsEmployee?: boolean
  }, ExtArgs["result"]["usuarios"]>


  export type usuariosSelectScalar = {
    Id?: boolean
    Email?: boolean
    Password?: boolean
    IsAdministrator?: boolean
    IsDoctor?: boolean
    IsEmployee?: boolean
  }


  export type $usuariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuarios"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Id: number
      Email: string
      Password: string
      IsAdministrator: boolean
      IsDoctor: boolean
      IsEmployee: boolean
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }

  type usuariosGetPayload<S extends boolean | null | undefined | usuariosDefaultArgs> = $Result.GetResult<Prisma.$usuariosPayload, S>

  type usuariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuariosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface usuariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuarios'], meta: { name: 'usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usuariosFindUniqueArgs>(args: SelectSubset<T, usuariosFindUniqueArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuarios that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs>(args: SelectSubset<T, usuariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usuariosFindFirstArgs>(args?: SelectSubset<T, usuariosFindFirstArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs>(args?: SelectSubset<T, usuariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends usuariosFindManyArgs>(args?: SelectSubset<T, usuariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
     */
    create<T extends usuariosCreateArgs>(args: SelectSubset<T, usuariosCreateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usuariosCreateManyArgs>(args?: SelectSubset<T, usuariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
     */
    delete<T extends usuariosDeleteArgs>(args: SelectSubset<T, usuariosDeleteArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usuariosUpdateArgs>(args: SelectSubset<T, usuariosUpdateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usuariosDeleteManyArgs>(args?: SelectSubset<T, usuariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usuariosUpdateManyArgs>(args: SelectSubset<T, usuariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
     */
    upsert<T extends usuariosUpsertArgs>(args: SelectSubset<T, usuariosUpsertArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuariosGroupByArgs['orderBy'] }
        : { orderBy?: usuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuarios model
   */
  readonly fields: usuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the usuarios model
   */ 
  interface usuariosFieldRefs {
    readonly Id: FieldRef<"usuarios", 'Int'>
    readonly Email: FieldRef<"usuarios", 'String'>
    readonly Password: FieldRef<"usuarios", 'String'>
    readonly IsAdministrator: FieldRef<"usuarios", 'Boolean'>
    readonly IsDoctor: FieldRef<"usuarios", 'Boolean'>
    readonly IsEmployee: FieldRef<"usuarios", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * usuarios findUnique
   */
  export type usuariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findFirst
   */
  export type usuariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios create
   */
  export type usuariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * The data needed to create a usuarios.
     */
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }

  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuarios update
   */
  export type usuariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * The data needed to update a usuarios.
     */
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
  }

  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     */
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     */
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }

  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter which usuarios to delete.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuariosWhereInput
  }

  /**
   * usuarios without action
   */
  export type usuariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
  }


  /**
   * Model servicios
   */

  export type AggregateServicios = {
    _count: ServiciosCountAggregateOutputType | null
    _avg: ServiciosAvgAggregateOutputType | null
    _sum: ServiciosSumAggregateOutputType | null
    _min: ServiciosMinAggregateOutputType | null
    _max: ServiciosMaxAggregateOutputType | null
  }

  export type ServiciosAvgAggregateOutputType = {
    Id: number | null
    Price: Decimal | null
  }

  export type ServiciosSumAggregateOutputType = {
    Id: number | null
    Price: Decimal | null
  }

  export type ServiciosMinAggregateOutputType = {
    Id: number | null
    Service_Name: string | null
    Price: Decimal | null
  }

  export type ServiciosMaxAggregateOutputType = {
    Id: number | null
    Service_Name: string | null
    Price: Decimal | null
  }

  export type ServiciosCountAggregateOutputType = {
    Id: number
    Service_Name: number
    Price: number
    _all: number
  }


  export type ServiciosAvgAggregateInputType = {
    Id?: true
    Price?: true
  }

  export type ServiciosSumAggregateInputType = {
    Id?: true
    Price?: true
  }

  export type ServiciosMinAggregateInputType = {
    Id?: true
    Service_Name?: true
    Price?: true
  }

  export type ServiciosMaxAggregateInputType = {
    Id?: true
    Service_Name?: true
    Price?: true
  }

  export type ServiciosCountAggregateInputType = {
    Id?: true
    Service_Name?: true
    Price?: true
    _all?: true
  }

  export type ServiciosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which servicios to aggregate.
     */
    where?: serviciosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of servicios to fetch.
     */
    orderBy?: serviciosOrderByWithRelationInput | serviciosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: serviciosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned servicios
    **/
    _count?: true | ServiciosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiciosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiciosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiciosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiciosMaxAggregateInputType
  }

  export type GetServiciosAggregateType<T extends ServiciosAggregateArgs> = {
        [P in keyof T & keyof AggregateServicios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServicios[P]>
      : GetScalarType<T[P], AggregateServicios[P]>
  }




  export type serviciosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviciosWhereInput
    orderBy?: serviciosOrderByWithAggregationInput | serviciosOrderByWithAggregationInput[]
    by: ServiciosScalarFieldEnum[] | ServiciosScalarFieldEnum
    having?: serviciosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiciosCountAggregateInputType | true
    _avg?: ServiciosAvgAggregateInputType
    _sum?: ServiciosSumAggregateInputType
    _min?: ServiciosMinAggregateInputType
    _max?: ServiciosMaxAggregateInputType
  }

  export type ServiciosGroupByOutputType = {
    Id: number
    Service_Name: string
    Price: Decimal
    _count: ServiciosCountAggregateOutputType | null
    _avg: ServiciosAvgAggregateOutputType | null
    _sum: ServiciosSumAggregateOutputType | null
    _min: ServiciosMinAggregateOutputType | null
    _max: ServiciosMaxAggregateOutputType | null
  }

  type GetServiciosGroupByPayload<T extends serviciosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiciosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiciosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiciosGroupByOutputType[P]>
            : GetScalarType<T[P], ServiciosGroupByOutputType[P]>
        }
      >
    >


  export type serviciosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    Service_Name?: boolean
    Price?: boolean
  }, ExtArgs["result"]["servicios"]>


  export type serviciosSelectScalar = {
    Id?: boolean
    Service_Name?: boolean
    Price?: boolean
  }


  export type $serviciosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "servicios"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Id: number
      Service_Name: string
      Price: Prisma.Decimal
    }, ExtArgs["result"]["servicios"]>
    composites: {}
  }

  type serviciosGetPayload<S extends boolean | null | undefined | serviciosDefaultArgs> = $Result.GetResult<Prisma.$serviciosPayload, S>

  type serviciosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<serviciosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServiciosCountAggregateInputType | true
    }

  export interface serviciosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['servicios'], meta: { name: 'servicios' } }
    /**
     * Find zero or one Servicios that matches the filter.
     * @param {serviciosFindUniqueArgs} args - Arguments to find a Servicios
     * @example
     * // Get one Servicios
     * const servicios = await prisma.servicios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends serviciosFindUniqueArgs>(args: SelectSubset<T, serviciosFindUniqueArgs<ExtArgs>>): Prisma__serviciosClient<$Result.GetResult<Prisma.$serviciosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Servicios that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {serviciosFindUniqueOrThrowArgs} args - Arguments to find a Servicios
     * @example
     * // Get one Servicios
     * const servicios = await prisma.servicios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends serviciosFindUniqueOrThrowArgs>(args: SelectSubset<T, serviciosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__serviciosClient<$Result.GetResult<Prisma.$serviciosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Servicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviciosFindFirstArgs} args - Arguments to find a Servicios
     * @example
     * // Get one Servicios
     * const servicios = await prisma.servicios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends serviciosFindFirstArgs>(args?: SelectSubset<T, serviciosFindFirstArgs<ExtArgs>>): Prisma__serviciosClient<$Result.GetResult<Prisma.$serviciosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Servicios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviciosFindFirstOrThrowArgs} args - Arguments to find a Servicios
     * @example
     * // Get one Servicios
     * const servicios = await prisma.servicios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends serviciosFindFirstOrThrowArgs>(args?: SelectSubset<T, serviciosFindFirstOrThrowArgs<ExtArgs>>): Prisma__serviciosClient<$Result.GetResult<Prisma.$serviciosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Servicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviciosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servicios
     * const servicios = await prisma.servicios.findMany()
     * 
     * // Get first 10 Servicios
     * const servicios = await prisma.servicios.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const serviciosWithIdOnly = await prisma.servicios.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends serviciosFindManyArgs>(args?: SelectSubset<T, serviciosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$serviciosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Servicios.
     * @param {serviciosCreateArgs} args - Arguments to create a Servicios.
     * @example
     * // Create one Servicios
     * const Servicios = await prisma.servicios.create({
     *   data: {
     *     // ... data to create a Servicios
     *   }
     * })
     * 
     */
    create<T extends serviciosCreateArgs>(args: SelectSubset<T, serviciosCreateArgs<ExtArgs>>): Prisma__serviciosClient<$Result.GetResult<Prisma.$serviciosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Servicios.
     * @param {serviciosCreateManyArgs} args - Arguments to create many Servicios.
     * @example
     * // Create many Servicios
     * const servicios = await prisma.servicios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends serviciosCreateManyArgs>(args?: SelectSubset<T, serviciosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Servicios.
     * @param {serviciosDeleteArgs} args - Arguments to delete one Servicios.
     * @example
     * // Delete one Servicios
     * const Servicios = await prisma.servicios.delete({
     *   where: {
     *     // ... filter to delete one Servicios
     *   }
     * })
     * 
     */
    delete<T extends serviciosDeleteArgs>(args: SelectSubset<T, serviciosDeleteArgs<ExtArgs>>): Prisma__serviciosClient<$Result.GetResult<Prisma.$serviciosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Servicios.
     * @param {serviciosUpdateArgs} args - Arguments to update one Servicios.
     * @example
     * // Update one Servicios
     * const servicios = await prisma.servicios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends serviciosUpdateArgs>(args: SelectSubset<T, serviciosUpdateArgs<ExtArgs>>): Prisma__serviciosClient<$Result.GetResult<Prisma.$serviciosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Servicios.
     * @param {serviciosDeleteManyArgs} args - Arguments to filter Servicios to delete.
     * @example
     * // Delete a few Servicios
     * const { count } = await prisma.servicios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends serviciosDeleteManyArgs>(args?: SelectSubset<T, serviciosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviciosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servicios
     * const servicios = await prisma.servicios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends serviciosUpdateManyArgs>(args: SelectSubset<T, serviciosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Servicios.
     * @param {serviciosUpsertArgs} args - Arguments to update or create a Servicios.
     * @example
     * // Update or create a Servicios
     * const servicios = await prisma.servicios.upsert({
     *   create: {
     *     // ... data to create a Servicios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servicios we want to update
     *   }
     * })
     */
    upsert<T extends serviciosUpsertArgs>(args: SelectSubset<T, serviciosUpsertArgs<ExtArgs>>): Prisma__serviciosClient<$Result.GetResult<Prisma.$serviciosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviciosCountArgs} args - Arguments to filter Servicios to count.
     * @example
     * // Count the number of Servicios
     * const count = await prisma.servicios.count({
     *   where: {
     *     // ... the filter for the Servicios we want to count
     *   }
     * })
    **/
    count<T extends serviciosCountArgs>(
      args?: Subset<T, serviciosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiciosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiciosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiciosAggregateArgs>(args: Subset<T, ServiciosAggregateArgs>): Prisma.PrismaPromise<GetServiciosAggregateType<T>>

    /**
     * Group by Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviciosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends serviciosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: serviciosGroupByArgs['orderBy'] }
        : { orderBy?: serviciosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, serviciosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiciosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the servicios model
   */
  readonly fields: serviciosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for servicios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__serviciosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the servicios model
   */ 
  interface serviciosFieldRefs {
    readonly Id: FieldRef<"servicios", 'Int'>
    readonly Service_Name: FieldRef<"servicios", 'String'>
    readonly Price: FieldRef<"servicios", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * servicios findUnique
   */
  export type serviciosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the servicios
     */
    select?: serviciosSelect<ExtArgs> | null
    /**
     * Filter, which servicios to fetch.
     */
    where: serviciosWhereUniqueInput
  }

  /**
   * servicios findUniqueOrThrow
   */
  export type serviciosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the servicios
     */
    select?: serviciosSelect<ExtArgs> | null
    /**
     * Filter, which servicios to fetch.
     */
    where: serviciosWhereUniqueInput
  }

  /**
   * servicios findFirst
   */
  export type serviciosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the servicios
     */
    select?: serviciosSelect<ExtArgs> | null
    /**
     * Filter, which servicios to fetch.
     */
    where?: serviciosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of servicios to fetch.
     */
    orderBy?: serviciosOrderByWithRelationInput | serviciosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for servicios.
     */
    cursor?: serviciosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of servicios.
     */
    distinct?: ServiciosScalarFieldEnum | ServiciosScalarFieldEnum[]
  }

  /**
   * servicios findFirstOrThrow
   */
  export type serviciosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the servicios
     */
    select?: serviciosSelect<ExtArgs> | null
    /**
     * Filter, which servicios to fetch.
     */
    where?: serviciosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of servicios to fetch.
     */
    orderBy?: serviciosOrderByWithRelationInput | serviciosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for servicios.
     */
    cursor?: serviciosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of servicios.
     */
    distinct?: ServiciosScalarFieldEnum | ServiciosScalarFieldEnum[]
  }

  /**
   * servicios findMany
   */
  export type serviciosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the servicios
     */
    select?: serviciosSelect<ExtArgs> | null
    /**
     * Filter, which servicios to fetch.
     */
    where?: serviciosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of servicios to fetch.
     */
    orderBy?: serviciosOrderByWithRelationInput | serviciosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing servicios.
     */
    cursor?: serviciosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` servicios.
     */
    skip?: number
    distinct?: ServiciosScalarFieldEnum | ServiciosScalarFieldEnum[]
  }

  /**
   * servicios create
   */
  export type serviciosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the servicios
     */
    select?: serviciosSelect<ExtArgs> | null
    /**
     * The data needed to create a servicios.
     */
    data: XOR<serviciosCreateInput, serviciosUncheckedCreateInput>
  }

  /**
   * servicios createMany
   */
  export type serviciosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many servicios.
     */
    data: serviciosCreateManyInput | serviciosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * servicios update
   */
  export type serviciosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the servicios
     */
    select?: serviciosSelect<ExtArgs> | null
    /**
     * The data needed to update a servicios.
     */
    data: XOR<serviciosUpdateInput, serviciosUncheckedUpdateInput>
    /**
     * Choose, which servicios to update.
     */
    where: serviciosWhereUniqueInput
  }

  /**
   * servicios updateMany
   */
  export type serviciosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update servicios.
     */
    data: XOR<serviciosUpdateManyMutationInput, serviciosUncheckedUpdateManyInput>
    /**
     * Filter which servicios to update
     */
    where?: serviciosWhereInput
  }

  /**
   * servicios upsert
   */
  export type serviciosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the servicios
     */
    select?: serviciosSelect<ExtArgs> | null
    /**
     * The filter to search for the servicios to update in case it exists.
     */
    where: serviciosWhereUniqueInput
    /**
     * In case the servicios found by the `where` argument doesn't exist, create a new servicios with this data.
     */
    create: XOR<serviciosCreateInput, serviciosUncheckedCreateInput>
    /**
     * In case the servicios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<serviciosUpdateInput, serviciosUncheckedUpdateInput>
  }

  /**
   * servicios delete
   */
  export type serviciosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the servicios
     */
    select?: serviciosSelect<ExtArgs> | null
    /**
     * Filter which servicios to delete.
     */
    where: serviciosWhereUniqueInput
  }

  /**
   * servicios deleteMany
   */
  export type serviciosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which servicios to delete
     */
    where?: serviciosWhereInput
  }

  /**
   * servicios without action
   */
  export type serviciosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the servicios
     */
    select?: serviciosSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Antecedentes_no_patologicosScalarFieldEnum: {
    PatientId: 'PatientId',
    Smoking: 'Smoking',
    SubstanceAbuse: 'SubstanceAbuse',
    Alcoholism: 'Alcoholism',
    Sedentary: 'Sedentary',
    Surgeries: 'Surgeries',
    Exercise: 'Exercise'
  };

  export type Antecedentes_no_patologicosScalarFieldEnum = (typeof Antecedentes_no_patologicosScalarFieldEnum)[keyof typeof Antecedentes_no_patologicosScalarFieldEnum]


  export const Antecedentes_patologicosScalarFieldEnum: {
    id: 'id',
    PatientId: 'PatientId',
    Disease: 'Disease',
    DiagnosisDate: 'DiagnosisDate',
    DiseaseType: 'DiseaseType',
    Chronic: 'Chronic',
    Treatment: 'Treatment',
    Observations: 'Observations'
  };

  export type Antecedentes_patologicosScalarFieldEnum = (typeof Antecedentes_patologicosScalarFieldEnum)[keyof typeof Antecedentes_patologicosScalarFieldEnum]


  export const BitacoraScalarFieldEnum: {
    LogId: 'LogId',
    DateTime: 'DateTime',
    User: 'User',
    Action: 'Action',
    Tabla: 'Tabla',
    RecordId: 'RecordId',
    Description: 'Description'
  };

  export type BitacoraScalarFieldEnum = (typeof BitacoraScalarFieldEnum)[keyof typeof BitacoraScalarFieldEnum]


  export const ClientesScalarFieldEnum: {
    id: 'id',
    Name: 'Name',
    LastName: 'LastName',
    SEX: 'SEX',
    Age: 'Age',
    BirthDate: 'BirthDate',
    Address: 'Address',
    Phone: 'Phone',
    CURP: 'CURP',
    Email: 'Email',
    BloodType: 'BloodType',
    Occupation: 'Occupation',
    Education: 'Education'
  };

  export type ClientesScalarFieldEnum = (typeof ClientesScalarFieldEnum)[keyof typeof ClientesScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    id: 'id',
    Name: 'Name',
    LastName: 'LastName',
    Age: 'Age',
    BirthDate: 'BirthDate',
    Gender: 'Gender',
    Specialty: 'Specialty',
    Address: 'Address',
    Cellphone: 'Cellphone',
    CURP: 'CURP',
    LicenseNumber: 'LicenseNumber',
    Sex: 'Sex',
    MedicalLicense: 'MedicalLicense',
    Email: 'Email',
    HireDate: 'HireDate'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const EmpleadoScalarFieldEnum: {
    id: 'id',
    Name: 'Name',
    LastName: 'LastName',
    BirthDate: 'BirthDate',
    Gender: 'Gender',
    Cellphone: 'Cellphone',
    Email: 'Email',
    Address: 'Address',
    Position: 'Position',
    CURP: 'CURP',
    RFC: 'RFC',
    Salary: 'Salary',
    HireDate: 'HireDate'
  };

  export type EmpleadoScalarFieldEnum = (typeof EmpleadoScalarFieldEnum)[keyof typeof EmpleadoScalarFieldEnum]


  export const EnfermedadesScalarFieldEnum: {
    DiseaseId: 'DiseaseId',
    DiseaseType: 'DiseaseType',
    Other: 'Other',
    Causes: 'Causes',
    Symptoms: 'Symptoms',
    Treatment: 'Treatment'
  };

  export type EnfermedadesScalarFieldEnum = (typeof EnfermedadesScalarFieldEnum)[keyof typeof EnfermedadesScalarFieldEnum]


  export const Examen_clinico_intraoralScalarFieldEnum: {
    PatientId: 'PatientId',
    ExaminationDate: 'ExaminationDate',
    Gums: 'Gums',
    Tongue: 'Tongue',
    HardPalate: 'HardPalate',
    SoftPalate: 'SoftPalate',
    Pharynx: 'Pharynx',
    FloorOfMouth: 'FloorOfMouth',
    ResidualRidge: 'ResidualRidge',
    OcclusionType: 'OcclusionType',
    Observations: 'Observations'
  };

  export type Examen_clinico_intraoralScalarFieldEnum = (typeof Examen_clinico_intraoralScalarFieldEnum)[keyof typeof Examen_clinico_intraoralScalarFieldEnum]


  export const Historial_clinicoScalarFieldEnum: {
    HistoryId: 'HistoryId',
    ClientId: 'ClientId',
    DentistId: 'DentistId',
    ConsultationDate: 'ConsultationDate',
    ClinicalData: 'ClinicalData'
  };

  export type Historial_clinicoScalarFieldEnum = (typeof Historial_clinicoScalarFieldEnum)[keyof typeof Historial_clinicoScalarFieldEnum]


  export const PermisosScalarFieldEnum: {
    ID: 'ID',
    Permission: 'Permission',
    Description: 'Description'
  };

  export type PermisosScalarFieldEnum = (typeof PermisosScalarFieldEnum)[keyof typeof PermisosScalarFieldEnum]


  export const UsuariosScalarFieldEnum: {
    Id: 'Id',
    Email: 'Email',
    Password: 'Password',
    IsAdministrator: 'IsAdministrator',
    IsDoctor: 'IsDoctor',
    IsEmployee: 'IsEmployee'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const ServiciosScalarFieldEnum: {
    Id: 'Id',
    Service_Name: 'Service_Name',
    Price: 'Price'
  };

  export type ServiciosScalarFieldEnum = (typeof ServiciosScalarFieldEnum)[keyof typeof ServiciosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'antecedentes_no_patologicos_Smoking'
   */
  export type Enumantecedentes_no_patologicos_SmokingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'antecedentes_no_patologicos_Smoking'>
    


  /**
   * Reference to a field of type 'antecedentes_no_patologicos_SubstanceAbuse'
   */
  export type Enumantecedentes_no_patologicos_SubstanceAbuseFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'antecedentes_no_patologicos_SubstanceAbuse'>
    


  /**
   * Reference to a field of type 'antecedentes_no_patologicos_Alcoholism'
   */
  export type Enumantecedentes_no_patologicos_AlcoholismFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'antecedentes_no_patologicos_Alcoholism'>
    


  /**
   * Reference to a field of type 'antecedentes_no_patologicos_Sedentary'
   */
  export type Enumantecedentes_no_patologicos_SedentaryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'antecedentes_no_patologicos_Sedentary'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'antecedentes_patologicos_DiseaseType'
   */
  export type Enumantecedentes_patologicos_DiseaseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'antecedentes_patologicos_DiseaseType'>
    


  /**
   * Reference to a field of type 'antecedentes_patologicos_Chronic'
   */
  export type Enumantecedentes_patologicos_ChronicFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'antecedentes_patologicos_Chronic'>
    


  /**
   * Reference to a field of type 'doctor_Gender'
   */
  export type Enumdoctor_GenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'doctor_Gender'>
    


  /**
   * Reference to a field of type 'empleado_Gender'
   */
  export type Enumempleado_GenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'empleado_Gender'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'enfermedades_DiseaseType'
   */
  export type Enumenfermedades_DiseaseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'enfermedades_DiseaseType'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type antecedentes_no_patologicosWhereInput = {
    AND?: antecedentes_no_patologicosWhereInput | antecedentes_no_patologicosWhereInput[]
    OR?: antecedentes_no_patologicosWhereInput[]
    NOT?: antecedentes_no_patologicosWhereInput | antecedentes_no_patologicosWhereInput[]
    PatientId?: IntFilter<"antecedentes_no_patologicos"> | number
    Smoking?: Enumantecedentes_no_patologicos_SmokingFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse?: Enumantecedentes_no_patologicos_SubstanceAbuseFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism?: Enumantecedentes_no_patologicos_AlcoholismFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary?: Enumantecedentes_no_patologicos_SedentaryFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries?: StringNullableFilter<"antecedentes_no_patologicos"> | string | null
    Exercise?: StringNullableFilter<"antecedentes_no_patologicos"> | string | null
  }

  export type antecedentes_no_patologicosOrderByWithRelationInput = {
    PatientId?: SortOrder
    Smoking?: SortOrder
    SubstanceAbuse?: SortOrder
    Alcoholism?: SortOrder
    Sedentary?: SortOrder
    Surgeries?: SortOrderInput | SortOrder
    Exercise?: SortOrderInput | SortOrder
  }

  export type antecedentes_no_patologicosWhereUniqueInput = Prisma.AtLeast<{
    PatientId?: number
    AND?: antecedentes_no_patologicosWhereInput | antecedentes_no_patologicosWhereInput[]
    OR?: antecedentes_no_patologicosWhereInput[]
    NOT?: antecedentes_no_patologicosWhereInput | antecedentes_no_patologicosWhereInput[]
    Smoking?: Enumantecedentes_no_patologicos_SmokingFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse?: Enumantecedentes_no_patologicos_SubstanceAbuseFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism?: Enumantecedentes_no_patologicos_AlcoholismFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary?: Enumantecedentes_no_patologicos_SedentaryFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries?: StringNullableFilter<"antecedentes_no_patologicos"> | string | null
    Exercise?: StringNullableFilter<"antecedentes_no_patologicos"> | string | null
  }, "PatientId">

  export type antecedentes_no_patologicosOrderByWithAggregationInput = {
    PatientId?: SortOrder
    Smoking?: SortOrder
    SubstanceAbuse?: SortOrder
    Alcoholism?: SortOrder
    Sedentary?: SortOrder
    Surgeries?: SortOrderInput | SortOrder
    Exercise?: SortOrderInput | SortOrder
    _count?: antecedentes_no_patologicosCountOrderByAggregateInput
    _avg?: antecedentes_no_patologicosAvgOrderByAggregateInput
    _max?: antecedentes_no_patologicosMaxOrderByAggregateInput
    _min?: antecedentes_no_patologicosMinOrderByAggregateInput
    _sum?: antecedentes_no_patologicosSumOrderByAggregateInput
  }

  export type antecedentes_no_patologicosScalarWhereWithAggregatesInput = {
    AND?: antecedentes_no_patologicosScalarWhereWithAggregatesInput | antecedentes_no_patologicosScalarWhereWithAggregatesInput[]
    OR?: antecedentes_no_patologicosScalarWhereWithAggregatesInput[]
    NOT?: antecedentes_no_patologicosScalarWhereWithAggregatesInput | antecedentes_no_patologicosScalarWhereWithAggregatesInput[]
    PatientId?: IntWithAggregatesFilter<"antecedentes_no_patologicos"> | number
    Smoking?: Enumantecedentes_no_patologicos_SmokingWithAggregatesFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse?: Enumantecedentes_no_patologicos_SubstanceAbuseWithAggregatesFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism?: Enumantecedentes_no_patologicos_AlcoholismWithAggregatesFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary?: Enumantecedentes_no_patologicos_SedentaryWithAggregatesFilter<"antecedentes_no_patologicos"> | $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries?: StringNullableWithAggregatesFilter<"antecedentes_no_patologicos"> | string | null
    Exercise?: StringNullableWithAggregatesFilter<"antecedentes_no_patologicos"> | string | null
  }

  export type antecedentes_patologicosWhereInput = {
    AND?: antecedentes_patologicosWhereInput | antecedentes_patologicosWhereInput[]
    OR?: antecedentes_patologicosWhereInput[]
    NOT?: antecedentes_patologicosWhereInput | antecedentes_patologicosWhereInput[]
    id?: IntFilter<"antecedentes_patologicos"> | number
    PatientId?: IntNullableFilter<"antecedentes_patologicos"> | number | null
    Disease?: StringFilter<"antecedentes_patologicos"> | string
    DiagnosisDate?: DateTimeFilter<"antecedentes_patologicos"> | Date | string
    DiseaseType?: Enumantecedentes_patologicos_DiseaseTypeFilter<"antecedentes_patologicos"> | $Enums.antecedentes_patologicos_DiseaseType
    Chronic?: Enumantecedentes_patologicos_ChronicFilter<"antecedentes_patologicos"> | $Enums.antecedentes_patologicos_Chronic
    Treatment?: StringNullableFilter<"antecedentes_patologicos"> | string | null
    Observations?: StringNullableFilter<"antecedentes_patologicos"> | string | null
  }

  export type antecedentes_patologicosOrderByWithRelationInput = {
    id?: SortOrder
    PatientId?: SortOrderInput | SortOrder
    Disease?: SortOrder
    DiagnosisDate?: SortOrder
    DiseaseType?: SortOrder
    Chronic?: SortOrder
    Treatment?: SortOrderInput | SortOrder
    Observations?: SortOrderInput | SortOrder
  }

  export type antecedentes_patologicosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: antecedentes_patologicosWhereInput | antecedentes_patologicosWhereInput[]
    OR?: antecedentes_patologicosWhereInput[]
    NOT?: antecedentes_patologicosWhereInput | antecedentes_patologicosWhereInput[]
    PatientId?: IntNullableFilter<"antecedentes_patologicos"> | number | null
    Disease?: StringFilter<"antecedentes_patologicos"> | string
    DiagnosisDate?: DateTimeFilter<"antecedentes_patologicos"> | Date | string
    DiseaseType?: Enumantecedentes_patologicos_DiseaseTypeFilter<"antecedentes_patologicos"> | $Enums.antecedentes_patologicos_DiseaseType
    Chronic?: Enumantecedentes_patologicos_ChronicFilter<"antecedentes_patologicos"> | $Enums.antecedentes_patologicos_Chronic
    Treatment?: StringNullableFilter<"antecedentes_patologicos"> | string | null
    Observations?: StringNullableFilter<"antecedentes_patologicos"> | string | null
  }, "id">

  export type antecedentes_patologicosOrderByWithAggregationInput = {
    id?: SortOrder
    PatientId?: SortOrderInput | SortOrder
    Disease?: SortOrder
    DiagnosisDate?: SortOrder
    DiseaseType?: SortOrder
    Chronic?: SortOrder
    Treatment?: SortOrderInput | SortOrder
    Observations?: SortOrderInput | SortOrder
    _count?: antecedentes_patologicosCountOrderByAggregateInput
    _avg?: antecedentes_patologicosAvgOrderByAggregateInput
    _max?: antecedentes_patologicosMaxOrderByAggregateInput
    _min?: antecedentes_patologicosMinOrderByAggregateInput
    _sum?: antecedentes_patologicosSumOrderByAggregateInput
  }

  export type antecedentes_patologicosScalarWhereWithAggregatesInput = {
    AND?: antecedentes_patologicosScalarWhereWithAggregatesInput | antecedentes_patologicosScalarWhereWithAggregatesInput[]
    OR?: antecedentes_patologicosScalarWhereWithAggregatesInput[]
    NOT?: antecedentes_patologicosScalarWhereWithAggregatesInput | antecedentes_patologicosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"antecedentes_patologicos"> | number
    PatientId?: IntNullableWithAggregatesFilter<"antecedentes_patologicos"> | number | null
    Disease?: StringWithAggregatesFilter<"antecedentes_patologicos"> | string
    DiagnosisDate?: DateTimeWithAggregatesFilter<"antecedentes_patologicos"> | Date | string
    DiseaseType?: Enumantecedentes_patologicos_DiseaseTypeWithAggregatesFilter<"antecedentes_patologicos"> | $Enums.antecedentes_patologicos_DiseaseType
    Chronic?: Enumantecedentes_patologicos_ChronicWithAggregatesFilter<"antecedentes_patologicos"> | $Enums.antecedentes_patologicos_Chronic
    Treatment?: StringNullableWithAggregatesFilter<"antecedentes_patologicos"> | string | null
    Observations?: StringNullableWithAggregatesFilter<"antecedentes_patologicos"> | string | null
  }

  export type bitacoraWhereInput = {
    AND?: bitacoraWhereInput | bitacoraWhereInput[]
    OR?: bitacoraWhereInput[]
    NOT?: bitacoraWhereInput | bitacoraWhereInput[]
    LogId?: IntFilter<"bitacora"> | number
    DateTime?: DateTimeFilter<"bitacora"> | Date | string
    User?: StringFilter<"bitacora"> | string
    Action?: StringFilter<"bitacora"> | string
    Tabla?: StringNullableFilter<"bitacora"> | string | null
    RecordId?: IntNullableFilter<"bitacora"> | number | null
    Description?: StringNullableFilter<"bitacora"> | string | null
  }

  export type bitacoraOrderByWithRelationInput = {
    LogId?: SortOrder
    DateTime?: SortOrder
    User?: SortOrder
    Action?: SortOrder
    Tabla?: SortOrderInput | SortOrder
    RecordId?: SortOrderInput | SortOrder
    Description?: SortOrderInput | SortOrder
  }

  export type bitacoraWhereUniqueInput = Prisma.AtLeast<{
    LogId?: number
    AND?: bitacoraWhereInput | bitacoraWhereInput[]
    OR?: bitacoraWhereInput[]
    NOT?: bitacoraWhereInput | bitacoraWhereInput[]
    DateTime?: DateTimeFilter<"bitacora"> | Date | string
    User?: StringFilter<"bitacora"> | string
    Action?: StringFilter<"bitacora"> | string
    Tabla?: StringNullableFilter<"bitacora"> | string | null
    RecordId?: IntNullableFilter<"bitacora"> | number | null
    Description?: StringNullableFilter<"bitacora"> | string | null
  }, "LogId">

  export type bitacoraOrderByWithAggregationInput = {
    LogId?: SortOrder
    DateTime?: SortOrder
    User?: SortOrder
    Action?: SortOrder
    Tabla?: SortOrderInput | SortOrder
    RecordId?: SortOrderInput | SortOrder
    Description?: SortOrderInput | SortOrder
    _count?: bitacoraCountOrderByAggregateInput
    _avg?: bitacoraAvgOrderByAggregateInput
    _max?: bitacoraMaxOrderByAggregateInput
    _min?: bitacoraMinOrderByAggregateInput
    _sum?: bitacoraSumOrderByAggregateInput
  }

  export type bitacoraScalarWhereWithAggregatesInput = {
    AND?: bitacoraScalarWhereWithAggregatesInput | bitacoraScalarWhereWithAggregatesInput[]
    OR?: bitacoraScalarWhereWithAggregatesInput[]
    NOT?: bitacoraScalarWhereWithAggregatesInput | bitacoraScalarWhereWithAggregatesInput[]
    LogId?: IntWithAggregatesFilter<"bitacora"> | number
    DateTime?: DateTimeWithAggregatesFilter<"bitacora"> | Date | string
    User?: StringWithAggregatesFilter<"bitacora"> | string
    Action?: StringWithAggregatesFilter<"bitacora"> | string
    Tabla?: StringNullableWithAggregatesFilter<"bitacora"> | string | null
    RecordId?: IntNullableWithAggregatesFilter<"bitacora"> | number | null
    Description?: StringNullableWithAggregatesFilter<"bitacora"> | string | null
  }

  export type clientesWhereInput = {
    AND?: clientesWhereInput | clientesWhereInput[]
    OR?: clientesWhereInput[]
    NOT?: clientesWhereInput | clientesWhereInput[]
    id?: IntFilter<"clientes"> | number
    Name?: StringFilter<"clientes"> | string
    LastName?: StringFilter<"clientes"> | string
    SEX?: StringFilter<"clientes"> | string
    Age?: IntFilter<"clientes"> | number
    BirthDate?: DateTimeNullableFilter<"clientes"> | Date | string | null
    Address?: StringNullableFilter<"clientes"> | string | null
    Phone?: StringNullableFilter<"clientes"> | string | null
    CURP?: StringFilter<"clientes"> | string
    Email?: StringNullableFilter<"clientes"> | string | null
    BloodType?: StringFilter<"clientes"> | string
    Occupation?: StringFilter<"clientes"> | string
    Education?: StringFilter<"clientes"> | string
  }

  export type clientesOrderByWithRelationInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    SEX?: SortOrder
    Age?: SortOrder
    BirthDate?: SortOrderInput | SortOrder
    Address?: SortOrderInput | SortOrder
    Phone?: SortOrderInput | SortOrder
    CURP?: SortOrder
    Email?: SortOrderInput | SortOrder
    BloodType?: SortOrder
    Occupation?: SortOrder
    Education?: SortOrder
  }

  export type clientesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: clientesWhereInput | clientesWhereInput[]
    OR?: clientesWhereInput[]
    NOT?: clientesWhereInput | clientesWhereInput[]
    Name?: StringFilter<"clientes"> | string
    LastName?: StringFilter<"clientes"> | string
    SEX?: StringFilter<"clientes"> | string
    Age?: IntFilter<"clientes"> | number
    BirthDate?: DateTimeNullableFilter<"clientes"> | Date | string | null
    Address?: StringNullableFilter<"clientes"> | string | null
    Phone?: StringNullableFilter<"clientes"> | string | null
    CURP?: StringFilter<"clientes"> | string
    Email?: StringNullableFilter<"clientes"> | string | null
    BloodType?: StringFilter<"clientes"> | string
    Occupation?: StringFilter<"clientes"> | string
    Education?: StringFilter<"clientes"> | string
  }, "id">

  export type clientesOrderByWithAggregationInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    SEX?: SortOrder
    Age?: SortOrder
    BirthDate?: SortOrderInput | SortOrder
    Address?: SortOrderInput | SortOrder
    Phone?: SortOrderInput | SortOrder
    CURP?: SortOrder
    Email?: SortOrderInput | SortOrder
    BloodType?: SortOrder
    Occupation?: SortOrder
    Education?: SortOrder
    _count?: clientesCountOrderByAggregateInput
    _avg?: clientesAvgOrderByAggregateInput
    _max?: clientesMaxOrderByAggregateInput
    _min?: clientesMinOrderByAggregateInput
    _sum?: clientesSumOrderByAggregateInput
  }

  export type clientesScalarWhereWithAggregatesInput = {
    AND?: clientesScalarWhereWithAggregatesInput | clientesScalarWhereWithAggregatesInput[]
    OR?: clientesScalarWhereWithAggregatesInput[]
    NOT?: clientesScalarWhereWithAggregatesInput | clientesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"clientes"> | number
    Name?: StringWithAggregatesFilter<"clientes"> | string
    LastName?: StringWithAggregatesFilter<"clientes"> | string
    SEX?: StringWithAggregatesFilter<"clientes"> | string
    Age?: IntWithAggregatesFilter<"clientes"> | number
    BirthDate?: DateTimeNullableWithAggregatesFilter<"clientes"> | Date | string | null
    Address?: StringNullableWithAggregatesFilter<"clientes"> | string | null
    Phone?: StringNullableWithAggregatesFilter<"clientes"> | string | null
    CURP?: StringWithAggregatesFilter<"clientes"> | string
    Email?: StringNullableWithAggregatesFilter<"clientes"> | string | null
    BloodType?: StringWithAggregatesFilter<"clientes"> | string
    Occupation?: StringWithAggregatesFilter<"clientes"> | string
    Education?: StringWithAggregatesFilter<"clientes"> | string
  }

  export type doctorWhereInput = {
    AND?: doctorWhereInput | doctorWhereInput[]
    OR?: doctorWhereInput[]
    NOT?: doctorWhereInput | doctorWhereInput[]
    id?: IntFilter<"doctor"> | number
    Name?: StringFilter<"doctor"> | string
    LastName?: StringFilter<"doctor"> | string
    Age?: IntNullableFilter<"doctor"> | number | null
    BirthDate?: DateTimeNullableFilter<"doctor"> | Date | string | null
    Gender?: Enumdoctor_GenderNullableFilter<"doctor"> | $Enums.doctor_Gender | null
    Specialty?: StringNullableFilter<"doctor"> | string | null
    Address?: StringNullableFilter<"doctor"> | string | null
    Cellphone?: StringNullableFilter<"doctor"> | string | null
    CURP?: StringNullableFilter<"doctor"> | string | null
    LicenseNumber?: StringNullableFilter<"doctor"> | string | null
    Sex?: StringNullableFilter<"doctor"> | string | null
    MedicalLicense?: StringNullableFilter<"doctor"> | string | null
    Email?: StringFilter<"doctor"> | string
    HireDate?: DateTimeFilter<"doctor"> | Date | string
  }

  export type doctorOrderByWithRelationInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    Age?: SortOrderInput | SortOrder
    BirthDate?: SortOrderInput | SortOrder
    Gender?: SortOrderInput | SortOrder
    Specialty?: SortOrderInput | SortOrder
    Address?: SortOrderInput | SortOrder
    Cellphone?: SortOrderInput | SortOrder
    CURP?: SortOrderInput | SortOrder
    LicenseNumber?: SortOrderInput | SortOrder
    Sex?: SortOrderInput | SortOrder
    MedicalLicense?: SortOrderInput | SortOrder
    Email?: SortOrder
    HireDate?: SortOrder
  }

  export type doctorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    Email?: string
    AND?: doctorWhereInput | doctorWhereInput[]
    OR?: doctorWhereInput[]
    NOT?: doctorWhereInput | doctorWhereInput[]
    Name?: StringFilter<"doctor"> | string
    LastName?: StringFilter<"doctor"> | string
    Age?: IntNullableFilter<"doctor"> | number | null
    BirthDate?: DateTimeNullableFilter<"doctor"> | Date | string | null
    Gender?: Enumdoctor_GenderNullableFilter<"doctor"> | $Enums.doctor_Gender | null
    Specialty?: StringNullableFilter<"doctor"> | string | null
    Address?: StringNullableFilter<"doctor"> | string | null
    Cellphone?: StringNullableFilter<"doctor"> | string | null
    CURP?: StringNullableFilter<"doctor"> | string | null
    LicenseNumber?: StringNullableFilter<"doctor"> | string | null
    Sex?: StringNullableFilter<"doctor"> | string | null
    MedicalLicense?: StringNullableFilter<"doctor"> | string | null
    HireDate?: DateTimeFilter<"doctor"> | Date | string
  }, "id" | "Email">

  export type doctorOrderByWithAggregationInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    Age?: SortOrderInput | SortOrder
    BirthDate?: SortOrderInput | SortOrder
    Gender?: SortOrderInput | SortOrder
    Specialty?: SortOrderInput | SortOrder
    Address?: SortOrderInput | SortOrder
    Cellphone?: SortOrderInput | SortOrder
    CURP?: SortOrderInput | SortOrder
    LicenseNumber?: SortOrderInput | SortOrder
    Sex?: SortOrderInput | SortOrder
    MedicalLicense?: SortOrderInput | SortOrder
    Email?: SortOrder
    HireDate?: SortOrder
    _count?: doctorCountOrderByAggregateInput
    _avg?: doctorAvgOrderByAggregateInput
    _max?: doctorMaxOrderByAggregateInput
    _min?: doctorMinOrderByAggregateInput
    _sum?: doctorSumOrderByAggregateInput
  }

  export type doctorScalarWhereWithAggregatesInput = {
    AND?: doctorScalarWhereWithAggregatesInput | doctorScalarWhereWithAggregatesInput[]
    OR?: doctorScalarWhereWithAggregatesInput[]
    NOT?: doctorScalarWhereWithAggregatesInput | doctorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"doctor"> | number
    Name?: StringWithAggregatesFilter<"doctor"> | string
    LastName?: StringWithAggregatesFilter<"doctor"> | string
    Age?: IntNullableWithAggregatesFilter<"doctor"> | number | null
    BirthDate?: DateTimeNullableWithAggregatesFilter<"doctor"> | Date | string | null
    Gender?: Enumdoctor_GenderNullableWithAggregatesFilter<"doctor"> | $Enums.doctor_Gender | null
    Specialty?: StringNullableWithAggregatesFilter<"doctor"> | string | null
    Address?: StringNullableWithAggregatesFilter<"doctor"> | string | null
    Cellphone?: StringNullableWithAggregatesFilter<"doctor"> | string | null
    CURP?: StringNullableWithAggregatesFilter<"doctor"> | string | null
    LicenseNumber?: StringNullableWithAggregatesFilter<"doctor"> | string | null
    Sex?: StringNullableWithAggregatesFilter<"doctor"> | string | null
    MedicalLicense?: StringNullableWithAggregatesFilter<"doctor"> | string | null
    Email?: StringWithAggregatesFilter<"doctor"> | string
    HireDate?: DateTimeWithAggregatesFilter<"doctor"> | Date | string
  }

  export type empleadoWhereInput = {
    AND?: empleadoWhereInput | empleadoWhereInput[]
    OR?: empleadoWhereInput[]
    NOT?: empleadoWhereInput | empleadoWhereInput[]
    id?: IntFilter<"empleado"> | number
    Name?: StringFilter<"empleado"> | string
    LastName?: StringFilter<"empleado"> | string
    BirthDate?: DateTimeNullableFilter<"empleado"> | Date | string | null
    Gender?: Enumempleado_GenderNullableFilter<"empleado"> | $Enums.empleado_Gender | null
    Cellphone?: StringNullableFilter<"empleado"> | string | null
    Email?: StringFilter<"empleado"> | string
    Address?: StringNullableFilter<"empleado"> | string | null
    Position?: StringNullableFilter<"empleado"> | string | null
    CURP?: StringNullableFilter<"empleado"> | string | null
    RFC?: StringNullableFilter<"empleado"> | string | null
    Salary?: DecimalNullableFilter<"empleado"> | Decimal | DecimalJsLike | number | string | null
    HireDate?: DateTimeNullableFilter<"empleado"> | Date | string | null
  }

  export type empleadoOrderByWithRelationInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    BirthDate?: SortOrderInput | SortOrder
    Gender?: SortOrderInput | SortOrder
    Cellphone?: SortOrderInput | SortOrder
    Email?: SortOrder
    Address?: SortOrderInput | SortOrder
    Position?: SortOrderInput | SortOrder
    CURP?: SortOrderInput | SortOrder
    RFC?: SortOrderInput | SortOrder
    Salary?: SortOrderInput | SortOrder
    HireDate?: SortOrderInput | SortOrder
  }

  export type empleadoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    Email?: string
    AND?: empleadoWhereInput | empleadoWhereInput[]
    OR?: empleadoWhereInput[]
    NOT?: empleadoWhereInput | empleadoWhereInput[]
    Name?: StringFilter<"empleado"> | string
    LastName?: StringFilter<"empleado"> | string
    BirthDate?: DateTimeNullableFilter<"empleado"> | Date | string | null
    Gender?: Enumempleado_GenderNullableFilter<"empleado"> | $Enums.empleado_Gender | null
    Cellphone?: StringNullableFilter<"empleado"> | string | null
    Address?: StringNullableFilter<"empleado"> | string | null
    Position?: StringNullableFilter<"empleado"> | string | null
    CURP?: StringNullableFilter<"empleado"> | string | null
    RFC?: StringNullableFilter<"empleado"> | string | null
    Salary?: DecimalNullableFilter<"empleado"> | Decimal | DecimalJsLike | number | string | null
    HireDate?: DateTimeNullableFilter<"empleado"> | Date | string | null
  }, "id" | "Email">

  export type empleadoOrderByWithAggregationInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    BirthDate?: SortOrderInput | SortOrder
    Gender?: SortOrderInput | SortOrder
    Cellphone?: SortOrderInput | SortOrder
    Email?: SortOrder
    Address?: SortOrderInput | SortOrder
    Position?: SortOrderInput | SortOrder
    CURP?: SortOrderInput | SortOrder
    RFC?: SortOrderInput | SortOrder
    Salary?: SortOrderInput | SortOrder
    HireDate?: SortOrderInput | SortOrder
    _count?: empleadoCountOrderByAggregateInput
    _avg?: empleadoAvgOrderByAggregateInput
    _max?: empleadoMaxOrderByAggregateInput
    _min?: empleadoMinOrderByAggregateInput
    _sum?: empleadoSumOrderByAggregateInput
  }

  export type empleadoScalarWhereWithAggregatesInput = {
    AND?: empleadoScalarWhereWithAggregatesInput | empleadoScalarWhereWithAggregatesInput[]
    OR?: empleadoScalarWhereWithAggregatesInput[]
    NOT?: empleadoScalarWhereWithAggregatesInput | empleadoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"empleado"> | number
    Name?: StringWithAggregatesFilter<"empleado"> | string
    LastName?: StringWithAggregatesFilter<"empleado"> | string
    BirthDate?: DateTimeNullableWithAggregatesFilter<"empleado"> | Date | string | null
    Gender?: Enumempleado_GenderNullableWithAggregatesFilter<"empleado"> | $Enums.empleado_Gender | null
    Cellphone?: StringNullableWithAggregatesFilter<"empleado"> | string | null
    Email?: StringWithAggregatesFilter<"empleado"> | string
    Address?: StringNullableWithAggregatesFilter<"empleado"> | string | null
    Position?: StringNullableWithAggregatesFilter<"empleado"> | string | null
    CURP?: StringNullableWithAggregatesFilter<"empleado"> | string | null
    RFC?: StringNullableWithAggregatesFilter<"empleado"> | string | null
    Salary?: DecimalNullableWithAggregatesFilter<"empleado"> | Decimal | DecimalJsLike | number | string | null
    HireDate?: DateTimeNullableWithAggregatesFilter<"empleado"> | Date | string | null
  }

  export type enfermedadesWhereInput = {
    AND?: enfermedadesWhereInput | enfermedadesWhereInput[]
    OR?: enfermedadesWhereInput[]
    NOT?: enfermedadesWhereInput | enfermedadesWhereInput[]
    DiseaseId?: IntFilter<"enfermedades"> | number
    DiseaseType?: Enumenfermedades_DiseaseTypeFilter<"enfermedades"> | $Enums.enfermedades_DiseaseType
    Other?: StringFilter<"enfermedades"> | string
    Causes?: StringFilter<"enfermedades"> | string
    Symptoms?: StringFilter<"enfermedades"> | string
    Treatment?: StringFilter<"enfermedades"> | string
  }

  export type enfermedadesOrderByWithRelationInput = {
    DiseaseId?: SortOrder
    DiseaseType?: SortOrder
    Other?: SortOrder
    Causes?: SortOrder
    Symptoms?: SortOrder
    Treatment?: SortOrder
  }

  export type enfermedadesWhereUniqueInput = Prisma.AtLeast<{
    DiseaseId?: number
    AND?: enfermedadesWhereInput | enfermedadesWhereInput[]
    OR?: enfermedadesWhereInput[]
    NOT?: enfermedadesWhereInput | enfermedadesWhereInput[]
    DiseaseType?: Enumenfermedades_DiseaseTypeFilter<"enfermedades"> | $Enums.enfermedades_DiseaseType
    Other?: StringFilter<"enfermedades"> | string
    Causes?: StringFilter<"enfermedades"> | string
    Symptoms?: StringFilter<"enfermedades"> | string
    Treatment?: StringFilter<"enfermedades"> | string
  }, "DiseaseId">

  export type enfermedadesOrderByWithAggregationInput = {
    DiseaseId?: SortOrder
    DiseaseType?: SortOrder
    Other?: SortOrder
    Causes?: SortOrder
    Symptoms?: SortOrder
    Treatment?: SortOrder
    _count?: enfermedadesCountOrderByAggregateInput
    _avg?: enfermedadesAvgOrderByAggregateInput
    _max?: enfermedadesMaxOrderByAggregateInput
    _min?: enfermedadesMinOrderByAggregateInput
    _sum?: enfermedadesSumOrderByAggregateInput
  }

  export type enfermedadesScalarWhereWithAggregatesInput = {
    AND?: enfermedadesScalarWhereWithAggregatesInput | enfermedadesScalarWhereWithAggregatesInput[]
    OR?: enfermedadesScalarWhereWithAggregatesInput[]
    NOT?: enfermedadesScalarWhereWithAggregatesInput | enfermedadesScalarWhereWithAggregatesInput[]
    DiseaseId?: IntWithAggregatesFilter<"enfermedades"> | number
    DiseaseType?: Enumenfermedades_DiseaseTypeWithAggregatesFilter<"enfermedades"> | $Enums.enfermedades_DiseaseType
    Other?: StringWithAggregatesFilter<"enfermedades"> | string
    Causes?: StringWithAggregatesFilter<"enfermedades"> | string
    Symptoms?: StringWithAggregatesFilter<"enfermedades"> | string
    Treatment?: StringWithAggregatesFilter<"enfermedades"> | string
  }

  export type examen_clinico_intraoralWhereInput = {
    AND?: examen_clinico_intraoralWhereInput | examen_clinico_intraoralWhereInput[]
    OR?: examen_clinico_intraoralWhereInput[]
    NOT?: examen_clinico_intraoralWhereInput | examen_clinico_intraoralWhereInput[]
    PatientId?: IntFilter<"examen_clinico_intraoral"> | number
    ExaminationDate?: DateTimeFilter<"examen_clinico_intraoral"> | Date | string
    Gums?: StringFilter<"examen_clinico_intraoral"> | string
    Tongue?: StringFilter<"examen_clinico_intraoral"> | string
    HardPalate?: StringFilter<"examen_clinico_intraoral"> | string
    SoftPalate?: StringFilter<"examen_clinico_intraoral"> | string
    Pharynx?: StringFilter<"examen_clinico_intraoral"> | string
    FloorOfMouth?: StringFilter<"examen_clinico_intraoral"> | string
    ResidualRidge?: StringFilter<"examen_clinico_intraoral"> | string
    OcclusionType?: StringFilter<"examen_clinico_intraoral"> | string
    Observations?: StringNullableFilter<"examen_clinico_intraoral"> | string | null
  }

  export type examen_clinico_intraoralOrderByWithRelationInput = {
    PatientId?: SortOrder
    ExaminationDate?: SortOrder
    Gums?: SortOrder
    Tongue?: SortOrder
    HardPalate?: SortOrder
    SoftPalate?: SortOrder
    Pharynx?: SortOrder
    FloorOfMouth?: SortOrder
    ResidualRidge?: SortOrder
    OcclusionType?: SortOrder
    Observations?: SortOrderInput | SortOrder
  }

  export type examen_clinico_intraoralWhereUniqueInput = Prisma.AtLeast<{
    PatientId?: number
    AND?: examen_clinico_intraoralWhereInput | examen_clinico_intraoralWhereInput[]
    OR?: examen_clinico_intraoralWhereInput[]
    NOT?: examen_clinico_intraoralWhereInput | examen_clinico_intraoralWhereInput[]
    ExaminationDate?: DateTimeFilter<"examen_clinico_intraoral"> | Date | string
    Gums?: StringFilter<"examen_clinico_intraoral"> | string
    Tongue?: StringFilter<"examen_clinico_intraoral"> | string
    HardPalate?: StringFilter<"examen_clinico_intraoral"> | string
    SoftPalate?: StringFilter<"examen_clinico_intraoral"> | string
    Pharynx?: StringFilter<"examen_clinico_intraoral"> | string
    FloorOfMouth?: StringFilter<"examen_clinico_intraoral"> | string
    ResidualRidge?: StringFilter<"examen_clinico_intraoral"> | string
    OcclusionType?: StringFilter<"examen_clinico_intraoral"> | string
    Observations?: StringNullableFilter<"examen_clinico_intraoral"> | string | null
  }, "PatientId">

  export type examen_clinico_intraoralOrderByWithAggregationInput = {
    PatientId?: SortOrder
    ExaminationDate?: SortOrder
    Gums?: SortOrder
    Tongue?: SortOrder
    HardPalate?: SortOrder
    SoftPalate?: SortOrder
    Pharynx?: SortOrder
    FloorOfMouth?: SortOrder
    ResidualRidge?: SortOrder
    OcclusionType?: SortOrder
    Observations?: SortOrderInput | SortOrder
    _count?: examen_clinico_intraoralCountOrderByAggregateInput
    _avg?: examen_clinico_intraoralAvgOrderByAggregateInput
    _max?: examen_clinico_intraoralMaxOrderByAggregateInput
    _min?: examen_clinico_intraoralMinOrderByAggregateInput
    _sum?: examen_clinico_intraoralSumOrderByAggregateInput
  }

  export type examen_clinico_intraoralScalarWhereWithAggregatesInput = {
    AND?: examen_clinico_intraoralScalarWhereWithAggregatesInput | examen_clinico_intraoralScalarWhereWithAggregatesInput[]
    OR?: examen_clinico_intraoralScalarWhereWithAggregatesInput[]
    NOT?: examen_clinico_intraoralScalarWhereWithAggregatesInput | examen_clinico_intraoralScalarWhereWithAggregatesInput[]
    PatientId?: IntWithAggregatesFilter<"examen_clinico_intraoral"> | number
    ExaminationDate?: DateTimeWithAggregatesFilter<"examen_clinico_intraoral"> | Date | string
    Gums?: StringWithAggregatesFilter<"examen_clinico_intraoral"> | string
    Tongue?: StringWithAggregatesFilter<"examen_clinico_intraoral"> | string
    HardPalate?: StringWithAggregatesFilter<"examen_clinico_intraoral"> | string
    SoftPalate?: StringWithAggregatesFilter<"examen_clinico_intraoral"> | string
    Pharynx?: StringWithAggregatesFilter<"examen_clinico_intraoral"> | string
    FloorOfMouth?: StringWithAggregatesFilter<"examen_clinico_intraoral"> | string
    ResidualRidge?: StringWithAggregatesFilter<"examen_clinico_intraoral"> | string
    OcclusionType?: StringWithAggregatesFilter<"examen_clinico_intraoral"> | string
    Observations?: StringNullableWithAggregatesFilter<"examen_clinico_intraoral"> | string | null
  }

  export type historial_clinicoWhereInput = {
    AND?: historial_clinicoWhereInput | historial_clinicoWhereInput[]
    OR?: historial_clinicoWhereInput[]
    NOT?: historial_clinicoWhereInput | historial_clinicoWhereInput[]
    HistoryId?: IntFilter<"historial_clinico"> | number
    ClientId?: IntNullableFilter<"historial_clinico"> | number | null
    DentistId?: IntNullableFilter<"historial_clinico"> | number | null
    ConsultationDate?: DateTimeNullableFilter<"historial_clinico"> | Date | string | null
    ClinicalData?: JsonNullableFilter<"historial_clinico">
  }

  export type historial_clinicoOrderByWithRelationInput = {
    HistoryId?: SortOrder
    ClientId?: SortOrderInput | SortOrder
    DentistId?: SortOrderInput | SortOrder
    ConsultationDate?: SortOrderInput | SortOrder
    ClinicalData?: SortOrderInput | SortOrder
  }

  export type historial_clinicoWhereUniqueInput = Prisma.AtLeast<{
    HistoryId?: number
    AND?: historial_clinicoWhereInput | historial_clinicoWhereInput[]
    OR?: historial_clinicoWhereInput[]
    NOT?: historial_clinicoWhereInput | historial_clinicoWhereInput[]
    ClientId?: IntNullableFilter<"historial_clinico"> | number | null
    DentistId?: IntNullableFilter<"historial_clinico"> | number | null
    ConsultationDate?: DateTimeNullableFilter<"historial_clinico"> | Date | string | null
    ClinicalData?: JsonNullableFilter<"historial_clinico">
  }, "HistoryId">

  export type historial_clinicoOrderByWithAggregationInput = {
    HistoryId?: SortOrder
    ClientId?: SortOrderInput | SortOrder
    DentistId?: SortOrderInput | SortOrder
    ConsultationDate?: SortOrderInput | SortOrder
    ClinicalData?: SortOrderInput | SortOrder
    _count?: historial_clinicoCountOrderByAggregateInput
    _avg?: historial_clinicoAvgOrderByAggregateInput
    _max?: historial_clinicoMaxOrderByAggregateInput
    _min?: historial_clinicoMinOrderByAggregateInput
    _sum?: historial_clinicoSumOrderByAggregateInput
  }

  export type historial_clinicoScalarWhereWithAggregatesInput = {
    AND?: historial_clinicoScalarWhereWithAggregatesInput | historial_clinicoScalarWhereWithAggregatesInput[]
    OR?: historial_clinicoScalarWhereWithAggregatesInput[]
    NOT?: historial_clinicoScalarWhereWithAggregatesInput | historial_clinicoScalarWhereWithAggregatesInput[]
    HistoryId?: IntWithAggregatesFilter<"historial_clinico"> | number
    ClientId?: IntNullableWithAggregatesFilter<"historial_clinico"> | number | null
    DentistId?: IntNullableWithAggregatesFilter<"historial_clinico"> | number | null
    ConsultationDate?: DateTimeNullableWithAggregatesFilter<"historial_clinico"> | Date | string | null
    ClinicalData?: JsonNullableWithAggregatesFilter<"historial_clinico">
  }

  export type permisosWhereInput = {
    AND?: permisosWhereInput | permisosWhereInput[]
    OR?: permisosWhereInput[]
    NOT?: permisosWhereInput | permisosWhereInput[]
    ID?: IntFilter<"permisos"> | number
    Permission?: StringFilter<"permisos"> | string
    Description?: StringFilter<"permisos"> | string
  }

  export type permisosOrderByWithRelationInput = {
    ID?: SortOrder
    Permission?: SortOrder
    Description?: SortOrder
  }

  export type permisosWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: permisosWhereInput | permisosWhereInput[]
    OR?: permisosWhereInput[]
    NOT?: permisosWhereInput | permisosWhereInput[]
    Permission?: StringFilter<"permisos"> | string
    Description?: StringFilter<"permisos"> | string
  }, "ID">

  export type permisosOrderByWithAggregationInput = {
    ID?: SortOrder
    Permission?: SortOrder
    Description?: SortOrder
    _count?: permisosCountOrderByAggregateInput
    _avg?: permisosAvgOrderByAggregateInput
    _max?: permisosMaxOrderByAggregateInput
    _min?: permisosMinOrderByAggregateInput
    _sum?: permisosSumOrderByAggregateInput
  }

  export type permisosScalarWhereWithAggregatesInput = {
    AND?: permisosScalarWhereWithAggregatesInput | permisosScalarWhereWithAggregatesInput[]
    OR?: permisosScalarWhereWithAggregatesInput[]
    NOT?: permisosScalarWhereWithAggregatesInput | permisosScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"permisos"> | number
    Permission?: StringWithAggregatesFilter<"permisos"> | string
    Description?: StringWithAggregatesFilter<"permisos"> | string
  }

  export type usuariosWhereInput = {
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    Id?: IntFilter<"usuarios"> | number
    Email?: StringFilter<"usuarios"> | string
    Password?: StringFilter<"usuarios"> | string
    IsAdministrator?: BoolFilter<"usuarios"> | boolean
    IsDoctor?: BoolFilter<"usuarios"> | boolean
    IsEmployee?: BoolFilter<"usuarios"> | boolean
  }

  export type usuariosOrderByWithRelationInput = {
    Id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    IsAdministrator?: SortOrder
    IsDoctor?: SortOrder
    IsEmployee?: SortOrder
  }

  export type usuariosWhereUniqueInput = Prisma.AtLeast<{
    Id?: number
    Email?: string
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    Password?: StringFilter<"usuarios"> | string
    IsAdministrator?: BoolFilter<"usuarios"> | boolean
    IsDoctor?: BoolFilter<"usuarios"> | boolean
    IsEmployee?: BoolFilter<"usuarios"> | boolean
  }, "Id" | "Email">

  export type usuariosOrderByWithAggregationInput = {
    Id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    IsAdministrator?: SortOrder
    IsDoctor?: SortOrder
    IsEmployee?: SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    OR?: usuariosScalarWhereWithAggregatesInput[]
    NOT?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    Id?: IntWithAggregatesFilter<"usuarios"> | number
    Email?: StringWithAggregatesFilter<"usuarios"> | string
    Password?: StringWithAggregatesFilter<"usuarios"> | string
    IsAdministrator?: BoolWithAggregatesFilter<"usuarios"> | boolean
    IsDoctor?: BoolWithAggregatesFilter<"usuarios"> | boolean
    IsEmployee?: BoolWithAggregatesFilter<"usuarios"> | boolean
  }

  export type serviciosWhereInput = {
    AND?: serviciosWhereInput | serviciosWhereInput[]
    OR?: serviciosWhereInput[]
    NOT?: serviciosWhereInput | serviciosWhereInput[]
    Id?: IntFilter<"servicios"> | number
    Service_Name?: StringFilter<"servicios"> | string
    Price?: DecimalFilter<"servicios"> | Decimal | DecimalJsLike | number | string
  }

  export type serviciosOrderByWithRelationInput = {
    Id?: SortOrder
    Service_Name?: SortOrder
    Price?: SortOrder
  }

  export type serviciosWhereUniqueInput = Prisma.AtLeast<{
    Id?: number
    AND?: serviciosWhereInput | serviciosWhereInput[]
    OR?: serviciosWhereInput[]
    NOT?: serviciosWhereInput | serviciosWhereInput[]
    Service_Name?: StringFilter<"servicios"> | string
    Price?: DecimalFilter<"servicios"> | Decimal | DecimalJsLike | number | string
  }, "Id">

  export type serviciosOrderByWithAggregationInput = {
    Id?: SortOrder
    Service_Name?: SortOrder
    Price?: SortOrder
    _count?: serviciosCountOrderByAggregateInput
    _avg?: serviciosAvgOrderByAggregateInput
    _max?: serviciosMaxOrderByAggregateInput
    _min?: serviciosMinOrderByAggregateInput
    _sum?: serviciosSumOrderByAggregateInput
  }

  export type serviciosScalarWhereWithAggregatesInput = {
    AND?: serviciosScalarWhereWithAggregatesInput | serviciosScalarWhereWithAggregatesInput[]
    OR?: serviciosScalarWhereWithAggregatesInput[]
    NOT?: serviciosScalarWhereWithAggregatesInput | serviciosScalarWhereWithAggregatesInput[]
    Id?: IntWithAggregatesFilter<"servicios"> | number
    Service_Name?: StringWithAggregatesFilter<"servicios"> | string
    Price?: DecimalWithAggregatesFilter<"servicios"> | Decimal | DecimalJsLike | number | string
  }

  export type antecedentes_no_patologicosCreateInput = {
    PatientId: number
    Smoking: $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse: $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism: $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary: $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries?: string | null
    Exercise?: string | null
  }

  export type antecedentes_no_patologicosUncheckedCreateInput = {
    PatientId: number
    Smoking: $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse: $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism: $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary: $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries?: string | null
    Exercise?: string | null
  }

  export type antecedentes_no_patologicosUpdateInput = {
    PatientId?: IntFieldUpdateOperationsInput | number
    Smoking?: Enumantecedentes_no_patologicos_SmokingFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse?: Enumantecedentes_no_patologicos_SubstanceAbuseFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism?: Enumantecedentes_no_patologicos_AlcoholismFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary?: Enumantecedentes_no_patologicos_SedentaryFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries?: NullableStringFieldUpdateOperationsInput | string | null
    Exercise?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type antecedentes_no_patologicosUncheckedUpdateInput = {
    PatientId?: IntFieldUpdateOperationsInput | number
    Smoking?: Enumantecedentes_no_patologicos_SmokingFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse?: Enumantecedentes_no_patologicos_SubstanceAbuseFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism?: Enumantecedentes_no_patologicos_AlcoholismFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary?: Enumantecedentes_no_patologicos_SedentaryFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries?: NullableStringFieldUpdateOperationsInput | string | null
    Exercise?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type antecedentes_no_patologicosCreateManyInput = {
    PatientId: number
    Smoking: $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse: $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism: $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary: $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries?: string | null
    Exercise?: string | null
  }

  export type antecedentes_no_patologicosUpdateManyMutationInput = {
    PatientId?: IntFieldUpdateOperationsInput | number
    Smoking?: Enumantecedentes_no_patologicos_SmokingFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse?: Enumantecedentes_no_patologicos_SubstanceAbuseFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism?: Enumantecedentes_no_patologicos_AlcoholismFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary?: Enumantecedentes_no_patologicos_SedentaryFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries?: NullableStringFieldUpdateOperationsInput | string | null
    Exercise?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type antecedentes_no_patologicosUncheckedUpdateManyInput = {
    PatientId?: IntFieldUpdateOperationsInput | number
    Smoking?: Enumantecedentes_no_patologicos_SmokingFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Smoking
    SubstanceAbuse?: Enumantecedentes_no_patologicos_SubstanceAbuseFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_SubstanceAbuse
    Alcoholism?: Enumantecedentes_no_patologicos_AlcoholismFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Alcoholism
    Sedentary?: Enumantecedentes_no_patologicos_SedentaryFieldUpdateOperationsInput | $Enums.antecedentes_no_patologicos_Sedentary
    Surgeries?: NullableStringFieldUpdateOperationsInput | string | null
    Exercise?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type antecedentes_patologicosCreateInput = {
    PatientId?: number | null
    Disease: string
    DiagnosisDate: Date | string
    DiseaseType: $Enums.antecedentes_patologicos_DiseaseType
    Chronic: $Enums.antecedentes_patologicos_Chronic
    Treatment?: string | null
    Observations?: string | null
  }

  export type antecedentes_patologicosUncheckedCreateInput = {
    id?: number
    PatientId?: number | null
    Disease: string
    DiagnosisDate: Date | string
    DiseaseType: $Enums.antecedentes_patologicos_DiseaseType
    Chronic: $Enums.antecedentes_patologicos_Chronic
    Treatment?: string | null
    Observations?: string | null
  }

  export type antecedentes_patologicosUpdateInput = {
    PatientId?: NullableIntFieldUpdateOperationsInput | number | null
    Disease?: StringFieldUpdateOperationsInput | string
    DiagnosisDate?: DateTimeFieldUpdateOperationsInput | Date | string
    DiseaseType?: Enumantecedentes_patologicos_DiseaseTypeFieldUpdateOperationsInput | $Enums.antecedentes_patologicos_DiseaseType
    Chronic?: Enumantecedentes_patologicos_ChronicFieldUpdateOperationsInput | $Enums.antecedentes_patologicos_Chronic
    Treatment?: NullableStringFieldUpdateOperationsInput | string | null
    Observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type antecedentes_patologicosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    PatientId?: NullableIntFieldUpdateOperationsInput | number | null
    Disease?: StringFieldUpdateOperationsInput | string
    DiagnosisDate?: DateTimeFieldUpdateOperationsInput | Date | string
    DiseaseType?: Enumantecedentes_patologicos_DiseaseTypeFieldUpdateOperationsInput | $Enums.antecedentes_patologicos_DiseaseType
    Chronic?: Enumantecedentes_patologicos_ChronicFieldUpdateOperationsInput | $Enums.antecedentes_patologicos_Chronic
    Treatment?: NullableStringFieldUpdateOperationsInput | string | null
    Observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type antecedentes_patologicosCreateManyInput = {
    id?: number
    PatientId?: number | null
    Disease: string
    DiagnosisDate: Date | string
    DiseaseType: $Enums.antecedentes_patologicos_DiseaseType
    Chronic: $Enums.antecedentes_patologicos_Chronic
    Treatment?: string | null
    Observations?: string | null
  }

  export type antecedentes_patologicosUpdateManyMutationInput = {
    PatientId?: NullableIntFieldUpdateOperationsInput | number | null
    Disease?: StringFieldUpdateOperationsInput | string
    DiagnosisDate?: DateTimeFieldUpdateOperationsInput | Date | string
    DiseaseType?: Enumantecedentes_patologicos_DiseaseTypeFieldUpdateOperationsInput | $Enums.antecedentes_patologicos_DiseaseType
    Chronic?: Enumantecedentes_patologicos_ChronicFieldUpdateOperationsInput | $Enums.antecedentes_patologicos_Chronic
    Treatment?: NullableStringFieldUpdateOperationsInput | string | null
    Observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type antecedentes_patologicosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    PatientId?: NullableIntFieldUpdateOperationsInput | number | null
    Disease?: StringFieldUpdateOperationsInput | string
    DiagnosisDate?: DateTimeFieldUpdateOperationsInput | Date | string
    DiseaseType?: Enumantecedentes_patologicos_DiseaseTypeFieldUpdateOperationsInput | $Enums.antecedentes_patologicos_DiseaseType
    Chronic?: Enumantecedentes_patologicos_ChronicFieldUpdateOperationsInput | $Enums.antecedentes_patologicos_Chronic
    Treatment?: NullableStringFieldUpdateOperationsInput | string | null
    Observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bitacoraCreateInput = {
    DateTime?: Date | string
    User: string
    Action: string
    Tabla?: string | null
    RecordId?: number | null
    Description?: string | null
  }

  export type bitacoraUncheckedCreateInput = {
    LogId?: number
    DateTime?: Date | string
    User: string
    Action: string
    Tabla?: string | null
    RecordId?: number | null
    Description?: string | null
  }

  export type bitacoraUpdateInput = {
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: StringFieldUpdateOperationsInput | string
    Action?: StringFieldUpdateOperationsInput | string
    Tabla?: NullableStringFieldUpdateOperationsInput | string | null
    RecordId?: NullableIntFieldUpdateOperationsInput | number | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bitacoraUncheckedUpdateInput = {
    LogId?: IntFieldUpdateOperationsInput | number
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: StringFieldUpdateOperationsInput | string
    Action?: StringFieldUpdateOperationsInput | string
    Tabla?: NullableStringFieldUpdateOperationsInput | string | null
    RecordId?: NullableIntFieldUpdateOperationsInput | number | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bitacoraCreateManyInput = {
    LogId?: number
    DateTime?: Date | string
    User: string
    Action: string
    Tabla?: string | null
    RecordId?: number | null
    Description?: string | null
  }

  export type bitacoraUpdateManyMutationInput = {
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: StringFieldUpdateOperationsInput | string
    Action?: StringFieldUpdateOperationsInput | string
    Tabla?: NullableStringFieldUpdateOperationsInput | string | null
    RecordId?: NullableIntFieldUpdateOperationsInput | number | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bitacoraUncheckedUpdateManyInput = {
    LogId?: IntFieldUpdateOperationsInput | number
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: StringFieldUpdateOperationsInput | string
    Action?: StringFieldUpdateOperationsInput | string
    Tabla?: NullableStringFieldUpdateOperationsInput | string | null
    RecordId?: NullableIntFieldUpdateOperationsInput | number | null
    Description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clientesCreateInput = {
    Name: string
    LastName: string
    SEX: string
    Age: number
    BirthDate?: Date | string | null
    Address?: string | null
    Phone?: string | null
    CURP: string
    Email?: string | null
    BloodType: string
    Occupation: string
    Education: string
  }

  export type clientesUncheckedCreateInput = {
    id?: number
    Name: string
    LastName: string
    SEX: string
    Age: number
    BirthDate?: Date | string | null
    Address?: string | null
    Phone?: string | null
    CURP: string
    Email?: string | null
    BloodType: string
    Occupation: string
    Education: string
  }

  export type clientesUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    SEX?: StringFieldUpdateOperationsInput | string
    Age?: IntFieldUpdateOperationsInput | number
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Phone?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: StringFieldUpdateOperationsInput | string
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    BloodType?: StringFieldUpdateOperationsInput | string
    Occupation?: StringFieldUpdateOperationsInput | string
    Education?: StringFieldUpdateOperationsInput | string
  }

  export type clientesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    SEX?: StringFieldUpdateOperationsInput | string
    Age?: IntFieldUpdateOperationsInput | number
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Phone?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: StringFieldUpdateOperationsInput | string
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    BloodType?: StringFieldUpdateOperationsInput | string
    Occupation?: StringFieldUpdateOperationsInput | string
    Education?: StringFieldUpdateOperationsInput | string
  }

  export type clientesCreateManyInput = {
    id?: number
    Name: string
    LastName: string
    SEX: string
    Age: number
    BirthDate?: Date | string | null
    Address?: string | null
    Phone?: string | null
    CURP: string
    Email?: string | null
    BloodType: string
    Occupation: string
    Education: string
  }

  export type clientesUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    SEX?: StringFieldUpdateOperationsInput | string
    Age?: IntFieldUpdateOperationsInput | number
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Phone?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: StringFieldUpdateOperationsInput | string
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    BloodType?: StringFieldUpdateOperationsInput | string
    Occupation?: StringFieldUpdateOperationsInput | string
    Education?: StringFieldUpdateOperationsInput | string
  }

  export type clientesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    SEX?: StringFieldUpdateOperationsInput | string
    Age?: IntFieldUpdateOperationsInput | number
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Phone?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: StringFieldUpdateOperationsInput | string
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    BloodType?: StringFieldUpdateOperationsInput | string
    Occupation?: StringFieldUpdateOperationsInput | string
    Education?: StringFieldUpdateOperationsInput | string
  }

  export type doctorCreateInput = {
    Name: string
    LastName: string
    Age?: number | null
    BirthDate?: Date | string | null
    Gender?: $Enums.doctor_Gender | null
    Specialty?: string | null
    Address?: string | null
    Cellphone?: string | null
    CURP?: string | null
    LicenseNumber?: string | null
    Sex?: string | null
    MedicalLicense?: string | null
    Email: string
    HireDate: Date | string
  }

  export type doctorUncheckedCreateInput = {
    id?: number
    Name: string
    LastName: string
    Age?: number | null
    BirthDate?: Date | string | null
    Gender?: $Enums.doctor_Gender | null
    Specialty?: string | null
    Address?: string | null
    Cellphone?: string | null
    CURP?: string | null
    LicenseNumber?: string | null
    Sex?: string | null
    MedicalLicense?: string | null
    Email: string
    HireDate: Date | string
  }

  export type doctorUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Age?: NullableIntFieldUpdateOperationsInput | number | null
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Gender?: NullableEnumdoctor_GenderFieldUpdateOperationsInput | $Enums.doctor_Gender | null
    Specialty?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: NullableStringFieldUpdateOperationsInput | string | null
    LicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Sex?: NullableStringFieldUpdateOperationsInput | string | null
    MedicalLicense?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    HireDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type doctorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Age?: NullableIntFieldUpdateOperationsInput | number | null
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Gender?: NullableEnumdoctor_GenderFieldUpdateOperationsInput | $Enums.doctor_Gender | null
    Specialty?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: NullableStringFieldUpdateOperationsInput | string | null
    LicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Sex?: NullableStringFieldUpdateOperationsInput | string | null
    MedicalLicense?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    HireDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type doctorCreateManyInput = {
    id?: number
    Name: string
    LastName: string
    Age?: number | null
    BirthDate?: Date | string | null
    Gender?: $Enums.doctor_Gender | null
    Specialty?: string | null
    Address?: string | null
    Cellphone?: string | null
    CURP?: string | null
    LicenseNumber?: string | null
    Sex?: string | null
    MedicalLicense?: string | null
    Email: string
    HireDate: Date | string
  }

  export type doctorUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Age?: NullableIntFieldUpdateOperationsInput | number | null
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Gender?: NullableEnumdoctor_GenderFieldUpdateOperationsInput | $Enums.doctor_Gender | null
    Specialty?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: NullableStringFieldUpdateOperationsInput | string | null
    LicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Sex?: NullableStringFieldUpdateOperationsInput | string | null
    MedicalLicense?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    HireDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type doctorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    Age?: NullableIntFieldUpdateOperationsInput | number | null
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Gender?: NullableEnumdoctor_GenderFieldUpdateOperationsInput | $Enums.doctor_Gender | null
    Specialty?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: NullableStringFieldUpdateOperationsInput | string | null
    LicenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Sex?: NullableStringFieldUpdateOperationsInput | string | null
    MedicalLicense?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    HireDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type empleadoCreateInput = {
    Name: string
    LastName: string
    BirthDate?: Date | string | null
    Gender?: $Enums.empleado_Gender | null
    Cellphone?: string | null
    Email: string
    Address?: string | null
    Position?: string | null
    CURP?: string | null
    RFC?: string | null
    Salary?: Decimal | DecimalJsLike | number | string | null
    HireDate?: Date | string | null
  }

  export type empleadoUncheckedCreateInput = {
    id?: number
    Name: string
    LastName: string
    BirthDate?: Date | string | null
    Gender?: $Enums.empleado_Gender | null
    Cellphone?: string | null
    Email: string
    Address?: string | null
    Position?: string | null
    CURP?: string | null
    RFC?: string | null
    Salary?: Decimal | DecimalJsLike | number | string | null
    HireDate?: Date | string | null
  }

  export type empleadoUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Gender?: NullableEnumempleado_GenderFieldUpdateOperationsInput | $Enums.empleado_Gender | null
    Cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Position?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: NullableStringFieldUpdateOperationsInput | string | null
    RFC?: NullableStringFieldUpdateOperationsInput | string | null
    Salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    HireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type empleadoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Gender?: NullableEnumempleado_GenderFieldUpdateOperationsInput | $Enums.empleado_Gender | null
    Cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Position?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: NullableStringFieldUpdateOperationsInput | string | null
    RFC?: NullableStringFieldUpdateOperationsInput | string | null
    Salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    HireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type empleadoCreateManyInput = {
    id?: number
    Name: string
    LastName: string
    BirthDate?: Date | string | null
    Gender?: $Enums.empleado_Gender | null
    Cellphone?: string | null
    Email: string
    Address?: string | null
    Position?: string | null
    CURP?: string | null
    RFC?: string | null
    Salary?: Decimal | DecimalJsLike | number | string | null
    HireDate?: Date | string | null
  }

  export type empleadoUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Gender?: NullableEnumempleado_GenderFieldUpdateOperationsInput | $Enums.empleado_Gender | null
    Cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Position?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: NullableStringFieldUpdateOperationsInput | string | null
    RFC?: NullableStringFieldUpdateOperationsInput | string | null
    Salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    HireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type empleadoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    BirthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Gender?: NullableEnumempleado_GenderFieldUpdateOperationsInput | $Enums.empleado_Gender | null
    Cellphone?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: StringFieldUpdateOperationsInput | string
    Address?: NullableStringFieldUpdateOperationsInput | string | null
    Position?: NullableStringFieldUpdateOperationsInput | string | null
    CURP?: NullableStringFieldUpdateOperationsInput | string | null
    RFC?: NullableStringFieldUpdateOperationsInput | string | null
    Salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    HireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type enfermedadesCreateInput = {
    DiseaseType: $Enums.enfermedades_DiseaseType
    Other: string
    Causes: string
    Symptoms: string
    Treatment: string
  }

  export type enfermedadesUncheckedCreateInput = {
    DiseaseId?: number
    DiseaseType: $Enums.enfermedades_DiseaseType
    Other: string
    Causes: string
    Symptoms: string
    Treatment: string
  }

  export type enfermedadesUpdateInput = {
    DiseaseType?: Enumenfermedades_DiseaseTypeFieldUpdateOperationsInput | $Enums.enfermedades_DiseaseType
    Other?: StringFieldUpdateOperationsInput | string
    Causes?: StringFieldUpdateOperationsInput | string
    Symptoms?: StringFieldUpdateOperationsInput | string
    Treatment?: StringFieldUpdateOperationsInput | string
  }

  export type enfermedadesUncheckedUpdateInput = {
    DiseaseId?: IntFieldUpdateOperationsInput | number
    DiseaseType?: Enumenfermedades_DiseaseTypeFieldUpdateOperationsInput | $Enums.enfermedades_DiseaseType
    Other?: StringFieldUpdateOperationsInput | string
    Causes?: StringFieldUpdateOperationsInput | string
    Symptoms?: StringFieldUpdateOperationsInput | string
    Treatment?: StringFieldUpdateOperationsInput | string
  }

  export type enfermedadesCreateManyInput = {
    DiseaseId?: number
    DiseaseType: $Enums.enfermedades_DiseaseType
    Other: string
    Causes: string
    Symptoms: string
    Treatment: string
  }

  export type enfermedadesUpdateManyMutationInput = {
    DiseaseType?: Enumenfermedades_DiseaseTypeFieldUpdateOperationsInput | $Enums.enfermedades_DiseaseType
    Other?: StringFieldUpdateOperationsInput | string
    Causes?: StringFieldUpdateOperationsInput | string
    Symptoms?: StringFieldUpdateOperationsInput | string
    Treatment?: StringFieldUpdateOperationsInput | string
  }

  export type enfermedadesUncheckedUpdateManyInput = {
    DiseaseId?: IntFieldUpdateOperationsInput | number
    DiseaseType?: Enumenfermedades_DiseaseTypeFieldUpdateOperationsInput | $Enums.enfermedades_DiseaseType
    Other?: StringFieldUpdateOperationsInput | string
    Causes?: StringFieldUpdateOperationsInput | string
    Symptoms?: StringFieldUpdateOperationsInput | string
    Treatment?: StringFieldUpdateOperationsInput | string
  }

  export type examen_clinico_intraoralCreateInput = {
    PatientId: number
    ExaminationDate: Date | string
    Gums: string
    Tongue: string
    HardPalate: string
    SoftPalate: string
    Pharynx: string
    FloorOfMouth: string
    ResidualRidge: string
    OcclusionType: string
    Observations?: string | null
  }

  export type examen_clinico_intraoralUncheckedCreateInput = {
    PatientId: number
    ExaminationDate: Date | string
    Gums: string
    Tongue: string
    HardPalate: string
    SoftPalate: string
    Pharynx: string
    FloorOfMouth: string
    ResidualRidge: string
    OcclusionType: string
    Observations?: string | null
  }

  export type examen_clinico_intraoralUpdateInput = {
    PatientId?: IntFieldUpdateOperationsInput | number
    ExaminationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Gums?: StringFieldUpdateOperationsInput | string
    Tongue?: StringFieldUpdateOperationsInput | string
    HardPalate?: StringFieldUpdateOperationsInput | string
    SoftPalate?: StringFieldUpdateOperationsInput | string
    Pharynx?: StringFieldUpdateOperationsInput | string
    FloorOfMouth?: StringFieldUpdateOperationsInput | string
    ResidualRidge?: StringFieldUpdateOperationsInput | string
    OcclusionType?: StringFieldUpdateOperationsInput | string
    Observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type examen_clinico_intraoralUncheckedUpdateInput = {
    PatientId?: IntFieldUpdateOperationsInput | number
    ExaminationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Gums?: StringFieldUpdateOperationsInput | string
    Tongue?: StringFieldUpdateOperationsInput | string
    HardPalate?: StringFieldUpdateOperationsInput | string
    SoftPalate?: StringFieldUpdateOperationsInput | string
    Pharynx?: StringFieldUpdateOperationsInput | string
    FloorOfMouth?: StringFieldUpdateOperationsInput | string
    ResidualRidge?: StringFieldUpdateOperationsInput | string
    OcclusionType?: StringFieldUpdateOperationsInput | string
    Observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type examen_clinico_intraoralCreateManyInput = {
    PatientId: number
    ExaminationDate: Date | string
    Gums: string
    Tongue: string
    HardPalate: string
    SoftPalate: string
    Pharynx: string
    FloorOfMouth: string
    ResidualRidge: string
    OcclusionType: string
    Observations?: string | null
  }

  export type examen_clinico_intraoralUpdateManyMutationInput = {
    PatientId?: IntFieldUpdateOperationsInput | number
    ExaminationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Gums?: StringFieldUpdateOperationsInput | string
    Tongue?: StringFieldUpdateOperationsInput | string
    HardPalate?: StringFieldUpdateOperationsInput | string
    SoftPalate?: StringFieldUpdateOperationsInput | string
    Pharynx?: StringFieldUpdateOperationsInput | string
    FloorOfMouth?: StringFieldUpdateOperationsInput | string
    ResidualRidge?: StringFieldUpdateOperationsInput | string
    OcclusionType?: StringFieldUpdateOperationsInput | string
    Observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type examen_clinico_intraoralUncheckedUpdateManyInput = {
    PatientId?: IntFieldUpdateOperationsInput | number
    ExaminationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Gums?: StringFieldUpdateOperationsInput | string
    Tongue?: StringFieldUpdateOperationsInput | string
    HardPalate?: StringFieldUpdateOperationsInput | string
    SoftPalate?: StringFieldUpdateOperationsInput | string
    Pharynx?: StringFieldUpdateOperationsInput | string
    FloorOfMouth?: StringFieldUpdateOperationsInput | string
    ResidualRidge?: StringFieldUpdateOperationsInput | string
    OcclusionType?: StringFieldUpdateOperationsInput | string
    Observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type historial_clinicoCreateInput = {
    ClientId?: number | null
    DentistId?: number | null
    ConsultationDate?: Date | string | null
    ClinicalData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type historial_clinicoUncheckedCreateInput = {
    HistoryId?: number
    ClientId?: number | null
    DentistId?: number | null
    ConsultationDate?: Date | string | null
    ClinicalData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type historial_clinicoUpdateInput = {
    ClientId?: NullableIntFieldUpdateOperationsInput | number | null
    DentistId?: NullableIntFieldUpdateOperationsInput | number | null
    ConsultationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ClinicalData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type historial_clinicoUncheckedUpdateInput = {
    HistoryId?: IntFieldUpdateOperationsInput | number
    ClientId?: NullableIntFieldUpdateOperationsInput | number | null
    DentistId?: NullableIntFieldUpdateOperationsInput | number | null
    ConsultationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ClinicalData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type historial_clinicoCreateManyInput = {
    HistoryId?: number
    ClientId?: number | null
    DentistId?: number | null
    ConsultationDate?: Date | string | null
    ClinicalData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type historial_clinicoUpdateManyMutationInput = {
    ClientId?: NullableIntFieldUpdateOperationsInput | number | null
    DentistId?: NullableIntFieldUpdateOperationsInput | number | null
    ConsultationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ClinicalData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type historial_clinicoUncheckedUpdateManyInput = {
    HistoryId?: IntFieldUpdateOperationsInput | number
    ClientId?: NullableIntFieldUpdateOperationsInput | number | null
    DentistId?: NullableIntFieldUpdateOperationsInput | number | null
    ConsultationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ClinicalData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type permisosCreateInput = {
    Permission: string
    Description: string
  }

  export type permisosUncheckedCreateInput = {
    ID?: number
    Permission: string
    Description: string
  }

  export type permisosUpdateInput = {
    Permission?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type permisosUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Permission?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type permisosCreateManyInput = {
    ID?: number
    Permission: string
    Description: string
  }

  export type permisosUpdateManyMutationInput = {
    Permission?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type permisosUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Permission?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosCreateInput = {
    Email: string
    Password: string
    IsAdministrator?: boolean
    IsDoctor?: boolean
    IsEmployee?: boolean
  }

  export type usuariosUncheckedCreateInput = {
    Id?: number
    Email: string
    Password: string
    IsAdministrator?: boolean
    IsDoctor?: boolean
    IsEmployee?: boolean
  }

  export type usuariosUpdateInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    IsAdministrator?: BoolFieldUpdateOperationsInput | boolean
    IsDoctor?: BoolFieldUpdateOperationsInput | boolean
    IsEmployee?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuariosUncheckedUpdateInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    IsAdministrator?: BoolFieldUpdateOperationsInput | boolean
    IsDoctor?: BoolFieldUpdateOperationsInput | boolean
    IsEmployee?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuariosCreateManyInput = {
    Id?: number
    Email: string
    Password: string
    IsAdministrator?: boolean
    IsDoctor?: boolean
    IsEmployee?: boolean
  }

  export type usuariosUpdateManyMutationInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    IsAdministrator?: BoolFieldUpdateOperationsInput | boolean
    IsDoctor?: BoolFieldUpdateOperationsInput | boolean
    IsEmployee?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuariosUncheckedUpdateManyInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    IsAdministrator?: BoolFieldUpdateOperationsInput | boolean
    IsDoctor?: BoolFieldUpdateOperationsInput | boolean
    IsEmployee?: BoolFieldUpdateOperationsInput | boolean
  }

  export type serviciosCreateInput = {
    Service_Name: string
    Price: Decimal | DecimalJsLike | number | string
  }

  export type serviciosUncheckedCreateInput = {
    Id?: number
    Service_Name: string
    Price: Decimal | DecimalJsLike | number | string
  }

  export type serviciosUpdateInput = {
    Service_Name?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type serviciosUncheckedUpdateInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Service_Name?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type serviciosCreateManyInput = {
    Id?: number
    Service_Name: string
    Price: Decimal | DecimalJsLike | number | string
  }

  export type serviciosUpdateManyMutationInput = {
    Service_Name?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type serviciosUncheckedUpdateManyInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Service_Name?: StringFieldUpdateOperationsInput | string
    Price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type Enumantecedentes_no_patologicos_SmokingFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Smoking | Enumantecedentes_no_patologicos_SmokingFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Smoking[]
    notIn?: $Enums.antecedentes_no_patologicos_Smoking[]
    not?: NestedEnumantecedentes_no_patologicos_SmokingFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Smoking
  }

  export type Enumantecedentes_no_patologicos_SubstanceAbuseFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_SubstanceAbuse | Enumantecedentes_no_patologicos_SubstanceAbuseFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_SubstanceAbuse[]
    notIn?: $Enums.antecedentes_no_patologicos_SubstanceAbuse[]
    not?: NestedEnumantecedentes_no_patologicos_SubstanceAbuseFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_SubstanceAbuse
  }

  export type Enumantecedentes_no_patologicos_AlcoholismFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Alcoholism | Enumantecedentes_no_patologicos_AlcoholismFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Alcoholism[]
    notIn?: $Enums.antecedentes_no_patologicos_Alcoholism[]
    not?: NestedEnumantecedentes_no_patologicos_AlcoholismFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Alcoholism
  }

  export type Enumantecedentes_no_patologicos_SedentaryFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Sedentary | Enumantecedentes_no_patologicos_SedentaryFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Sedentary[]
    notIn?: $Enums.antecedentes_no_patologicos_Sedentary[]
    not?: NestedEnumantecedentes_no_patologicos_SedentaryFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Sedentary
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type antecedentes_no_patologicosCountOrderByAggregateInput = {
    PatientId?: SortOrder
    Smoking?: SortOrder
    SubstanceAbuse?: SortOrder
    Alcoholism?: SortOrder
    Sedentary?: SortOrder
    Surgeries?: SortOrder
    Exercise?: SortOrder
  }

  export type antecedentes_no_patologicosAvgOrderByAggregateInput = {
    PatientId?: SortOrder
  }

  export type antecedentes_no_patologicosMaxOrderByAggregateInput = {
    PatientId?: SortOrder
    Smoking?: SortOrder
    SubstanceAbuse?: SortOrder
    Alcoholism?: SortOrder
    Sedentary?: SortOrder
    Surgeries?: SortOrder
    Exercise?: SortOrder
  }

  export type antecedentes_no_patologicosMinOrderByAggregateInput = {
    PatientId?: SortOrder
    Smoking?: SortOrder
    SubstanceAbuse?: SortOrder
    Alcoholism?: SortOrder
    Sedentary?: SortOrder
    Surgeries?: SortOrder
    Exercise?: SortOrder
  }

  export type antecedentes_no_patologicosSumOrderByAggregateInput = {
    PatientId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type Enumantecedentes_no_patologicos_SmokingWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Smoking | Enumantecedentes_no_patologicos_SmokingFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Smoking[]
    notIn?: $Enums.antecedentes_no_patologicos_Smoking[]
    not?: NestedEnumantecedentes_no_patologicos_SmokingWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Smoking
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_no_patologicos_SmokingFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_no_patologicos_SmokingFilter<$PrismaModel>
  }

  export type Enumantecedentes_no_patologicos_SubstanceAbuseWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_SubstanceAbuse | Enumantecedentes_no_patologicos_SubstanceAbuseFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_SubstanceAbuse[]
    notIn?: $Enums.antecedentes_no_patologicos_SubstanceAbuse[]
    not?: NestedEnumantecedentes_no_patologicos_SubstanceAbuseWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_SubstanceAbuse
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_no_patologicos_SubstanceAbuseFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_no_patologicos_SubstanceAbuseFilter<$PrismaModel>
  }

  export type Enumantecedentes_no_patologicos_AlcoholismWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Alcoholism | Enumantecedentes_no_patologicos_AlcoholismFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Alcoholism[]
    notIn?: $Enums.antecedentes_no_patologicos_Alcoholism[]
    not?: NestedEnumantecedentes_no_patologicos_AlcoholismWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Alcoholism
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_no_patologicos_AlcoholismFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_no_patologicos_AlcoholismFilter<$PrismaModel>
  }

  export type Enumantecedentes_no_patologicos_SedentaryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Sedentary | Enumantecedentes_no_patologicos_SedentaryFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Sedentary[]
    notIn?: $Enums.antecedentes_no_patologicos_Sedentary[]
    not?: NestedEnumantecedentes_no_patologicos_SedentaryWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Sedentary
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_no_patologicos_SedentaryFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_no_patologicos_SedentaryFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Enumantecedentes_patologicos_DiseaseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_patologicos_DiseaseType | Enumantecedentes_patologicos_DiseaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_patologicos_DiseaseType[]
    notIn?: $Enums.antecedentes_patologicos_DiseaseType[]
    not?: NestedEnumantecedentes_patologicos_DiseaseTypeFilter<$PrismaModel> | $Enums.antecedentes_patologicos_DiseaseType
  }

  export type Enumantecedentes_patologicos_ChronicFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_patologicos_Chronic | Enumantecedentes_patologicos_ChronicFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_patologicos_Chronic[]
    notIn?: $Enums.antecedentes_patologicos_Chronic[]
    not?: NestedEnumantecedentes_patologicos_ChronicFilter<$PrismaModel> | $Enums.antecedentes_patologicos_Chronic
  }

  export type antecedentes_patologicosCountOrderByAggregateInput = {
    id?: SortOrder
    PatientId?: SortOrder
    Disease?: SortOrder
    DiagnosisDate?: SortOrder
    DiseaseType?: SortOrder
    Chronic?: SortOrder
    Treatment?: SortOrder
    Observations?: SortOrder
  }

  export type antecedentes_patologicosAvgOrderByAggregateInput = {
    id?: SortOrder
    PatientId?: SortOrder
  }

  export type antecedentes_patologicosMaxOrderByAggregateInput = {
    id?: SortOrder
    PatientId?: SortOrder
    Disease?: SortOrder
    DiagnosisDate?: SortOrder
    DiseaseType?: SortOrder
    Chronic?: SortOrder
    Treatment?: SortOrder
    Observations?: SortOrder
  }

  export type antecedentes_patologicosMinOrderByAggregateInput = {
    id?: SortOrder
    PatientId?: SortOrder
    Disease?: SortOrder
    DiagnosisDate?: SortOrder
    DiseaseType?: SortOrder
    Chronic?: SortOrder
    Treatment?: SortOrder
    Observations?: SortOrder
  }

  export type antecedentes_patologicosSumOrderByAggregateInput = {
    id?: SortOrder
    PatientId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type Enumantecedentes_patologicos_DiseaseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_patologicos_DiseaseType | Enumantecedentes_patologicos_DiseaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_patologicos_DiseaseType[]
    notIn?: $Enums.antecedentes_patologicos_DiseaseType[]
    not?: NestedEnumantecedentes_patologicos_DiseaseTypeWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_patologicos_DiseaseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_patologicos_DiseaseTypeFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_patologicos_DiseaseTypeFilter<$PrismaModel>
  }

  export type Enumantecedentes_patologicos_ChronicWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_patologicos_Chronic | Enumantecedentes_patologicos_ChronicFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_patologicos_Chronic[]
    notIn?: $Enums.antecedentes_patologicos_Chronic[]
    not?: NestedEnumantecedentes_patologicos_ChronicWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_patologicos_Chronic
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_patologicos_ChronicFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_patologicos_ChronicFilter<$PrismaModel>
  }

  export type bitacoraCountOrderByAggregateInput = {
    LogId?: SortOrder
    DateTime?: SortOrder
    User?: SortOrder
    Action?: SortOrder
    Tabla?: SortOrder
    RecordId?: SortOrder
    Description?: SortOrder
  }

  export type bitacoraAvgOrderByAggregateInput = {
    LogId?: SortOrder
    RecordId?: SortOrder
  }

  export type bitacoraMaxOrderByAggregateInput = {
    LogId?: SortOrder
    DateTime?: SortOrder
    User?: SortOrder
    Action?: SortOrder
    Tabla?: SortOrder
    RecordId?: SortOrder
    Description?: SortOrder
  }

  export type bitacoraMinOrderByAggregateInput = {
    LogId?: SortOrder
    DateTime?: SortOrder
    User?: SortOrder
    Action?: SortOrder
    Tabla?: SortOrder
    RecordId?: SortOrder
    Description?: SortOrder
  }

  export type bitacoraSumOrderByAggregateInput = {
    LogId?: SortOrder
    RecordId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type clientesCountOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    SEX?: SortOrder
    Age?: SortOrder
    BirthDate?: SortOrder
    Address?: SortOrder
    Phone?: SortOrder
    CURP?: SortOrder
    Email?: SortOrder
    BloodType?: SortOrder
    Occupation?: SortOrder
    Education?: SortOrder
  }

  export type clientesAvgOrderByAggregateInput = {
    id?: SortOrder
    Age?: SortOrder
  }

  export type clientesMaxOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    SEX?: SortOrder
    Age?: SortOrder
    BirthDate?: SortOrder
    Address?: SortOrder
    Phone?: SortOrder
    CURP?: SortOrder
    Email?: SortOrder
    BloodType?: SortOrder
    Occupation?: SortOrder
    Education?: SortOrder
  }

  export type clientesMinOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    SEX?: SortOrder
    Age?: SortOrder
    BirthDate?: SortOrder
    Address?: SortOrder
    Phone?: SortOrder
    CURP?: SortOrder
    Email?: SortOrder
    BloodType?: SortOrder
    Occupation?: SortOrder
    Education?: SortOrder
  }

  export type clientesSumOrderByAggregateInput = {
    id?: SortOrder
    Age?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type Enumdoctor_GenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.doctor_Gender | Enumdoctor_GenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.doctor_Gender[] | null
    notIn?: $Enums.doctor_Gender[] | null
    not?: NestedEnumdoctor_GenderNullableFilter<$PrismaModel> | $Enums.doctor_Gender | null
  }

  export type doctorCountOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    Age?: SortOrder
    BirthDate?: SortOrder
    Gender?: SortOrder
    Specialty?: SortOrder
    Address?: SortOrder
    Cellphone?: SortOrder
    CURP?: SortOrder
    LicenseNumber?: SortOrder
    Sex?: SortOrder
    MedicalLicense?: SortOrder
    Email?: SortOrder
    HireDate?: SortOrder
  }

  export type doctorAvgOrderByAggregateInput = {
    id?: SortOrder
    Age?: SortOrder
  }

  export type doctorMaxOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    Age?: SortOrder
    BirthDate?: SortOrder
    Gender?: SortOrder
    Specialty?: SortOrder
    Address?: SortOrder
    Cellphone?: SortOrder
    CURP?: SortOrder
    LicenseNumber?: SortOrder
    Sex?: SortOrder
    MedicalLicense?: SortOrder
    Email?: SortOrder
    HireDate?: SortOrder
  }

  export type doctorMinOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    Age?: SortOrder
    BirthDate?: SortOrder
    Gender?: SortOrder
    Specialty?: SortOrder
    Address?: SortOrder
    Cellphone?: SortOrder
    CURP?: SortOrder
    LicenseNumber?: SortOrder
    Sex?: SortOrder
    MedicalLicense?: SortOrder
    Email?: SortOrder
    HireDate?: SortOrder
  }

  export type doctorSumOrderByAggregateInput = {
    id?: SortOrder
    Age?: SortOrder
  }

  export type Enumdoctor_GenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.doctor_Gender | Enumdoctor_GenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.doctor_Gender[] | null
    notIn?: $Enums.doctor_Gender[] | null
    not?: NestedEnumdoctor_GenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.doctor_Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumdoctor_GenderNullableFilter<$PrismaModel>
    _max?: NestedEnumdoctor_GenderNullableFilter<$PrismaModel>
  }

  export type Enumempleado_GenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.empleado_Gender | Enumempleado_GenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.empleado_Gender[] | null
    notIn?: $Enums.empleado_Gender[] | null
    not?: NestedEnumempleado_GenderNullableFilter<$PrismaModel> | $Enums.empleado_Gender | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type empleadoCountOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    BirthDate?: SortOrder
    Gender?: SortOrder
    Cellphone?: SortOrder
    Email?: SortOrder
    Address?: SortOrder
    Position?: SortOrder
    CURP?: SortOrder
    RFC?: SortOrder
    Salary?: SortOrder
    HireDate?: SortOrder
  }

  export type empleadoAvgOrderByAggregateInput = {
    id?: SortOrder
    Salary?: SortOrder
  }

  export type empleadoMaxOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    BirthDate?: SortOrder
    Gender?: SortOrder
    Cellphone?: SortOrder
    Email?: SortOrder
    Address?: SortOrder
    Position?: SortOrder
    CURP?: SortOrder
    RFC?: SortOrder
    Salary?: SortOrder
    HireDate?: SortOrder
  }

  export type empleadoMinOrderByAggregateInput = {
    id?: SortOrder
    Name?: SortOrder
    LastName?: SortOrder
    BirthDate?: SortOrder
    Gender?: SortOrder
    Cellphone?: SortOrder
    Email?: SortOrder
    Address?: SortOrder
    Position?: SortOrder
    CURP?: SortOrder
    RFC?: SortOrder
    Salary?: SortOrder
    HireDate?: SortOrder
  }

  export type empleadoSumOrderByAggregateInput = {
    id?: SortOrder
    Salary?: SortOrder
  }

  export type Enumempleado_GenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.empleado_Gender | Enumempleado_GenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.empleado_Gender[] | null
    notIn?: $Enums.empleado_Gender[] | null
    not?: NestedEnumempleado_GenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.empleado_Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumempleado_GenderNullableFilter<$PrismaModel>
    _max?: NestedEnumempleado_GenderNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type Enumenfermedades_DiseaseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.enfermedades_DiseaseType | Enumenfermedades_DiseaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.enfermedades_DiseaseType[]
    notIn?: $Enums.enfermedades_DiseaseType[]
    not?: NestedEnumenfermedades_DiseaseTypeFilter<$PrismaModel> | $Enums.enfermedades_DiseaseType
  }

  export type enfermedadesCountOrderByAggregateInput = {
    DiseaseId?: SortOrder
    DiseaseType?: SortOrder
    Other?: SortOrder
    Causes?: SortOrder
    Symptoms?: SortOrder
    Treatment?: SortOrder
  }

  export type enfermedadesAvgOrderByAggregateInput = {
    DiseaseId?: SortOrder
  }

  export type enfermedadesMaxOrderByAggregateInput = {
    DiseaseId?: SortOrder
    DiseaseType?: SortOrder
    Other?: SortOrder
    Causes?: SortOrder
    Symptoms?: SortOrder
    Treatment?: SortOrder
  }

  export type enfermedadesMinOrderByAggregateInput = {
    DiseaseId?: SortOrder
    DiseaseType?: SortOrder
    Other?: SortOrder
    Causes?: SortOrder
    Symptoms?: SortOrder
    Treatment?: SortOrder
  }

  export type enfermedadesSumOrderByAggregateInput = {
    DiseaseId?: SortOrder
  }

  export type Enumenfermedades_DiseaseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.enfermedades_DiseaseType | Enumenfermedades_DiseaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.enfermedades_DiseaseType[]
    notIn?: $Enums.enfermedades_DiseaseType[]
    not?: NestedEnumenfermedades_DiseaseTypeWithAggregatesFilter<$PrismaModel> | $Enums.enfermedades_DiseaseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumenfermedades_DiseaseTypeFilter<$PrismaModel>
    _max?: NestedEnumenfermedades_DiseaseTypeFilter<$PrismaModel>
  }

  export type examen_clinico_intraoralCountOrderByAggregateInput = {
    PatientId?: SortOrder
    ExaminationDate?: SortOrder
    Gums?: SortOrder
    Tongue?: SortOrder
    HardPalate?: SortOrder
    SoftPalate?: SortOrder
    Pharynx?: SortOrder
    FloorOfMouth?: SortOrder
    ResidualRidge?: SortOrder
    OcclusionType?: SortOrder
    Observations?: SortOrder
  }

  export type examen_clinico_intraoralAvgOrderByAggregateInput = {
    PatientId?: SortOrder
  }

  export type examen_clinico_intraoralMaxOrderByAggregateInput = {
    PatientId?: SortOrder
    ExaminationDate?: SortOrder
    Gums?: SortOrder
    Tongue?: SortOrder
    HardPalate?: SortOrder
    SoftPalate?: SortOrder
    Pharynx?: SortOrder
    FloorOfMouth?: SortOrder
    ResidualRidge?: SortOrder
    OcclusionType?: SortOrder
    Observations?: SortOrder
  }

  export type examen_clinico_intraoralMinOrderByAggregateInput = {
    PatientId?: SortOrder
    ExaminationDate?: SortOrder
    Gums?: SortOrder
    Tongue?: SortOrder
    HardPalate?: SortOrder
    SoftPalate?: SortOrder
    Pharynx?: SortOrder
    FloorOfMouth?: SortOrder
    ResidualRidge?: SortOrder
    OcclusionType?: SortOrder
    Observations?: SortOrder
  }

  export type examen_clinico_intraoralSumOrderByAggregateInput = {
    PatientId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type historial_clinicoCountOrderByAggregateInput = {
    HistoryId?: SortOrder
    ClientId?: SortOrder
    DentistId?: SortOrder
    ConsultationDate?: SortOrder
    ClinicalData?: SortOrder
  }

  export type historial_clinicoAvgOrderByAggregateInput = {
    HistoryId?: SortOrder
    ClientId?: SortOrder
    DentistId?: SortOrder
  }

  export type historial_clinicoMaxOrderByAggregateInput = {
    HistoryId?: SortOrder
    ClientId?: SortOrder
    DentistId?: SortOrder
    ConsultationDate?: SortOrder
  }

  export type historial_clinicoMinOrderByAggregateInput = {
    HistoryId?: SortOrder
    ClientId?: SortOrder
    DentistId?: SortOrder
    ConsultationDate?: SortOrder
  }

  export type historial_clinicoSumOrderByAggregateInput = {
    HistoryId?: SortOrder
    ClientId?: SortOrder
    DentistId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type permisosCountOrderByAggregateInput = {
    ID?: SortOrder
    Permission?: SortOrder
    Description?: SortOrder
  }

  export type permisosAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type permisosMaxOrderByAggregateInput = {
    ID?: SortOrder
    Permission?: SortOrder
    Description?: SortOrder
  }

  export type permisosMinOrderByAggregateInput = {
    ID?: SortOrder
    Permission?: SortOrder
    Description?: SortOrder
  }

  export type permisosSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type usuariosCountOrderByAggregateInput = {
    Id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    IsAdministrator?: SortOrder
    IsDoctor?: SortOrder
    IsEmployee?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    Id?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    Id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    IsAdministrator?: SortOrder
    IsDoctor?: SortOrder
    IsEmployee?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    Id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    IsAdministrator?: SortOrder
    IsDoctor?: SortOrder
    IsEmployee?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    Id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type serviciosCountOrderByAggregateInput = {
    Id?: SortOrder
    Service_Name?: SortOrder
    Price?: SortOrder
  }

  export type serviciosAvgOrderByAggregateInput = {
    Id?: SortOrder
    Price?: SortOrder
  }

  export type serviciosMaxOrderByAggregateInput = {
    Id?: SortOrder
    Service_Name?: SortOrder
    Price?: SortOrder
  }

  export type serviciosMinOrderByAggregateInput = {
    Id?: SortOrder
    Service_Name?: SortOrder
    Price?: SortOrder
  }

  export type serviciosSumOrderByAggregateInput = {
    Id?: SortOrder
    Price?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Enumantecedentes_no_patologicos_SmokingFieldUpdateOperationsInput = {
    set?: $Enums.antecedentes_no_patologicos_Smoking
  }

  export type Enumantecedentes_no_patologicos_SubstanceAbuseFieldUpdateOperationsInput = {
    set?: $Enums.antecedentes_no_patologicos_SubstanceAbuse
  }

  export type Enumantecedentes_no_patologicos_AlcoholismFieldUpdateOperationsInput = {
    set?: $Enums.antecedentes_no_patologicos_Alcoholism
  }

  export type Enumantecedentes_no_patologicos_SedentaryFieldUpdateOperationsInput = {
    set?: $Enums.antecedentes_no_patologicos_Sedentary
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type Enumantecedentes_patologicos_DiseaseTypeFieldUpdateOperationsInput = {
    set?: $Enums.antecedentes_patologicos_DiseaseType
  }

  export type Enumantecedentes_patologicos_ChronicFieldUpdateOperationsInput = {
    set?: $Enums.antecedentes_patologicos_Chronic
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumdoctor_GenderFieldUpdateOperationsInput = {
    set?: $Enums.doctor_Gender | null
  }

  export type NullableEnumempleado_GenderFieldUpdateOperationsInput = {
    set?: $Enums.empleado_Gender | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type Enumenfermedades_DiseaseTypeFieldUpdateOperationsInput = {
    set?: $Enums.enfermedades_DiseaseType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumantecedentes_no_patologicos_SmokingFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Smoking | Enumantecedentes_no_patologicos_SmokingFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Smoking[]
    notIn?: $Enums.antecedentes_no_patologicos_Smoking[]
    not?: NestedEnumantecedentes_no_patologicos_SmokingFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Smoking
  }

  export type NestedEnumantecedentes_no_patologicos_SubstanceAbuseFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_SubstanceAbuse | Enumantecedentes_no_patologicos_SubstanceAbuseFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_SubstanceAbuse[]
    notIn?: $Enums.antecedentes_no_patologicos_SubstanceAbuse[]
    not?: NestedEnumantecedentes_no_patologicos_SubstanceAbuseFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_SubstanceAbuse
  }

  export type NestedEnumantecedentes_no_patologicos_AlcoholismFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Alcoholism | Enumantecedentes_no_patologicos_AlcoholismFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Alcoholism[]
    notIn?: $Enums.antecedentes_no_patologicos_Alcoholism[]
    not?: NestedEnumantecedentes_no_patologicos_AlcoholismFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Alcoholism
  }

  export type NestedEnumantecedentes_no_patologicos_SedentaryFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Sedentary | Enumantecedentes_no_patologicos_SedentaryFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Sedentary[]
    notIn?: $Enums.antecedentes_no_patologicos_Sedentary[]
    not?: NestedEnumantecedentes_no_patologicos_SedentaryFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Sedentary
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumantecedentes_no_patologicos_SmokingWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Smoking | Enumantecedentes_no_patologicos_SmokingFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Smoking[]
    notIn?: $Enums.antecedentes_no_patologicos_Smoking[]
    not?: NestedEnumantecedentes_no_patologicos_SmokingWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Smoking
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_no_patologicos_SmokingFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_no_patologicos_SmokingFilter<$PrismaModel>
  }

  export type NestedEnumantecedentes_no_patologicos_SubstanceAbuseWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_SubstanceAbuse | Enumantecedentes_no_patologicos_SubstanceAbuseFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_SubstanceAbuse[]
    notIn?: $Enums.antecedentes_no_patologicos_SubstanceAbuse[]
    not?: NestedEnumantecedentes_no_patologicos_SubstanceAbuseWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_SubstanceAbuse
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_no_patologicos_SubstanceAbuseFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_no_patologicos_SubstanceAbuseFilter<$PrismaModel>
  }

  export type NestedEnumantecedentes_no_patologicos_AlcoholismWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Alcoholism | Enumantecedentes_no_patologicos_AlcoholismFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Alcoholism[]
    notIn?: $Enums.antecedentes_no_patologicos_Alcoholism[]
    not?: NestedEnumantecedentes_no_patologicos_AlcoholismWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Alcoholism
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_no_patologicos_AlcoholismFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_no_patologicos_AlcoholismFilter<$PrismaModel>
  }

  export type NestedEnumantecedentes_no_patologicos_SedentaryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_no_patologicos_Sedentary | Enumantecedentes_no_patologicos_SedentaryFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_no_patologicos_Sedentary[]
    notIn?: $Enums.antecedentes_no_patologicos_Sedentary[]
    not?: NestedEnumantecedentes_no_patologicos_SedentaryWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_no_patologicos_Sedentary
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_no_patologicos_SedentaryFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_no_patologicos_SedentaryFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumantecedentes_patologicos_DiseaseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_patologicos_DiseaseType | Enumantecedentes_patologicos_DiseaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_patologicos_DiseaseType[]
    notIn?: $Enums.antecedentes_patologicos_DiseaseType[]
    not?: NestedEnumantecedentes_patologicos_DiseaseTypeFilter<$PrismaModel> | $Enums.antecedentes_patologicos_DiseaseType
  }

  export type NestedEnumantecedentes_patologicos_ChronicFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_patologicos_Chronic | Enumantecedentes_patologicos_ChronicFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_patologicos_Chronic[]
    notIn?: $Enums.antecedentes_patologicos_Chronic[]
    not?: NestedEnumantecedentes_patologicos_ChronicFilter<$PrismaModel> | $Enums.antecedentes_patologicos_Chronic
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumantecedentes_patologicos_DiseaseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_patologicos_DiseaseType | Enumantecedentes_patologicos_DiseaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_patologicos_DiseaseType[]
    notIn?: $Enums.antecedentes_patologicos_DiseaseType[]
    not?: NestedEnumantecedentes_patologicos_DiseaseTypeWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_patologicos_DiseaseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_patologicos_DiseaseTypeFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_patologicos_DiseaseTypeFilter<$PrismaModel>
  }

  export type NestedEnumantecedentes_patologicos_ChronicWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.antecedentes_patologicos_Chronic | Enumantecedentes_patologicos_ChronicFieldRefInput<$PrismaModel>
    in?: $Enums.antecedentes_patologicos_Chronic[]
    notIn?: $Enums.antecedentes_patologicos_Chronic[]
    not?: NestedEnumantecedentes_patologicos_ChronicWithAggregatesFilter<$PrismaModel> | $Enums.antecedentes_patologicos_Chronic
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumantecedentes_patologicos_ChronicFilter<$PrismaModel>
    _max?: NestedEnumantecedentes_patologicos_ChronicFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumdoctor_GenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.doctor_Gender | Enumdoctor_GenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.doctor_Gender[] | null
    notIn?: $Enums.doctor_Gender[] | null
    not?: NestedEnumdoctor_GenderNullableFilter<$PrismaModel> | $Enums.doctor_Gender | null
  }

  export type NestedEnumdoctor_GenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.doctor_Gender | Enumdoctor_GenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.doctor_Gender[] | null
    notIn?: $Enums.doctor_Gender[] | null
    not?: NestedEnumdoctor_GenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.doctor_Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumdoctor_GenderNullableFilter<$PrismaModel>
    _max?: NestedEnumdoctor_GenderNullableFilter<$PrismaModel>
  }

  export type NestedEnumempleado_GenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.empleado_Gender | Enumempleado_GenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.empleado_Gender[] | null
    notIn?: $Enums.empleado_Gender[] | null
    not?: NestedEnumempleado_GenderNullableFilter<$PrismaModel> | $Enums.empleado_Gender | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumempleado_GenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.empleado_Gender | Enumempleado_GenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.empleado_Gender[] | null
    notIn?: $Enums.empleado_Gender[] | null
    not?: NestedEnumempleado_GenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.empleado_Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumempleado_GenderNullableFilter<$PrismaModel>
    _max?: NestedEnumempleado_GenderNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumenfermedades_DiseaseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.enfermedades_DiseaseType | Enumenfermedades_DiseaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.enfermedades_DiseaseType[]
    notIn?: $Enums.enfermedades_DiseaseType[]
    not?: NestedEnumenfermedades_DiseaseTypeFilter<$PrismaModel> | $Enums.enfermedades_DiseaseType
  }

  export type NestedEnumenfermedades_DiseaseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.enfermedades_DiseaseType | Enumenfermedades_DiseaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.enfermedades_DiseaseType[]
    notIn?: $Enums.enfermedades_DiseaseType[]
    not?: NestedEnumenfermedades_DiseaseTypeWithAggregatesFilter<$PrismaModel> | $Enums.enfermedades_DiseaseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumenfermedades_DiseaseTypeFilter<$PrismaModel>
    _max?: NestedEnumenfermedades_DiseaseTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use antecedentes_no_patologicosDefaultArgs instead
     */
    export type antecedentes_no_patologicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = antecedentes_no_patologicosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use antecedentes_patologicosDefaultArgs instead
     */
    export type antecedentes_patologicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = antecedentes_patologicosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use bitacoraDefaultArgs instead
     */
    export type bitacoraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = bitacoraDefaultArgs<ExtArgs>
    /**
     * @deprecated Use clientesDefaultArgs instead
     */
    export type clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = clientesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use doctorDefaultArgs instead
     */
    export type doctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = doctorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use empleadoDefaultArgs instead
     */
    export type empleadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = empleadoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use enfermedadesDefaultArgs instead
     */
    export type enfermedadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = enfermedadesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use examen_clinico_intraoralDefaultArgs instead
     */
    export type examen_clinico_intraoralArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = examen_clinico_intraoralDefaultArgs<ExtArgs>
    /**
     * @deprecated Use historial_clinicoDefaultArgs instead
     */
    export type historial_clinicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = historial_clinicoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use permisosDefaultArgs instead
     */
    export type permisosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = permisosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuariosDefaultArgs instead
     */
    export type usuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuariosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use serviciosDefaultArgs instead
     */
    export type serviciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = serviciosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}